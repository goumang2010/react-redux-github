webpackJsonp([1],{577:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=a(471),o=a(578),i=r(o),l=a(766),s=(0,n.connect)(l.mapStateToProps,l.mapDispatchToProps)(i.default);t.default=s},578:function(e,t,a){(function(e){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function l(e){return function(t){return U(I(t,e),e)}}Object.defineProperty(t,"__esModule",{value:!0});var s=a(579),c=r(s),u=a(584),d=r(u),f=a(300),p=r(f),m=a(585),h=r(m),b=function(){function e(e,t){for(var a=0;a<t.length;a++){var r=t[a];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,a,r){return a&&e(t.prototype,a),r&&e(t,r),t}}(),g=a(731),v=r(g),y=a(732),_=r(y),k=a(738),w=r(k),x=a(742),P=r(x),E=a(747),N=r(E),j=a(748),O=r(j),T=a(751),M=r(T),C=a(754),z=r(C),S=a(762),F=r(S),H=a(763),R=r(H);a(764);var L={Search:{displayName:"Search"}},U=(0,h.default)({filename:"/home/travis/build/goumang2010/react-redux-github/src/modules/Search/component.jsx",components:L,locals:[e],imports:[p.default]}),I=(0,d.default)({filename:"/home/travis/build/goumang2010/react-redux-github/src/modules/Search/component.jsx",components:L,locals:[],imports:[p.default,c.default]}),q=P.default.List,A=P.default.Item,D=[{activeName:"repositories",title:"Repositories"},{activeName:"issues",title:"Issues"},{activeName:"users",title:"Users"}],Z=l("Search")(function(e){function t(e){n(this,t);var a=o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return a.keyUpHandler=a.keyUpHandler.bind(a),a}return i(t,e),b(t,[{key:"componentDidMount",value:function(){(0,N.default)()}},{key:"keyUpHandler",value:function(e){if(13===e.keyCode){var t=this.props.activeName?this.props.activeName:D[2].activeName;this.props.changeActiveName(t),this.props.getItems(e.target.value,t)}}},{key:"changeTabHandler",value:function(e){this.props.changeActiveName(e),this.props.getItems(this.refs.search.value,e)}},{key:"changePageHandler",value:function(e){this.props.getItems(this.refs.search.value,this.props.activeName,e)}},{key:"render",value:function(){var e=this,t=this.props,a=t.items,r=t.activeName,n=t.totalPages,o=t.resetPage,i=t.gotoUser,l=t.isFetching;return p.default.createElement("div",{className:"search"},p.default.createElement(_.default,{left:{icon:"align",size:{width:20,height:20}},center:{icon:"github"},right:{icon:"bell",size:{width:24,height:24}}}),p.default.createElement(w.default,null,p.default.createElement(q,null,p.default.createElement(A,{className:"search-input"},p.default.createElement("div",{className:"item-inner"},p.default.createElement("div",{className:"item-input"},p.default.createElement("input",{type:"text",ref:"search",onKeyUp:this.keyUpHandler}))))),p.default.createElement(O.default,{tabs:D,activeName:D[2].activeName,onChange:function(t){return e.changeTabHandler(t)}}),r===D[0].activeName&&p.default.createElement(z.default,{items:a,isFetching:l}),r===D[1].activeName&&p.default.createElement(F.default,{items:a,isFetching:l}),r===D[2].activeName&&p.default.createElement(R.default,{items:a,gotoUser:i,isFetching:l}),a&&a.size>0&&p.default.createElement(M.default,{max:n,reset:o,onChange:function(t){return e.changePageHandler(t)}})))}}]),t}(p.default.Component));Z.propTypes={item:p.default.PropTypes.instanceOf(v.default.List),activeName:p.default.PropTypes.string,totalPages:p.default.PropTypes.number,resetPage:p.default.PropTypes.bool},t.default=Z}).call(t,a(496)(e))},732:function(e,t,a){(function(e){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function l(e){return function(t){return k(w(t,e),e)}}Object.defineProperty(t,"__esModule",{value:!0});var s=a(579),c=r(s),u=a(584),d=r(u),f=a(300),p=r(f),m=a(585),h=r(m),b=function(){function e(e,t){for(var a=0;a<t.length;a++){var r=t[a];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,a,r){return a&&e(t.prototype,a),r&&e(t,r),t}}(),g=a(570),v=a(733),y=r(v);a(736);var _={Header:{displayName:"Header"}},k=(0,h.default)({filename:"/home/travis/build/goumang2010/react-redux-github/src/components/Header/index.jsx",components:_,locals:[e],imports:[p.default]}),w=(0,d.default)({filename:"/home/travis/build/goumang2010/react-redux-github/src/components/Header/index.jsx",components:_,locals:[],imports:[p.default,c.default]}),x=l("Header")(function(e){function t(e){return n(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return i(t,e),b(t,[{key:"go",value:function(e,t){"back"===e?this.props.dispatch((0,g.go)(-1)):this.props.dispatch((0,g.go)(t))}},{key:"goto",value:function(e){e&&this.props.dispatch((0,g.push)(e))}},{key:"render",value:function(){var e=this,t=this.props,a=t.left,r=t.center,n=t.right,o={width:28,height:28};return p.default.createElement("div",{className:"header"},p.default.createElement("div",{className:"navbar"},p.default.createElement("div",{className:"navbar-inner"},p.default.createElement("div",{className:"left link",onClick:function(){return e.go(a.event)}},a.icon?p.default.createElement(y.default,{name:a.icon,style:a.size?a.size:o}):a.text),p.default.createElement("div",{className:"center"},r.icon&&p.default.createElement(y.default,{name:r.icon,style:r.size?r.size:o}),r.text&&p.default.createElement("span",null,r.text)),p.default.createElement("div",{className:"right link",onClick:function(){return e.goto(n.url)}},n.icon?p.default.createElement(y.default,{name:n.icon,style:n.size?n.size:o}):n.text))))}}]),t}(p.default.Component));x.propTypes={left:p.default.PropTypes.object.isRequired,center:p.default.PropTypes.object.isRequired,right:p.default.PropTypes.object.isRequired},t.default=x}).call(t,a(496)(e))},733:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=a(300),o=r(n);a(734);var i=function(e){var t="../src/img/icon/"+e.name+".png";return o.default.createElement("img",{className:"img-icon",src:t,style:e.style,alt:"icon"})};i.propTypes={children:o.default.PropTypes.any},t.default=i},734:function(e,t,a){var r=a(735);"string"==typeof r&&(r=[[e.id,r,""]]);var n=a(470)(r,{});r.locals&&(e.exports=r.locals),r.locals||e.hot.accept(735,function(){var t=a(735);"string"==typeof t&&(t=[[e.id,t,""]]),n(t)}),e.hot.dispose(function(){n()})},735:function(e,t,a){t=e.exports=a(468)(),t.push([e.id,".img-icon{vertical-align:middle;width:.213333rem;height:.213333rem}",""])},736:function(e,t,a){var r=a(737);"string"==typeof r&&(r=[[e.id,r,""]]);var n=a(470)(r,{});r.locals&&(e.exports=r.locals),r.locals||e.hot.accept(737,function(){var t=a(737);"string"==typeof t&&(t=[[e.id,t,""]]),n(t)}),e.hot.dispose(function(){n()})},737:function(e,t,a){t=e.exports=a(468)(),t.push([e.id,"body{background-color:#fff}.button-red{color:#fff;background-color:#f44336!important}.button-orange{color:#fff;background-color:#ff9800!important}.button-green{color:#fff;background-color:#4caf50!important}.button-blue{color:#fff;background-color:#2196f3!important}.button{border-radius:0}.entry-wrap,.entry-wrap>div,.entry-wrap>div>div{height:100%}.list-block .item-inner:after{display:none}.header .link.active-state{opacity:.4;filter:alpha(opacity=40)}",""])},738:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var r in a)Object.prototype.hasOwnProperty.call(a,r)&&(e[r]=a[r])}return e},o=a(300),i=r(o),l=a(739),s=r(l);a(740);var c=function(e){return i.default.createElement("div",n({},e,{className:(0,s.default)("page-content",e.className)}),e.children)};c.propTypes={children:i.default.PropTypes.any.isRequired},t.default=c},739:function(e,t,a){var r,n;/*!
	  Copyright (c) 2016 Jed Watson.
	  Licensed under the MIT License (MIT), see
	  http://jedwatson.github.io/classnames
	*/
!function(){"use strict";function a(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var n=typeof r;if("string"===n||"number"===n)e.push(r);else if(Array.isArray(r))e.push(a.apply(null,r));else if("object"===n)for(var i in r)o.call(r,i)&&r[i]&&e.push(i)}}return e.join(" ")}var o={}.hasOwnProperty;"undefined"!=typeof e&&e.exports?e.exports=a:(r=[],n=function(){return a}.apply(t,r),!(void 0!==n&&(e.exports=n)))}()},740:function(e,t,a){var r=a(741);"string"==typeof r&&(r=[[e.id,r,""]]);var n=a(470)(r,{});r.locals&&(e.exports=r.locals),r.locals||e.hot.accept(741,function(){var t=a(741);"string"==typeof t&&(t=[[e.id,t,""]]),n(t)}),e.hot.dispose(function(){n()})},741:function(e,t,a){t=e.exports=a(468)(),t.push([e.id,".page-content{overflow:scroll;height:calc(100% - .586667rem)}",""])},742:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=a(743),o=r(n),i=a(744),l=r(i);a(745);var s={List:o.default,Item:l.default};t.default=s},743:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=a(300),o=r(n),i=a(739),l=r(i),s=function(e){var t=e.className,a=e.children,r=(0,l.default)("list-block",t,{});return o.default.createElement("div",{className:r},o.default.createElement("ul",null,a))};s.propTypes={children:o.default.PropTypes.any},t.default=s},744:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=a(300),o=r(n),i=a(739),l=r(i),s=function(e){var t=e.className,a=e.media,r=e.children,n=(0,l.default)("item-content",t,{media:a});return o.default.createElement("li",{className:n},r)};s.propTypes={children:o.default.PropTypes.any},t.default=s},745:function(e,t,a){var r=a(746);"string"==typeof r&&(r=[[e.id,r,""]]);var n=a(470)(r,{});r.locals&&(e.exports=r.locals),r.locals||e.hot.accept(746,function(){var t=a(746);"string"==typeof t&&(t=[[e.id,t,""]]),n(t)}),e.hot.dispose(function(){n()})},746:function(e,t,a){t=e.exports=a(468)(),t.push([e.id,".list-block{margin:0}.list-block .item-content{display:block}.list-block .item-content.media{display:-webkit-box;display:-ms-flexbox;display:flex}.list-block UL:after,.list-block ul:before{display:none}.list-block li{border-bottom:.013333rem solid #ccc}",""])},747:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=a(464),o=r(n),i=o.default.$,l=i("#pages");t.default=function(){l.removeClass("toolbar-fixed")}},748:function(e,t,a){(function(e){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function l(e){return function(t){return _(k(t,e),e)}}Object.defineProperty(t,"__esModule",{value:!0});var s=a(579),c=r(s),u=a(584),d=r(u),f=a(300),p=r(f),m=a(585),h=r(m),b=function(){function e(e,t){for(var a=0;a<t.length;a++){var r=t[a];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,a,r){return a&&e(t.prototype,a),r&&e(t,r),t}}(),g=a(739),v=r(g);a(749);var y={Tab:{displayName:"Tab"}},_=(0,h.default)({filename:"/home/travis/build/goumang2010/react-redux-github/src/components/Tab/index.jsx",components:y,locals:[e],imports:[p.default]}),k=(0,d.default)({filename:"/home/travis/build/goumang2010/react-redux-github/src/components/Tab/index.jsx",components:y,locals:[],imports:[p.default,c.default]}),w=l("Tab")(function(e){function t(e){n(this,t);var a=o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return a.state={activeName:e.activeName},a}return i(t,e),b(t,[{key:"changeActiveName",value:function(e){this.setState({activeName:e}),"function"==typeof this.props.onChange&&this.props.onChange(e)}},{key:"render",value:function(){var e=this,t=this.props,a=t.tabs,r=t.isFetching;return p.default.createElement("div",{className:"tabs"},a.map(function(t){return p.default.createElement("div",{key:t.activeName,className:(0,v.default)("tab",{selected:e.state.activeName===t.activeName}),onClick:function(){return e.changeActiveName(t.activeName)},disabled:r},t.title)}))}}]),t}(p.default.Component));w.porpTypes={tabs:p.default.PropTypes.object.isRequired,activeName:p.default.PropTypes.string.isRequired,isFetching:p.default.PropTypes.bool},w.defaultProps={isFetching:!1},t.default=w}).call(t,a(496)(e))},749:function(e,t,a){var r=a(750);"string"==typeof r&&(r=[[e.id,r,""]]);var n=a(470)(r,{});r.locals&&(e.exports=r.locals),r.locals||e.hot.accept(750,function(){var t=a(750);"string"==typeof t&&(t=[[e.id,t,""]]),n(t)}),e.hot.dispose(function(){n()})},750:function(e,t,a){t=e.exports=a(468)(),t.push([e.id,".tabs{display:table;width:100%;table-layout:fixed;background:#fafafa}.tabs .tab{display:table-cell;text-align:center;padding:.133333rem 0}",""])},751:function(e,t,a){(function(e){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function l(e){return function(t){return _(k(t,e),e)}}Object.defineProperty(t,"__esModule",{value:!0});var s=a(579),c=r(s),u=a(584),d=r(u),f=a(300),p=r(f),m=a(585),h=r(m),b=function(){function e(e,t){for(var a=0;a<t.length;a++){var r=t[a];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,a,r){return a&&e(t.prototype,a),r&&e(t,r),t}}(),g=a(739),v=r(g);a(752);var y={CountPage:{displayName:"CountPage"}},_=(0,h.default)({filename:"/home/travis/build/goumang2010/react-redux-github/src/components/CountPage/index.jsx",components:y,locals:[e],imports:[p.default]}),k=(0,d.default)({filename:"/home/travis/build/goumang2010/react-redux-github/src/components/CountPage/index.jsx",components:y,locals:[],imports:[p.default,c.default]}),w=l("CountPage")(function(e){function t(e){n(this,t);var a=o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return a.state={page:1},a.addPage=a.addPage.bind(a),a.minusPage=a.minusPage.bind(a),a}return i(t,e),b(t,[{key:"componentWillReceiveProps",value:function(e){e.reset&&this.setState({page:1})}},{key:"addPage",value:function(){var e=this.state.page;e+=1,this.setState({page:e}),"function"==typeof this.props.onChange&&this.props.onChange(e)}},{key:"minusPage",value:function(){var e=this.state.page;e-=1,this.setState({page:e}),"function"==typeof this.props.onChange&&this.props.onChange(e)}},{key:"render",value:function(){var e=this,t=this.state.page,a=this.props,r=a.min,n=a.max;return p.default.createElement("div",{className:"pagination row no-gutter"},p.default.createElement("div",{className:(0,v.default)("col-33",{disabled:t<=r}),onClick:function(){return e.minusPage()}},"◀︎"),p.default.createElement("div",{className:"col-33 current-page"},t+"/"+n),p.default.createElement("div",{className:(0,v.default)("col-33",{disabled:t>=n}),onClick:function(){return e.addPage()}},"▶︎"))}}]),t}(p.default.Component));w.porpTypes={min:p.default.PropTypes.number,max:p.default.PropTypes.number.isRequired,reset:p.default.PropTypes.bool},w.defaultProps={min:1,max:1,reset:!1},t.default=w}).call(t,a(496)(e))},752:function(e,t,a){var r=a(753);"string"==typeof r&&(r=[[e.id,r,""]]);var n=a(470)(r,{});r.locals&&(e.exports=r.locals),r.locals||e.hot.accept(753,function(){var t=a(753);"string"==typeof t&&(t=[[e.id,t,""]]),n(t)}),e.hot.dispose(function(){n()})},753:function(e,t,a){t=e.exports=a(468)(),t.push([e.id,".pagination{text-align:center}.pagination div{padding:.133333rem .2rem;border-bottom:.013333rem solid #ddd}.pagination .current-page{border-right:.013333rem solid #ddd;border-left:.013333rem solid #ddd}.pagination .current-page.active-state{background:transparent}.pagination .active-state{background-color:#bfe5f3}",""])},754:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=a(300),o=r(n),i=a(731),l=r(i),s=a(742),c=r(s),u=a(755),d=r(u),f=a(756),p=r(f),m=a(759),h=r(m),b=c.default.List,g=c.default.Item,v=function(e){var t=e.items,a=e.isFetching;return a?o.default.createElement(h.default,null):0!==t.size?o.default.createElement(b,{className:"rep-items"},t.map(function(e){return o.default.createElement(g,{key:e.get("id")},o.default.createElement("div",{className:"item-wrap"},o.default.createElement("div",{className:"title"},e.get("full_name")),o.default.createElement("div",{className:"after"},e.get("stargazers_count"),o.default.createElement("span",null,"★"))),e.get("description")&&""!==e.get("description")&&o.default.createElement("div",{className:"des"},(0,d.default)(e.get("description"),200)))})):o.default.createElement(p.default,null)};v.propTypes={item:o.default.PropTypes.instanceOf(l.default.List),isFetching:o.default.PropTypes.bool},t.default=v},755:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return e.length>t?e.substring(0,t)+"...":e}},756:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=a(300),o=r(n);a(757);var i=function(){return o.default.createElement("div",{className:"search-placeholder"},"No results to show.")};t.default=i},757:function(e,t,a){var r=a(758);"string"==typeof r&&(r=[[e.id,r,""]]);var n=a(470)(r,{});r.locals&&(e.exports=r.locals),r.locals||e.hot.accept(758,function(){var t=a(758);"string"==typeof t&&(t=[[e.id,t,""]]),n(t)}),e.hot.dispose(function(){n()})},758:function(e,t,a){t=e.exports=a(468)(),t.push([e.id,".user-placeholder{padding:0;margin:.2rem;overflow:hidden;word-break:break-word;word-wrap:break-word;white-space:normal;border:.013333rem solid #ddd;border-radius:.04rem;background:#f5f5f5;border-color:#ccc;box-shadow:inset 0 0 .133333rem rgba(0,0,0,.1)}.user-placeholder .wrap{font-size:.2rem;color:#767676;text-align:center;padding:.2rem}.search-placeholder{padding:.6rem;font-weight:700;color:#767676;text-align:center}",""])},759:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=a(300),o=r(n);a(760);var i=function(){return o.default.createElement("div",{className:"loading"},o.default.createElement("div",{className:"loader"}),o.default.createElement("div",{className:"text"},"Loading..."))};t.default=i},760:function(e,t,a){var r=a(761);"string"==typeof r&&(r=[[e.id,r,""]]);var n=a(470)(r,{});r.locals&&(e.exports=r.locals),r.locals||e.hot.accept(761,function(){var t=a(761);"string"==typeof t&&(t=[[e.id,t,""]]),n(t)}),e.hot.dispose(function(){n()})},761:function(e,t,a){t=e.exports=a(468)(),t.push([e.id,".loading{margin:.266667rem auto;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;position:relative}.loading .text{position:absolute;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);font-size:.24rem}.loading .loader,.loading .loader:after{border-radius:50%;width:10em;height:10em}.loading .loader{margin:.8rem auto;font-size:.133333rem;position:relative;text-indent:-9999em;border-top:1.1em solid hsla(0,0%,80%,.2);border-right:1.1em solid hsla(0,0%,80%,.2);border-bottom:1.1em solid hsla(0,0%,80%,.2);border-left:1.1em solid #ccc;-webkit-transform:translateZ(0);transform:translateZ(0);-webkit-animation:load8 1.1s infinite linear;animation:load8 1.1s infinite linear}@-webkit-keyframes load8{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}@keyframes load8{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}",""])},762:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=a(300),o=r(n),i=a(731),l=r(i),s=a(742),c=r(s),u=a(755),d=r(u),f=a(756),p=r(f),m=a(759),h=r(m),b=c.default.List,g=c.default.Item,v=function(e){var t=e.items,a=e.isFetching;return a?o.default.createElement(h.default,null):0!==t.size?o.default.createElement(b,{className:"issues-items"},t.map(function(e){return o.default.createElement(g,{key:e.get("id")},o.default.createElement("div",{className:"item-wrap"},o.default.createElement("div",{className:"title"},e.get("title")),o.default.createElement("div",{className:"after"},o.default.createElement("span",null,"#"),e.get("number"))),e.get("body")&&""!==e.get("body")&&o.default.createElement("div",{className:"des"},(0,d.default)(e.get("body"),200)))})):o.default.createElement(p.default,null)};v.propTypes={item:o.default.PropTypes.instanceOf(l.default.List),isFetching:o.default.PropTypes.bool},t.default=v},763:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=a(300),o=r(n),i=a(731),l=r(i),s=a(742),c=r(s),u=a(756),d=r(u),f=a(759),p=r(f),m=c.default.List,h=c.default.Item,b=function(e){var t=e.items,a=e.gotoUser,r=e.isFetching;return r?o.default.createElement(p.default,null):0!==t.size?o.default.createElement(m,{className:"users-items"},t.map(function(e){return o.default.createElement(h,{key:e.get("id"),media:!0},o.default.createElement("div",{className:"item-media"},o.default.createElement("img",{src:e.get("avatar_url")})),o.default.createElement("div",{className:"item-inner"},o.default.createElement("div",{className:"item-title",onClick:function(){return a(e.get("login"))}},e.get("login"),o.default.createElement("span",{className:"name"},e.get("name"))),o.default.createElement("div",{className:"location"},e.get("location"))))})):o.default.createElement(d.default,null)};b.propTypes={item:o.default.PropTypes.instanceOf(l.default.List),isFetching:o.default.PropTypes.bool},t.default=b},764:function(e,t,a){var r=a(765);"string"==typeof r&&(r=[[e.id,r,""]]);var n=a(470)(r,{});r.locals&&(e.exports=r.locals),r.locals||e.hot.accept(765,function(){var t=a(765);"string"==typeof t&&(t=[[e.id,t,""]]),n(t)}),e.hot.dispose(function(){n()})},765:function(e,t,a){t=e.exports=a(468)(),t.push([e.id,"body{background-color:#fff}.button-red{color:#fff;background-color:#f44336!important}.button-orange{color:#fff;background-color:#ff9800!important}.button-green{color:#fff;background-color:#4caf50!important}.button-blue{color:#fff;background-color:#2196f3!important}.button{border-radius:0}.entry-wrap,.entry-wrap>div,.entry-wrap>div>div{height:100%}.list-block .item-inner:after{display:none}.search .search-input{border-bottom:none;background-color:#fafafa}.search .search-input .item-input{padding:.133333rem}.search .search-input input{padding:.133333rem;border:.013333rem solid #ddd}.search .tabs .tab{color:#4078c0;border-bottom:.013333rem solid #ddd}.search .tabs .tab[class*=selected]{color:#444;background-color:#fff;border-top:.026667rem solid #d26911;border-bottom-color:#fff}.search .tabs .selected:first-child{border-right:.013333rem solid #ddd}.search .tabs .selected:nth-child(2){border-right:.013333rem solid #ddd;border-left:.013333rem solid #ddd}.search .tabs .selected:nth-child(3){border-left:.013333rem solid #ddd}.search .item-content{width:100%;padding:.186667rem .2rem .186667rem .466667rem}.search .item-wrap{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;margin-bottom:.04rem;font-size:.186667rem}.search .item-wrap .title{color:#4078c0}.search .item-wrap .after{color:#999}.search .item-wrap .des{font-size:.16rem;color:#767676}.search .issues-items .des,.search .rep-items .des{font-size:.16rem;color:#767676;word-wrap:break-word}.search .users-items .item-content.media{position:relative}.search .users-items .item-inner{display:block;margin-left:.6rem;color:#4078c0;font-size:.213333rem}.search .users-items .item-inner .name{color:#333;margin-left:.133333rem}.search .users-items .item-inner .location{font-size:.186667rem;color:#767676}.search .users-items .item-media{position:absolute;left:.2rem}.search .users-items .item-media img{width:.666667rem;height:.666667rem;border-radius:.4rem}",""])}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,