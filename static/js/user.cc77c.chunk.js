webpackJsonp([2],{732:function(e,t,a){(function(e){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function l(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function i(e){return function(t){return E(_(t,e),e)}}Object.defineProperty(t,"__esModule",{value:!0});var s=a(579),c=r(s),u=a(584),f=r(u),d=a(300),p=r(d),m=a(585),g=r(m),b=function(){function e(e,t){for(var a=0;a<t.length;a++){var r=t[a];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,a,r){return a&&e(t.prototype,a),r&&e(t,r),t}}(),h=a(570),v=a(733),y=r(v);a(736);var w={Header:{displayName:"Header"}},E=(0,g.default)({filename:"/home/travis/build/goumang2010/react-redux-github/src/components/Header/index.jsx",components:w,locals:[e],imports:[p.default]}),_=(0,f.default)({filename:"/home/travis/build/goumang2010/react-redux-github/src/components/Header/index.jsx",components:w,locals:[],imports:[p.default,c.default]}),N=i("Header")(function(e){function t(e){return n(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return l(t,e),b(t,[{key:"go",value:function(e,t){"back"===e?this.props.dispatch((0,h.go)(-1)):this.props.dispatch((0,h.go)(t))}},{key:"goto",value:function(e){e&&this.props.dispatch((0,h.push)(e))}},{key:"render",value:function(){var e=this,t=this.props,a=t.left,r=t.center,n=t.right,o={width:28,height:28};return p.default.createElement("div",{className:"header"},p.default.createElement("div",{className:"navbar"},p.default.createElement("div",{className:"navbar-inner"},p.default.createElement("div",{className:"left link",onClick:function(){return e.go(a.event)}},a.icon?p.default.createElement(y.default,{name:a.icon,style:a.size?a.size:o}):a.text),p.default.createElement("div",{className:"center"},r.icon&&p.default.createElement(y.default,{name:r.icon,style:r.size?r.size:o}),r.text&&p.default.createElement("span",null,r.text)),p.default.createElement("div",{className:"right link",onClick:function(){return e.goto(n.url)}},n.icon?p.default.createElement(y.default,{name:n.icon,style:n.size?n.size:o}):n.text))))}}]),t}(p.default.Component));N.propTypes={left:p.default.PropTypes.object.isRequired,center:p.default.PropTypes.object.isRequired,right:p.default.PropTypes.object.isRequired},t.default=N}).call(t,a(496)(e))},733:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=a(300),o=r(n);a(734);var l=function(e){var t="../src/img/icon/"+e.name+".png";return o.default.createElement("img",{className:"img-icon",src:t,style:e.style,alt:"icon"})};l.propTypes={children:o.default.PropTypes.any},t.default=l},734:function(e,t,a){var r=a(735);"string"==typeof r&&(r=[[e.id,r,""]]);var n=a(470)(r,{});r.locals&&(e.exports=r.locals),r.locals||e.hot.accept(735,function(){var t=a(735);"string"==typeof t&&(t=[[e.id,t,""]]),n(t)}),e.hot.dispose(function(){n()})},735:function(e,t,a){t=e.exports=a(468)(),t.push([e.id,".img-icon{vertical-align:middle;width:.213333rem;height:.213333rem}",""])},736:function(e,t,a){var r=a(737);"string"==typeof r&&(r=[[e.id,r,""]]);var n=a(470)(r,{});r.locals&&(e.exports=r.locals),r.locals||e.hot.accept(737,function(){var t=a(737);"string"==typeof t&&(t=[[e.id,t,""]]),n(t)}),e.hot.dispose(function(){n()})},737:function(e,t,a){t=e.exports=a(468)(),t.push([e.id,"body{background-color:#fff}.button-red{color:#fff;background-color:#f44336!important}.button-orange{color:#fff;background-color:#ff9800!important}.button-green{color:#fff;background-color:#4caf50!important}.button-blue{color:#fff;background-color:#2196f3!important}.button{border-radius:0}.entry-wrap,.entry-wrap>div,.entry-wrap>div>div{height:100%}.list-block .item-inner:after{display:none}.header .link.active-state{opacity:.4;filter:alpha(opacity=40)}",""])},738:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var r in a)Object.prototype.hasOwnProperty.call(a,r)&&(e[r]=a[r])}return e},o=a(300),l=r(o),i=a(739),s=r(i);a(740);var c=function(e){return l.default.createElement("div",n({},e,{className:(0,s.default)("page-content",e.className)}),e.children)};c.propTypes={children:l.default.PropTypes.any.isRequired},t.default=c},739:function(e,t,a){var r,n;/*!
	  Copyright (c) 2016 Jed Watson.
	  Licensed under the MIT License (MIT), see
	  http://jedwatson.github.io/classnames
	*/
!function(){"use strict";function a(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var n=typeof r;if("string"===n||"number"===n)e.push(r);else if(Array.isArray(r))e.push(a.apply(null,r));else if("object"===n)for(var l in r)o.call(r,l)&&r[l]&&e.push(l)}}return e.join(" ")}var o={}.hasOwnProperty;"undefined"!=typeof e&&e.exports?e.exports=a:(r=[],n=function(){return a}.apply(t,r),!(void 0!==n&&(e.exports=n)))}()},740:function(e,t,a){var r=a(741);"string"==typeof r&&(r=[[e.id,r,""]]);var n=a(470)(r,{});r.locals&&(e.exports=r.locals),r.locals||e.hot.accept(741,function(){var t=a(741);"string"==typeof t&&(t=[[e.id,t,""]]),n(t)}),e.hot.dispose(function(){n()})},741:function(e,t,a){t=e.exports=a(468)(),t.push([e.id,".page-content{overflow:scroll;height:calc(100% - .586667rem)}",""])},742:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=a(743),o=r(n),l=a(744),i=r(l);a(745);var s={List:o.default,Item:i.default};t.default=s},743:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=a(300),o=r(n),l=a(739),i=r(l),s=function(e){var t=e.className,a=e.children,r=(0,i.default)("list-block",t,{});return o.default.createElement("div",{className:r},o.default.createElement("ul",null,a))};s.propTypes={children:o.default.PropTypes.any},t.default=s},744:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=a(300),o=r(n),l=a(739),i=r(l),s=function(e){var t=e.className,a=e.media,r=e.children,n=(0,i.default)("item-content",t,{media:a});return o.default.createElement("li",{className:n},r)};s.propTypes={children:o.default.PropTypes.any},t.default=s},745:function(e,t,a){var r=a(746);"string"==typeof r&&(r=[[e.id,r,""]]);var n=a(470)(r,{});r.locals&&(e.exports=r.locals),r.locals||e.hot.accept(746,function(){var t=a(746);"string"==typeof t&&(t=[[e.id,t,""]]),n(t)}),e.hot.dispose(function(){n()})},746:function(e,t,a){t=e.exports=a(468)(),t.push([e.id,".list-block{margin:0}.list-block .item-content{display:block}.list-block .item-content.media{display:-webkit-box;display:-ms-flexbox;display:flex}.list-block UL:after,.list-block ul:before{display:none}.list-block li{border-bottom:.013333rem solid #ccc}",""])},747:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=a(464),o=r(n),l=o.default.$,i=l("#pages");t.default=function(){i.removeClass("toolbar-fixed")}},748:function(e,t,a){(function(e){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function l(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function i(e){return function(t){return w(E(t,e),e)}}Object.defineProperty(t,"__esModule",{value:!0});var s=a(579),c=r(s),u=a(584),f=r(u),d=a(300),p=r(d),m=a(585),g=r(m),b=function(){function e(e,t){for(var a=0;a<t.length;a++){var r=t[a];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,a,r){return a&&e(t.prototype,a),r&&e(t,r),t}}(),h=a(739),v=r(h);a(749);var y={Tab:{displayName:"Tab"}},w=(0,g.default)({filename:"/home/travis/build/goumang2010/react-redux-github/src/components/Tab/index.jsx",components:y,locals:[e],imports:[p.default]}),E=(0,f.default)({filename:"/home/travis/build/goumang2010/react-redux-github/src/components/Tab/index.jsx",components:y,locals:[],imports:[p.default,c.default]}),_=i("Tab")(function(e){function t(e){n(this,t);var a=o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return a.state={activeName:e.activeName},a}return l(t,e),b(t,[{key:"changeActiveName",value:function(e){this.setState({activeName:e}),"function"==typeof this.props.onChange&&this.props.onChange(e)}},{key:"render",value:function(){var e=this,t=this.props,a=t.tabs,r=t.isFetching;return p.default.createElement("div",{className:"tabs"},a.map(function(t){return p.default.createElement("div",{key:t.activeName,className:(0,v.default)("tab",{selected:e.state.activeName===t.activeName}),onClick:function(){return e.changeActiveName(t.activeName)},disabled:r},t.title)}))}}]),t}(p.default.Component));_.porpTypes={tabs:p.default.PropTypes.object.isRequired,activeName:p.default.PropTypes.string.isRequired,isFetching:p.default.PropTypes.bool},_.defaultProps={isFetching:!1},t.default=_}).call(t,a(496)(e))},749:function(e,t,a){var r=a(750);"string"==typeof r&&(r=[[e.id,r,""]]);var n=a(470)(r,{});r.locals&&(e.exports=r.locals),r.locals||e.hot.accept(750,function(){var t=a(750);"string"==typeof t&&(t=[[e.id,t,""]]),n(t)}),e.hot.dispose(function(){n()})},750:function(e,t,a){t=e.exports=a(468)(),t.push([e.id,".tabs{display:table;width:100%;table-layout:fixed;background:#fafafa}.tabs .tab{display:table-cell;text-align:center;padding:.133333rem 0}",""])},757:function(e,t,a){var r=a(758);"string"==typeof r&&(r=[[e.id,r,""]]);var n=a(470)(r,{});r.locals&&(e.exports=r.locals),r.locals||e.hot.accept(758,function(){var t=a(758);"string"==typeof t&&(t=[[e.id,t,""]]),n(t)}),e.hot.dispose(function(){n()})},758:function(e,t,a){t=e.exports=a(468)(),t.push([e.id,".user-placeholder{padding:0;margin:.2rem;overflow:hidden;word-break:break-word;word-wrap:break-word;white-space:normal;border:.013333rem solid #ddd;border-radius:.04rem;background:#f5f5f5;border-color:#ccc;box-shadow:inset 0 0 .133333rem rgba(0,0,0,.1)}.user-placeholder .wrap{font-size:.2rem;color:#767676;text-align:center;padding:.2rem}.search-placeholder{padding:.6rem;font-weight:700;color:#767676;text-align:center}",""])},759:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=a(300),o=r(n);a(760);var l=function(){return o.default.createElement("div",{className:"loading"},o.default.createElement("div",{className:"loader"}),o.default.createElement("div",{className:"text"},"Loading..."))};t.default=l},760:function(e,t,a){var r=a(761);"string"==typeof r&&(r=[[e.id,r,""]]);var n=a(470)(r,{});r.locals&&(e.exports=r.locals),r.locals||e.hot.accept(761,function(){var t=a(761);"string"==typeof t&&(t=[[e.id,t,""]]),n(t)}),e.hot.dispose(function(){n()})},761:function(e,t,a){t=e.exports=a(468)(),t.push([e.id,".loading{margin:.266667rem auto;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;position:relative}.loading .text{position:absolute;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);font-size:.24rem}.loading .loader,.loading .loader:after{border-radius:50%;width:10em;height:10em}.loading .loader{margin:.8rem auto;font-size:.133333rem;position:relative;text-indent:-9999em;border-top:1.1em solid hsla(0,0%,80%,.2);border-right:1.1em solid hsla(0,0%,80%,.2);border-bottom:1.1em solid hsla(0,0%,80%,.2);border-left:1.1em solid #ccc;-webkit-transform:translateZ(0);transform:translateZ(0);-webkit-animation:load8 1.1s infinite linear;animation:load8 1.1s infinite linear}@-webkit-keyframes load8{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}@keyframes load8{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}",""])},771:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=a(471),o=a(772),l=r(o),i=a(786);t.default=(0,n.connect)(i.mapStateToProps,i.mapDispatchToProps)(l.default)},772:function(e,t,a){(function(e){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function l(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function i(e){return function(t){return z(D(t,e),e)}}Object.defineProperty(t,"__esModule",{value:!0});var s=a(579),c=r(s),u=a(584),f=r(u),d=a(300),p=r(d),m=a(585),g=r(m),b=function(){function e(e,t){for(var a=0;a<t.length;a++){var r=t[a];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,a,r){return a&&e(t.prototype,a),r&&e(t,r),t}}(),h=a(732),v=r(h),y=a(738),w=r(y),E=a(747),_=r(E),N=a(748),k=r(N),x=a(773),P=r(x),O=a(774),F=r(O),T=a(781),j=r(T),C=a(782),M=r(C),L=a(783),S=r(L);a(784);var A={User:{displayName:"User"}},z=(0,g.default)({filename:"/home/travis/build/goumang2010/react-redux-github/src/modules/User/component.jsx",components:A,locals:[e],imports:[p.default]}),D=(0,f.default)({filename:"/home/travis/build/goumang2010/react-redux-github/src/modules/User/component.jsx",components:A,locals:[],imports:[p.default,c.default]}),R=[{activeName:"overview",title:"Overview"},{activeName:"repositories",title:"Repositories"},{activeName:"stars",title:"Stars"},{activeName:"followers",title:"Followers"},{activeName:"following",title:"Following"}],B=i("User")(function(e){function t(e){return n(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return l(t,e),b(t,[{key:"componentDidMount",value:function(){(0,_.default)(),this.props.getUser(this.props.params.name),this.props.getUserRep(this.props.params.name),this.props.changeActiveName(R[0].activeName)}},{key:"changeTabHandler",value:function(e){switch(this.props.changeActiveName(e),e){case R[0].activeName:this.props.getUser(this.props.params.name);break;case R[1].activeName:this.props.getUserRep(this.props.params.name);break;case R[2].activeName:this.props.getUserStars(this.props.params.name);break;case R[3].activeName:this.props.getUserFollowers(this.props.params.name);break;case R[4].activeName:this.props.getUserFollowings(this.props.params.name);break;default:return}}},{key:"render",value:function(){var e=this,t=this.props,a=t.activeName,r=t.user,n=t.reps,o=t.stars,l=t.followers,i=t.followings,s=t.isFetching;return p.default.createElement("div",{className:"user"},p.default.createElement(v.default,{left:{icon:"align",size:{width:20,height:20}},center:{icon:"github"},right:{icon:"bell",size:{width:24,height:24}}}),p.default.createElement(w.default,null,p.default.createElement("div",{className:"tabs-wrap"},p.default.createElement(k.default,{tabs:R,activeName:R[0].activeName,onChange:function(t){return e.changeTabHandler(t)}})),a===R[0].activeName&&p.default.createElement(P.default,{user:r,reps:n,isFetching:s}),a===R[1].activeName&&p.default.createElement(F.default,{reps:n,placeholder:a,isFetching:s}),a===R[2].activeName&&p.default.createElement(j.default,{stars:o,placeholder:a,isFetching:s}),a===R[3].activeName&&p.default.createElement(M.default,{followers:l,placeholder:a,isFetching:s}),a===R[4].activeName&&p.default.createElement(S.default,{followings:i,placeholder:a,isFetching:s})))}}]),t}(p.default.Component));B.propTypes={activeName:p.default.PropTypes.string.isRequired},t.default=B}).call(t,a(496)(e))},773:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=a(300),o=r(n),l=a(731),i=r(l),s=a(742),c=r(s),u=a(759),f=r(u),d=c.default.List,p=c.default.Item,m=function(e){var t=e.user,a=e.reps,r=e.isFetching;return r?o.default.createElement(f.default,null):o.default.createElement("div",{className:"overview"},o.default.createElement("div",{className:"user-item"},o.default.createElement("div",{className:"user-img"},o.default.createElement("img",{src:t.get("avatar_url")})),o.default.createElement("div",{className:"user-info"},o.default.createElement("h1",{className:"login"},t.get("login")),o.default.createElement("h3",{className:"name"},t.get("name")),o.default.createElement("ul",{className:"info"},t.get("company")&&o.default.createElement("li",null,t.get("company")),t.get("location")&&o.default.createElement("li",null,t.get("location")),t.get("email")&&o.default.createElement("li",null,t.get("email")),t.get("blog")&&o.default.createElement("li",null,t.get("blog")),t.get("bio")&&o.default.createElement("li",null,t.get("bio")),t.get("hireable")&&o.default.createElement("li",null,t.get("hireable"))))),o.default.createElement("div",{className:"reps-wrap"},o.default.createElement("h2",{className:"reps-title"},"Popular repositories"),o.default.createElement(d,{className:"user-reps"},a.map(function(e,t){return t<=5&&o.default.createElement(p,{key:e.get("id")},o.default.createElement("div",{className:"item-inner"},o.default.createElement("div",{className:"item-title full-name"},e.get("full_name")),o.default.createElement("div",{className:"item-after star-count"},e.get("stargazers_count"),o.default.createElement("span",null,"★"))))}))))};m.propTypes={user:o.default.PropTypes.instanceOf(i.default.Map),reps:o.default.PropTypes.instanceOf(i.default.List),isFetching:o.default.PropTypes.bool},t.default=m},774:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=a(300),o=r(n),l=a(731),i=r(l),s=a(742),c=r(s),u=a(775),f=r(u),d=a(776),p=r(d),m=a(759),g=r(m),b=c.default.List,h=c.default.Item,v=function(e){var t=e.reps,a=e.placeholder,r=e.isFetching;return r?o.default.createElement(g.default,null):0!==t.size?o.default.createElement(b,{className:"repositories"},t.map(function(e){return o.default.createElement(h,{key:e.get("id")},o.default.createElement("div",{className:"item-inner"},o.default.createElement("div",{className:"item-title full-name"},e.get("full_name")),o.default.createElement("div",{className:"star-language"},o.default.createElement("div",{className:"star-count"},o.default.createElement("span",null,"★"),e.get("stargazers_count")),o.default.createElement(p.default,{language:e.get("language")}))))})):o.default.createElement(f.default,{text:a})};v.propTypes={reps:o.default.PropTypes.instanceOf(i.default.List),placeholder:o.default.PropTypes.string,isFetching:o.default.PropTypes.bool},t.default=v},775:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=a(300),o=r(n);a(757);var l=function(e){var t=e.text;return o.default.createElement("div",{className:"user-placeholder"},o.default.createElement("div",{className:"wrap"},o.default.createElement("p",null,"You don't have any ",t," yet.")))};t.default=l},776:function(e,t,a){(function(e){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function l(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function i(e){return function(t){return w(E(t,e),e)}}Object.defineProperty(t,"__esModule",{value:!0});var s=a(579),c=r(s),u=a(584),f=r(u),d=a(300),p=r(d),m=a(585),g=r(m),b=function(){function e(e,t){for(var a=0;a<t.length;a++){var r=t[a];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,a,r){return a&&e(t.prototype,a),r&&e(t,r),t}}(),h=a(777),v=r(h);a(779);var y={LanguageColor:{displayName:"LanguageColor"}},w=(0,g.default)({filename:"/home/travis/build/goumang2010/react-redux-github/src/components/LanguageColor/index.jsx",components:y,locals:[e],imports:[p.default]}),E=(0,f.default)({filename:"/home/travis/build/goumang2010/react-redux-github/src/components/LanguageColor/index.jsx",components:y,locals:[],imports:[p.default,c.default]}),_=i("LanguageColor")(function(e){function t(e){n(this,t);var a=o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return a.state={color:""},a}return l(t,e),b(t,[{key:"componentDidMount",value:function(){var e=this;v.default.map(function(t,a){a===e.props.language&&e.setState({color:t})})}},{key:"render",value:function(){var e=this.props.language,t=this.state.color;return p.default.createElement("div",{className:"language-color"},p.default.createElement("div",{className:"color",style:{backgroundColor:t}}),p.default.createElement("div",{className:"language"},e))}}]),t}(p.default.Component));_.propTypes={language:p.default.PropTypes.string},t.default=_}).call(t,a(496)(e))},777:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=a(778),o=r(n),l={Mercury:"#ff2b2b",TypeScript:"#2b7489",PureBasic:"#5a6986","Objective-C++":"#6866fb",Self:"#0579aa",edn:"#db5855",NewLisp:"#87AED7","Jupyter Notebook":"#DA5B0B",Rebol:"#358a5b",Frege:"#00cafe",Dart:"#00B4AB",AspectJ:"#a957b0",Shell:"#89e051","Web Ontology Language":"#9cc9dd",xBase:"#403a40",Eiffel:"#946d57",Nix:"#7e7eff",RAML:"#77d9fb",MTML:"#b7e1f4",Racket:"#22228f",Elixir:"#6e4a7e",SAS:"#B34936",Agda:"#315665",wisp:"#7582D1",D:"#ba595e",Kotlin:"#F18E33",Opal:"#f7ede0",Crystal:"#776791","Objective-C":"#438eff","ColdFusion CFC":"#ed2cd6",Oz:"#fab738",Mirah:"#c7a938","Objective-J":"#ff0c5a",Gosu:"#82937f",FreeMarker:"#0050b2",Ruby:"#701516","Component Pascal":"#b0ce4e",Arc:"#aa2afe",Brainfuck:"#2F2530",Nit:"#009917",APL:"#5A8164",Go:"#375eab","Visual Basic":"#945db7",PHP:"#4F5D95",Cirru:"#ccccff",SQF:"#3F3F3F",Glyph:"#e4cc98",Java:"#b07219",MAXScript:"#00a6a6",Scala:"#DC322F",Makefile:"#427819",ColdFusion:"#ed2cd6",Perl:"#0298c3",Lua:"#000080",Vue:"#2c3e50",Verilog:"#b2b7f8",Factor:"#636746",Haxe:"#df7900","Pure Data":"#91de79",Forth:"#341708",Red:"#ee0000",Hy:"#7790B2",Volt:"#1F1F1F",LSL:"#3d9970",eC:"#913960",CoffeeScript:"#244776",HTML:"#e44b23",Lex:"#DBCA00","API Blueprint":"#2ACCA8",Swift:"#ffac45",C:"#555555",AutoHotkey:"#6594b9",Isabelle:"#FEFE00",Metal:"#8f14e9",Clarion:"#db901e",JSONiq:"#40d47e",Boo:"#d4bec1",AutoIt:"#1C3552",Clojure:"#db5855",Rust:"#dea584",Prolog:"#74283c",SourcePawn:"#5c7611",AMPL:"#E6EFBB",FORTRAN:"#4d41b1",ANTLR:"#9DC3FF",Harbour:"#0e60e3",Tcl:"#e4cc98",BlitzMax:"#cd6400",PigLatin:"#fcd7de",Lasso:"#999999",ECL:"#8a1267",VHDL:"#adb2cb",Elm:"#60B5CC","Propeller Spin":"#7fa2a7",X10:"#4B6BEF",IDL:"#a3522f",ATS:"#1ac620",Ada:"#02f88c","Unity3D Asset":"#ab69a1",Nu:"#c9df40",LFE:"#004200",SuperCollider:"#46390b",Oxygene:"#cdd0e3",ASP:"#6a40fd",Assembly:"#6E4C13",Gnuplot:"#f0a9f0",JFlex:"#DBCA00",NetLinx:"#0aa0ff",Turing:"#45f715",Vala:"#fbe5cd",Processing:"#0096D8",Arduino:"#bd79d1",FLUX:"#88ccff",NetLogo:"#ff6375","C Sharp":"#178600",CSS:"#563d7c","Emacs Lisp":"#c065db",Stan:"#b2011d",SaltStack:"#646464",QML:"#44a51c",Pike:"#005390",LOLCODE:"#cc9900",ooc:"#b0b77e",Handlebars:"#01a9d6",J:"#9EEDFF",Mask:"#f97732",EmberScript:"#FFF4F3",TeX:"#3D6117",Nemerle:"#3d3c6e",KRL:"#28431f","Ren'Py":"#ff7f7f","Unified Parallel C":"#4e3617",Golo:"#88562A",Fancy:"#7b9db4",OCaml:"#3be133",Shen:"#120F14",Pascal:"#b0ce4e","F#":"#b845fc",Puppet:"#302B6D",ActionScript:"#882B0F",Diff:"#88dddd","Ragel in Ruby Host":"#9d5200",Fantom:"#dbded5",Zephir:"#118f9e",Click:"#E4E6F3",Smalltalk:"#596706",DM:"#447265",Ioke:"#078193",PogoScript:"#d80074",LiveScript:"#499886",JavaScript:"#f1e05a",VimL:"#199f4b",PureScript:"#1D222D",ABAP:"#E8274B",Matlab:"#bb92ac",Slash:"#007eff",R:"#198ce7",Erlang:"#B83998",Pan:"#cc0000",LookML:"#652B81",Eagle:"#814C05",Scheme:"#1e4aec",PLSQL:"#dad8d8",Python:"#3572A5",Max:"#c4a79c","Common Lisp":"#3fb68b",Latte:"#A8FF97",XQuery:"#5232e7",Omgrofl:"#cabbff",XC:"#99DA07",Nimrod:"#37775b",SystemVerilog:"#DAE1C2",Chapel:"#8dc63f",Groovy:"#e69f56",Dylan:"#6c616e",E:"#ccce35",Parrot:"#f3ca0a","Grammatical Framework":"#79aa7a","Game Maker Language":"#8fb200",Papyrus:"#6600cc","NetLinx+ERB":"#747faa",Clean:"#3F85AF",Alloy:"#64C800",Squirrel:"#800000",PAWN:"#dbb284",UnrealScript:"#a54c4d","Standard ML":"#dc566d",Slim:"#ff8f77",Perl6:"#0000fb",Julia:"#a270ba",Haskell:"#29b544",NCL:"#28431f",Io:"#a9188d",Rouge:"#cc0088",cpp:"#f34b7d","AGS Script":"#B9D9FF",Dogescript:"#cca760",nesC:"#94B0C7","C#":"#178600"};l=(0,o.default)(l),t.default=l},779:function(e,t,a){var r=a(780);"string"==typeof r&&(r=[[e.id,r,""]]);var n=a(470)(r,{});r.locals&&(e.exports=r.locals),r.locals||e.hot.accept(780,function(){var t=a(780);"string"==typeof t&&(t=[[e.id,t,""]]),n(t)}),e.hot.dispose(function(){n()})},780:function(e,t,a){t=e.exports=a(468)(),t.push([e.id,".language-color{position:relative}.language-color .color{position:absolute;width:.16rem;height:.16rem;border-radius:50%;left:.24rem;top:.04rem}.language-color .language{padding-left:.466667rem;font-size:.16rem;line-height:.253333rem}",""])},781:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=a(300),o=r(n),l=a(731),i=r(l),s=a(742),c=r(s),u=a(775),f=r(u),d=a(776),p=r(d),m=a(759),g=r(m),b=c.default.List,h=c.default.Item,v=function(e){var t=e.stars,a=e.placeholder,r=e.isFetching;return r?o.default.createElement(g.default,null):0!==t.size?o.default.createElement(b,{className:"stars"},t.map(function(e){return o.default.createElement(h,{key:e.get("id")},o.default.createElement("div",{className:"item-inner"},o.default.createElement("div",{className:"item-title full-name"},e.get("full_name")),o.default.createElement("div",{className:"des"},e.get("description")),o.default.createElement("div",{className:"star-language"},o.default.createElement("div",{className:"star-count"},o.default.createElement("span",null,"★"),e.get("stargazers_count")),o.default.createElement(p.default,{language:e.get("language")}))))})):o.default.createElement(f.default,{text:a})};v.propTypes={stars:o.default.PropTypes.instanceOf(i.default.List),placeholder:o.default.PropTypes.string,isFetching:o.default.PropTypes.bool},t.default=v},782:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=a(300),o=r(n),l=a(731),i=r(l),s=a(742),c=r(s),u=a(775),f=r(u),d=a(759),p=r(d),m=c.default.List,g=c.default.Item,b=function(e){var t=e.followers,a=e.placeholder,r=e.isFetching;return r?o.default.createElement(p.default,null):0!==t.size?o.default.createElement(m,{className:"followers"},t.map(function(e){return o.default.createElement(g,{key:e.get("id")},o.default.createElement("div",{className:"item-media"},o.default.createElement("img",{src:e.get("avatar_url")})),o.default.createElement("div",{className:"item-inner"},o.default.createElement("div",{className:"item-title"},e.get("name"),o.default.createElement("span",null,e.get("login"))),o.default.createElement("div",{className:"location"},e.get("location"))))})):o.default.createElement(f.default,{text:a})};b.propTypes={followers:o.default.PropTypes.instanceOf(i.default.List),placeholder:o.default.PropTypes.string,isFetching:o.default.PropTypes.bool},t.default=b},783:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=a(300),o=r(n),l=a(731),i=r(l),s=a(742),c=r(s),u=a(775),f=r(u),d=a(759),p=r(d),m=c.default.List,g=c.default.Item,b=function(e){var t=e.followings,a=e.placeholder,r=e.isFetching;return r?o.default.createElement(p.default,null):0!==t.size?o.default.createElement(m,{className:"followings"},t.map(function(e){return o.default.createElement(g,{key:e.get("id")},o.default.createElement("div",{className:"item-media"},o.default.createElement("img",{src:e.get("avatar_url")})),o.default.createElement("div",{className:"item-inner"},o.default.createElement("div",{className:"item-title"},e.get("name"),o.default.createElement("span",null,e.get("login"))),o.default.createElement("div",{className:"location"},e.get("location"))))})):o.default.createElement(f.default,{text:a})};b.propTypes={followings:o.default.PropTypes.instanceOf(i.default.List),placeholder:o.default.PropTypes.string,isFetching:o.default.PropTypes.bool},t.default=b},784:function(e,t,a){var r=a(785);"string"==typeof r&&(r=[[e.id,r,""]]);var n=a(470)(r,{});r.locals&&(e.exports=r.locals),r.locals||e.hot.accept(785,function(){var t=a(785);"string"==typeof t&&(t=[[e.id,t,""]]),n(t)}),e.hot.dispose(function(){n()})},785:function(e,t,a){t=e.exports=a(468)(),t.push([e.id,"body{background-color:#fff}.button-red{color:#fff;background-color:#f44336!important}.button-orange{color:#fff;background-color:#ff9800!important}.button-green{color:#fff;background-color:#4caf50!important}.button-blue{color:#fff;background-color:#2196f3!important}.button{border-radius:0}.entry-wrap,.entry-wrap>div,.entry-wrap>div>div{height:100%}.list-block .item-inner:after{display:none}.user .active-state{background-color:#bfe5f3}.user .navbar-inner{background-color:#f5f5f5}.user .navbar:after{display:none}.user .tabs-wrap{position:relative;z-index:2;height:.533333rem;margin-top:-.013333rem;overflow-y:hidden;overflow-x:auto;background-color:#f5f5f5;border-bottom:.013333rem solid #d5d5d5;width:100%}.user .tabs-wrap::-webkit-scrollbar{width:0}.user .tabs-wrap .tabs{overflow-y:hidden;overflow-x:scroll;text-align:center;white-space:nowrap;width:6rem;background-color:#f5f5f5;padding-bottom:.266667rem;margin-top:-.08rem}.user .tab.selected{font-weight:600;color:#c9510c}.user .user-item{background-color:#fafafa;display:-webkit-box;display:-ms-flexbox;display:flex;position:relative;padding:.2rem .2rem .133333rem;overflow:visible;line-height:1.5;border-bottom:.013333rem solid #ccc}.user .user-item img{width:1.466667rem;height:1.466667rem;border-radius:.04rem}.user .user-item .user-info{padding-left:.2rem}.user .user-item .user-info .login{margin:0;font-size:.213333rem;color:#333}.user .user-item .user-info .name{margin:0;font-size:.16rem;font-weight:400;color:#767676}.user .user-item .user-info .info{list-style:none;padding:0;margin:.1rem 0 0}.user .user-item .user-info .info li{border:none;margin-bottom:0;font-size:.16rem;line-height:1.8}.user .reps-wrap{padding:.16rem .16rem 0}.user .reps-wrap .reps-title{font-size:.213333rem;font-weight:400}.user .reps-wrap .user-reps{border:.013333rem solid #ccc}.user .star-count{margin-bottom:.066667rem;margin-left:.066667rem;font-size:.146667rem;color:#999}.user .full-name{margin-bottom:.04rem;font-weight:500;line-height:1.2;color:#4078c0;word-wrap:break-word;max-width:80%;white-space:normal;font-size:.186667rem}.user .repositories .item-inner,.user .stars .item-inner{display:block}.user .stars .des{font-size:.16rem;color:#767676}.user .star-language{margin-bottom:.066667rem;display:-webkit-box;display:-ms-flexbox;display:flex;font-size:.186667rem}.user .star-language .star-count{font-size:.186667rem;margin:0;color:#767676}.user .star-language .full-name{max-width:100%}.user .followers .item-media,.user .followings .item-media{position:absolute;left:.2rem}.user .followers .item-inner,.user .followings .item-inner{display:block;margin-left:.6rem;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start}.user .followers .item-inner .item-title,.user .followings .item-inner .item-title{font-size:.186667rem;color:#4078c0}.user .followers .item-inner span,.user .followings .item-inner span{font-size:.186667rem;padding-left:.066667rem;color:#333}.user .followers .item-inner .location,.user .followings .item-inner .location{font-size:.16rem;color:#767676}.user .followers img,.user .followings img{width:.4rem;height:.4rem}",""])}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3RhdGljL2pzL3VzZXIuY2M3N2MuY2h1bmsuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvSGVhZGVyL2luZGV4LmpzeD8wZTQzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0ljb24vaW5kZXguanN4PzlmZGEiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvSWNvbi9zdHlsZS5sZXNzPzliMzUqIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0ljb24vc3R5bGUubGVzcz9jNjYyIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0hlYWRlci9zdHlsZS5sZXNzPzBkNmMqIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0hlYWRlci9zdHlsZS5sZXNzP2JmYzciLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQ29udGVudC9pbmRleC5qc3g/NmVhZSIsIndlYnBhY2s6Ly8vLi9+L2NsYXNzbmFtZXMvaW5kZXguanM/OGU0MyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Db250ZW50L3N0eWxlLmxlc3M/N2RiMCoiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQ29udGVudC9zdHlsZS5sZXNzPzkyMWYiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTGlzdEJsb2NrL2luZGV4LmpzPzA4MWEiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTGlzdEJsb2NrL0xpc3QuanN4PzllMjMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTGlzdEJsb2NrL0l0ZW0uanN4PzNhZDMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTGlzdEJsb2NrL3N0eWxlLmxlc3M/M2FkYioiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTGlzdEJsb2NrL3N0eWxlLmxlc3M/ZTQwMyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2NsZWFyVG9vbGJhci5qcz83Nzg0Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1RhYi9pbmRleC5qc3g/MDY5OCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9UYWIvc3R5bGUubGVzcz8xOGFhKiIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9UYWIvc3R5bGUubGVzcz9lM2Y1Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1BsYWNlaG9sZGVyL3N0eWxlLmxlc3M/YjkwNyoiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvUGxhY2Vob2xkZXIvc3R5bGUubGVzcz85NDE4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0xvYWRpbmcvaW5kZXguanN4PzBmMmYiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTG9hZGluZy9zdHlsZS5sZXNzPzYyODkqIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0xvYWRpbmcvc3R5bGUubGVzcz8zNmIzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL1VzZXIvY29udGFpbmVycy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9Vc2VyL2NvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvVXNlci9jb21wb25lbnRzL092ZXJWaWV3LmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9Vc2VyL2NvbXBvbmVudHMvUmVwb3NpdG9yaWVzLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9QbGFjZWhvbGRlci9Vc2VyUGxhY2Vob2xkZXIuanN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0xhbmd1YWdlQ29sb3IvaW5kZXguanN4Iiwid2VicGFjazovLy8uL3NyYy9jb21tb24vbGFuZ3VhZ2VDb2xvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9MYW5ndWFnZUNvbG9yL3N0eWxlLmxlc3M/NDkzMyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9MYW5ndWFnZUNvbG9yL3N0eWxlLmxlc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvVXNlci9jb21wb25lbnRzL1N0YXJzLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9Vc2VyL2NvbXBvbmVudHMvRm9sbG93ZXJzLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9Vc2VyL2NvbXBvbmVudHMvRm9sbG93aW5ncy5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvVXNlci9zdHlsZS5sZXNzP2JmMjgiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvVXNlci9zdHlsZS5sZXNzIl0sIm5hbWVzIjpbIndlYnBhY2tKc29ucCIsIjczMiIsIm1vZHVsZSIsImV4cG9ydHMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwic2VsZiIsImNhbGwiLCJSZWZlcmVuY2VFcnJvciIsIl9pbmhlcml0cyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIl93cmFwQ29tcG9uZW50IiwiaWQiLCJDb21wb25lbnQiLCJfaG9tZVRyYXZpc0J1aWxkR291bWFuZzIwMTBSZWFjdFJlZHV4R2l0aHViTm9kZV9tb2R1bGVzUmVhY3RUcmFuc2Zvcm1IbXJMaWJJbmRleEpzMiIsIl9ob21lVHJhdmlzQnVpbGRHb3VtYW5nMjAxMFJlYWN0UmVkdXhHaXRodWJOb2RlX21vZHVsZXNSZWFjdFRyYW5zZm9ybUNhdGNoRXJyb3JzTGliSW5kZXhKczIiLCJkZWZpbmVQcm9wZXJ0eSIsIl9pbmRleCIsIl9pbmRleDIiLCJfaW5kZXgzIiwiX2luZGV4NCIsIl9yZWFjdDIiLCJfcmVhY3QzIiwiX2luZGV4NSIsIl9pbmRleDYiLCJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJpIiwibGVuZ3RoIiwiZGVzY3JpcHRvciIsImtleSIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9yZWFjdFJvdXRlclJlZHV4IiwiX0ljb24iLCJfSWNvbjIiLCJfY29tcG9uZW50cyIsIkhlYWRlciIsImRpc3BsYXlOYW1lIiwiZmlsZW5hbWUiLCJjb21wb25lbnRzIiwibG9jYWxzIiwiaW1wb3J0cyIsIl9SZWFjdCRDb21wb25lbnQiLCJ0aGlzIiwiZ2V0UHJvdG90eXBlT2YiLCJldmVudCIsImhpc3RvcnkiLCJkaXNwYXRjaCIsImdvIiwidXJsIiwicHVzaCIsIl90aGlzMiIsIl9wcm9wcyIsImxlZnQiLCJjZW50ZXIiLCJyaWdodCIsImljb25TaXplIiwid2lkdGgiLCJoZWlnaHQiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwib25DbGljayIsImljb24iLCJuYW1lIiwic3R5bGUiLCJzaXplIiwidGV4dCIsImdvdG8iLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJvYmplY3QiLCJpc1JlcXVpcmVkIiwiNzMzIiwiX3JlYWN0IiwiSWNvbiIsInNyYyIsImFsdCIsImNoaWxkcmVuIiwiYW55IiwiNzM0IiwiY29udGVudCIsInVwZGF0ZSIsImhvdCIsImFjY2VwdCIsIm5ld0NvbnRlbnQiLCJkaXNwb3NlIiwiNzM1IiwiNzM2IiwiNzM3IiwiNzM4IiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJhcmd1bWVudHMiLCJzb3VyY2UiLCJoYXNPd25Qcm9wZXJ0eSIsIl9jbGFzc25hbWVzIiwiX2NsYXNzbmFtZXMyIiwiQ29udGVudCIsIjczOSIsIl9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18iLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyIsImNsYXNzTmFtZXMiLCJjbGFzc2VzIiwiYXJnIiwiYXJnVHlwZSIsIkFycmF5IiwiaXNBcnJheSIsImFwcGx5IiwiaGFzT3duIiwiam9pbiIsInVuZGVmaW5lZCIsIjc0MCIsIjc0MSIsIjc0MiIsIl9MaXN0IiwiX0xpc3QyIiwiX0l0ZW0iLCJfSXRlbTIiLCJMaXN0QmxvY2siLCJMaXN0IiwiSXRlbSIsIjc0MyIsIl9yZWYiLCJjbiIsIjc0NCIsIm1lZGlhIiwiNzQ1IiwiNzQ2IiwiNzQ3IiwiX2YiLCJfZjIiLCIkIiwiJHBhZ2VzIiwicmVtb3ZlQ2xhc3MiLCI3NDgiLCJUYWIiLCJfdGhpcyIsInN0YXRlIiwiYWN0aXZlTmFtZSIsInNldFN0YXRlIiwib25DaGFuZ2UiLCJ0YWJzIiwiaXNGZXRjaGluZyIsIm1hcCIsInRhYiIsInNlbGVjdGVkIiwiY2hhbmdlQWN0aXZlTmFtZSIsImRpc2FibGVkIiwidGl0bGUiLCJwb3JwVHlwZXMiLCJzdHJpbmciLCJib29sIiwiZGVmYXVsdFByb3BzIiwiNzQ5IiwiNzUwIiwiNzU3IiwiNzU4IiwiNzU5IiwiTG9hZGluZyIsIjc2MCIsIjc2MSIsIjc3MSIsIl9yZWFjdFJlZHV4IiwiX2NvbXBvbmVudCIsIl9jb21wb25lbnQyIiwiX3NlbGVjdG9ycyIsImNvbm5lY3QiLCJtYXBTdGF0ZVRvUHJvcHMiLCJtYXBEaXNwYXRjaFRvUHJvcHMiLCI3NzIiLCJfSGVhZGVyIiwiX0hlYWRlcjIiLCJfQ29udGVudCIsIl9Db250ZW50MiIsIl9jbGVhclRvb2xiYXIiLCJfY2xlYXJUb29sYmFyMiIsIl9UYWIiLCJfVGFiMiIsIl9PdmVyVmlldyIsIl9PdmVyVmlldzIiLCJfUmVwb3NpdG9yaWVzIiwiX1JlcG9zaXRvcmllczIiLCJfU3RhcnMiLCJfU3RhcnMyIiwiX0ZvbGxvd2VycyIsIl9Gb2xsb3dlcnMyIiwiX0ZvbGxvd2luZ3MiLCJfRm9sbG93aW5nczIiLCJVc2VyIiwiZ2V0VXNlciIsInBhcmFtcyIsImdldFVzZXJSZXAiLCJnZXRVc2VyU3RhcnMiLCJnZXRVc2VyRm9sbG93ZXJzIiwiZ2V0VXNlckZvbGxvd2luZ3MiLCJ1c2VyIiwicmVwcyIsInN0YXJzIiwiZm9sbG93ZXJzIiwiZm9sbG93aW5ncyIsIl9hY3RpdmVOYW1lIiwiY2hhbmdlVGFiSGFuZGxlciIsInBsYWNlaG9sZGVyIiwiNzczIiwiX2ltbXV0YWJsZSIsIl9pbW11dGFibGUyIiwiX0xpc3RCbG9jayIsIl9MaXN0QmxvY2syIiwiX0xvYWRpbmciLCJfTG9hZGluZzIiLCJPdmVyVmlldyIsImdldCIsInJlcCIsImlkeCIsImluc3RhbmNlT2YiLCJNYXAiLCI3NzQiLCJfVXNlclBsYWNlaG9sZGVyIiwiX1VzZXJQbGFjZWhvbGRlcjIiLCJfTGFuZ3VhZ2VDb2xvciIsIl9MYW5ndWFnZUNvbG9yMiIsIlJlcG9zaXRvcmllcyIsImxhbmd1YWdlIiwiNzc1IiwiVXNlclBsYWNlaG9sZGVyIiwiNzc2IiwiX2xhbmd1YWdlQ29sb3IiLCJfbGFuZ3VhZ2VDb2xvcjIiLCJMYW5ndWFnZUNvbG9yIiwiY29sb3IiLCJsYW4iLCJiYWNrZ3JvdW5kQ29sb3IiLCI3NzciLCJfdG9JbW11dGFibGUiLCJfdG9JbW11dGFibGUyIiwibGFuZ3VhZ2VDb2xvciIsIk1lcmN1cnkiLCJUeXBlU2NyaXB0IiwiUHVyZUJhc2ljIiwiT2JqZWN0aXZlLUMrKyIsIlNlbGYiLCJlZG4iLCJOZXdMaXNwIiwiSnVweXRlciBOb3RlYm9vayIsIlJlYm9sIiwiRnJlZ2UiLCJEYXJ0IiwiQXNwZWN0SiIsIlNoZWxsIiwiV2ViIE9udG9sb2d5IExhbmd1YWdlIiwieEJhc2UiLCJFaWZmZWwiLCJOaXgiLCJSQU1MIiwiTVRNTCIsIlJhY2tldCIsIkVsaXhpciIsIlNBUyIsIkFnZGEiLCJ3aXNwIiwiRCIsIktvdGxpbiIsIk9wYWwiLCJDcnlzdGFsIiwiT2JqZWN0aXZlLUMiLCJDb2xkRnVzaW9uIENGQyIsIk96IiwiTWlyYWgiLCJPYmplY3RpdmUtSiIsIkdvc3UiLCJGcmVlTWFya2VyIiwiUnVieSIsIkNvbXBvbmVudCBQYXNjYWwiLCJBcmMiLCJCcmFpbmZ1Y2siLCJOaXQiLCJBUEwiLCJHbyIsIlZpc3VhbCBCYXNpYyIsIlBIUCIsIkNpcnJ1IiwiU1FGIiwiR2x5cGgiLCJKYXZhIiwiTUFYU2NyaXB0IiwiU2NhbGEiLCJNYWtlZmlsZSIsIkNvbGRGdXNpb24iLCJQZXJsIiwiTHVhIiwiVnVlIiwiVmVyaWxvZyIsIkZhY3RvciIsIkhheGUiLCJQdXJlIERhdGEiLCJGb3J0aCIsIlJlZCIsIkh5IiwiVm9sdCIsIkxTTCIsImVDIiwiQ29mZmVlU2NyaXB0IiwiSFRNTCIsIkxleCIsIkFQSSBCbHVlcHJpbnQiLCJTd2lmdCIsIkMiLCJBdXRvSG90a2V5IiwiSXNhYmVsbGUiLCJNZXRhbCIsIkNsYXJpb24iLCJKU09OaXEiLCJCb28iLCJBdXRvSXQiLCJDbG9qdXJlIiwiUnVzdCIsIlByb2xvZyIsIlNvdXJjZVBhd24iLCJBTVBMIiwiRk9SVFJBTiIsIkFOVExSIiwiSGFyYm91ciIsIlRjbCIsIkJsaXR6TWF4IiwiUGlnTGF0aW4iLCJMYXNzbyIsIkVDTCIsIlZIREwiLCJFbG0iLCJQcm9wZWxsZXIgU3BpbiIsIlgxMCIsIklETCIsIkFUUyIsIkFkYSIsIlVuaXR5M0QgQXNzZXQiLCJOdSIsIkxGRSIsIlN1cGVyQ29sbGlkZXIiLCJPeHlnZW5lIiwiQVNQIiwiQXNzZW1ibHkiLCJHbnVwbG90IiwiSkZsZXgiLCJOZXRMaW54IiwiVHVyaW5nIiwiVmFsYSIsIlByb2Nlc3NpbmciLCJBcmR1aW5vIiwiRkxVWCIsIk5ldExvZ28iLCJDIFNoYXJwIiwiQ1NTIiwiRW1hY3MgTGlzcCIsIlN0YW4iLCJTYWx0U3RhY2siLCJRTUwiLCJQaWtlIiwiTE9MQ09ERSIsIm9vYyIsIkhhbmRsZWJhcnMiLCJKIiwiTWFzayIsIkVtYmVyU2NyaXB0IiwiVGVYIiwiTmVtZXJsZSIsIktSTCIsIlJlbidQeSIsIlVuaWZpZWQgUGFyYWxsZWwgQyIsIkdvbG8iLCJGYW5jeSIsIk9DYW1sIiwiU2hlbiIsIlBhc2NhbCIsIkYjIiwiUHVwcGV0IiwiQWN0aW9uU2NyaXB0IiwiRGlmZiIsIlJhZ2VsIGluIFJ1YnkgSG9zdCIsIkZhbnRvbSIsIlplcGhpciIsIkNsaWNrIiwiU21hbGx0YWxrIiwiRE0iLCJJb2tlIiwiUG9nb1NjcmlwdCIsIkxpdmVTY3JpcHQiLCJKYXZhU2NyaXB0IiwiVmltTCIsIlB1cmVTY3JpcHQiLCJBQkFQIiwiTWF0bGFiIiwiU2xhc2giLCJSIiwiRXJsYW5nIiwiUGFuIiwiTG9va01MIiwiRWFnbGUiLCJTY2hlbWUiLCJQTFNRTCIsIlB5dGhvbiIsIk1heCIsIkNvbW1vbiBMaXNwIiwiTGF0dGUiLCJYUXVlcnkiLCJPbWdyb2ZsIiwiWEMiLCJOaW1yb2QiLCJTeXN0ZW1WZXJpbG9nIiwiQ2hhcGVsIiwiR3Jvb3Z5IiwiRHlsYW4iLCJFIiwiUGFycm90IiwiR3JhbW1hdGljYWwgRnJhbWV3b3JrIiwiR2FtZSBNYWtlciBMYW5ndWFnZSIsIlBhcHlydXMiLCJOZXRMaW54K0VSQiIsIkNsZWFuIiwiQWxsb3kiLCJTcXVpcnJlbCIsIlBBV04iLCJVbnJlYWxTY3JpcHQiLCJTdGFuZGFyZCBNTCIsIlNsaW0iLCJQZXJsNiIsIkp1bGlhIiwiSGFza2VsbCIsIk5DTCIsIklvIiwiUm91Z2UiLCJjcHAiLCJBR1MgU2NyaXB0IiwiRG9nZXNjcmlwdCIsIm5lc0MiLCJDIyIsIjc3OSIsIjc4MCIsIjc4MSIsIlN0YXJzIiwic3RhciIsIjc4MiIsIkZvbGxvd2VycyIsImZvbCIsIjc4MyIsIkZvbGxvd2luZ3MiLCI3ODQiLCI3ODUiXSwibWFwcGluZ3MiOiJBQUFBQSxjQUFjLElBRVJDLElBQ0EsU0FBU0MsRUFBUUMsRUFBU0MsSUFFSCxTQUFTRixHQUFTLFlBZ0M5QyxTQUFTRyxHQUF1QkMsR0FBTyxNQUFPQSxJQUFPQSxFQUFJQyxXQUFhRCxHQUFRRSxRQUFTRixHQUV2RixRQUFTRyxHQUFnQkMsRUFBVUMsR0FBZSxLQUFNRCxZQUFvQkMsSUFBZ0IsS0FBTSxJQUFJQyxXQUFVLHFDQUVoSCxRQUFTQyxHQUEyQkMsRUFBTUMsR0FBUSxJQUFLRCxFQUFRLEtBQU0sSUFB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Y2h1bmsuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ3ZWJwYWNrSnNvbnAoWzJdLHtcblxuLyoqKi8gNzMyOlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKG1vZHVsZSkgeyd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX2luZGV4ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1NzkpO1xuXHRcblx0dmFyIF9pbmRleDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmRleCk7XG5cdFxuXHR2YXIgX2luZGV4MyA9IF9fd2VicGFja19yZXF1aXJlX18oNTg0KTtcblx0XG5cdHZhciBfaW5kZXg0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5kZXgzKTtcblx0XG5cdHZhciBfcmVhY3QyID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMDApO1xuXHRcblx0dmFyIF9yZWFjdDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdDIpO1xuXHRcblx0dmFyIF9pbmRleDUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU4NSk7XG5cdFxuXHR2YXIgX2luZGV4NiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luZGV4NSk7XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXHRcblx0dmFyIF9yZWFjdFJvdXRlclJlZHV4ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1NzApO1xuXHRcblx0dmFyIF9JY29uID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MzMpO1xuXHRcblx0dmFyIF9JY29uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0ljb24pO1xuXHRcblx0X193ZWJwYWNrX3JlcXVpcmVfXyg3MzYpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cdFxuXHRmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblx0XG5cdGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXHRcblx0dmFyIF9jb21wb25lbnRzID0ge1xuXHQgICAgSGVhZGVyOiB7XG5cdCAgICAgICAgZGlzcGxheU5hbWU6ICdIZWFkZXInXG5cdCAgICB9XG5cdH07XG5cdFxuXHR2YXIgX2hvbWVUcmF2aXNCdWlsZEdvdW1hbmcyMDEwUmVhY3RSZWR1eEdpdGh1Yk5vZGVfbW9kdWxlc1JlYWN0VHJhbnNmb3JtSG1yTGliSW5kZXhKczIgPSAoMCwgX2luZGV4Ni5kZWZhdWx0KSh7XG5cdCAgICBmaWxlbmFtZTogJy9ob21lL3RyYXZpcy9idWlsZC9nb3VtYW5nMjAxMC9yZWFjdC1yZWR1eC1naXRodWIvc3JjL2NvbXBvbmVudHMvSGVhZGVyL2luZGV4LmpzeCcsXG5cdCAgICBjb21wb25lbnRzOiBfY29tcG9uZW50cyxcblx0ICAgIGxvY2FsczogW21vZHVsZV0sXG5cdCAgICBpbXBvcnRzOiBbX3JlYWN0My5kZWZhdWx0XVxuXHR9KTtcblx0XG5cdHZhciBfaG9tZVRyYXZpc0J1aWxkR291bWFuZzIwMTBSZWFjdFJlZHV4R2l0aHViTm9kZV9tb2R1bGVzUmVhY3RUcmFuc2Zvcm1DYXRjaEVycm9yc0xpYkluZGV4SnMyID0gKDAsIF9pbmRleDQuZGVmYXVsdCkoe1xuXHQgICAgZmlsZW5hbWU6ICcvaG9tZS90cmF2aXMvYnVpbGQvZ291bWFuZzIwMTAvcmVhY3QtcmVkdXgtZ2l0aHViL3NyYy9jb21wb25lbnRzL0hlYWRlci9pbmRleC5qc3gnLFxuXHQgICAgY29tcG9uZW50czogX2NvbXBvbmVudHMsXG5cdCAgICBsb2NhbHM6IFtdLFxuXHQgICAgaW1wb3J0czogW19yZWFjdDMuZGVmYXVsdCwgX2luZGV4Mi5kZWZhdWx0XVxuXHR9KTtcblx0XG5cdGZ1bmN0aW9uIF93cmFwQ29tcG9uZW50KGlkKSB7XG5cdCAgICByZXR1cm4gZnVuY3Rpb24gKENvbXBvbmVudCkge1xuXHQgICAgICAgIHJldHVybiBfaG9tZVRyYXZpc0J1aWxkR291bWFuZzIwMTBSZWFjdFJlZHV4R2l0aHViTm9kZV9tb2R1bGVzUmVhY3RUcmFuc2Zvcm1IbXJMaWJJbmRleEpzMihfaG9tZVRyYXZpc0J1aWxkR291bWFuZzIwMTBSZWFjdFJlZHV4R2l0aHViTm9kZV9tb2R1bGVzUmVhY3RUcmFuc2Zvcm1DYXRjaEVycm9yc0xpYkluZGV4SnMyKENvbXBvbmVudCwgaWQpLCBpZCk7XG5cdCAgICB9O1xuXHR9XG5cdFxuXHR2YXIgSGVhZGVyID0gX3dyYXBDb21wb25lbnQoJ0hlYWRlcicpKGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG5cdCAgICBfaW5oZXJpdHMoSGVhZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblx0XG5cdCAgICBmdW5jdGlvbiBIZWFkZXIocHJvcHMpIHtcblx0ICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSGVhZGVyKTtcblx0XG5cdCAgICAgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChIZWFkZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihIZWFkZXIpKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cdCAgICB9XG5cdFxuXHQgICAgX2NyZWF0ZUNsYXNzKEhlYWRlciwgW3tcblx0ICAgICAgICBrZXk6ICdnbycsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdvKGV2ZW50LCBoaXN0b3J5KSB7XG5cdCAgICAgICAgICAgIGlmIChldmVudCA9PT0gJ2JhY2snKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmRpc3BhdGNoKCgwLCBfcmVhY3RSb3V0ZXJSZWR1eC5nbykoLTEpKTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goKDAsIF9yZWFjdFJvdXRlclJlZHV4LmdvKShoaXN0b3J5KSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAnZ290bycsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdvdG8odXJsKSB7XG5cdCAgICAgICAgICAgIGlmICh1cmwpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goKDAsIF9yZWFjdFJvdXRlclJlZHV4LnB1c2gpKHVybCkpO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ3JlbmRlcicsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcblx0ICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cdFxuXHQgICAgICAgICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcblx0ICAgICAgICAgICAgICAgIGxlZnQgPSBfcHJvcHMubGVmdCxcblx0ICAgICAgICAgICAgICAgIGNlbnRlciA9IF9wcm9wcy5jZW50ZXIsXG5cdCAgICAgICAgICAgICAgICByaWdodCA9IF9wcm9wcy5yaWdodDtcblx0XG5cdFxuXHQgICAgICAgICAgICB2YXIgaWNvblNpemUgPSB7XG5cdCAgICAgICAgICAgICAgICB3aWR0aDogMjgsIGhlaWdodDogMjhcblx0ICAgICAgICAgICAgfTtcblx0XG5cdCAgICAgICAgICAgIHJldHVybiBfcmVhY3QzLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgICAgICdkaXYnLFxuXHQgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdoZWFkZXInIH0sXG5cdCAgICAgICAgICAgICAgICBfcmVhY3QzLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgICAgICAgICAnZGl2Jyxcblx0ICAgICAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ25hdmJhcicgfSxcblx0ICAgICAgICAgICAgICAgICAgICBfcmVhY3QzLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnbmF2YmFyLWlubmVyJyB9LFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBfcmVhY3QzLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2xlZnQgbGluaycsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljaygpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5nbyhsZWZ0LmV2ZW50KTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IH0sXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0Lmljb24gPyBfcmVhY3QzLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfSWNvbjIuZGVmYXVsdCwge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGxlZnQuaWNvbixcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogbGVmdC5zaXplID8gbGVmdC5zaXplIDogaWNvblNpemUgfSkgOiBsZWZ0LnRleHRcblx0ICAgICAgICAgICAgICAgICAgICAgICAgKSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgX3JlYWN0My5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGl2Jyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnY2VudGVyJyB9LFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VudGVyLmljb24gJiYgX3JlYWN0My5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0ljb24yLmRlZmF1bHQsIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBjZW50ZXIuaWNvbixcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogY2VudGVyLnNpemUgPyBjZW50ZXIuc2l6ZSA6IGljb25TaXplIH0pLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VudGVyLnRleHQgJiYgX3JlYWN0My5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3NwYW4nLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGwsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VudGVyLnRleHRcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcblx0ICAgICAgICAgICAgICAgICAgICAgICAgKSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgX3JlYWN0My5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGl2Jyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdyaWdodCBsaW5rJyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLmdvdG8ocmlnaHQudXJsKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IH0sXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICByaWdodC5pY29uID8gX3JlYWN0My5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0ljb24yLmRlZmF1bHQsIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiByaWdodC5pY29uLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiByaWdodC5zaXplID8gcmlnaHQuc2l6ZSA6IGljb25TaXplIH0pIDogcmlnaHQudGV4dFxuXHQgICAgICAgICAgICAgICAgICAgICAgICApXG5cdCAgICAgICAgICAgICAgICAgICAgKVxuXHQgICAgICAgICAgICAgICAgKVxuXHQgICAgICAgICAgICApO1xuXHQgICAgICAgIH1cblx0ICAgIH1dKTtcblx0XG5cdCAgICByZXR1cm4gSGVhZGVyO1xuXHR9KF9yZWFjdDMuZGVmYXVsdC5Db21wb25lbnQpKTtcblx0XG5cdEhlYWRlci5wcm9wVHlwZXMgPSB7XG5cdCAgICBsZWZ0OiBfcmVhY3QzLmRlZmF1bHQuUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXHQgICAgY2VudGVyOiBfcmVhY3QzLmRlZmF1bHQuUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXHQgICAgcmlnaHQ6IF9yZWFjdDMuZGVmYXVsdC5Qcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcblx0fTtcblx0XG5cdGV4cG9ydHMuZGVmYXVsdCA9IEhlYWRlcjtcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oNDk2KShtb2R1bGUpKSlcblxuLyoqKi8gfSxcblxuLyoqKi8gNzMzOlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMwMCk7XG5cdFxuXHR2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oNzM0KTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHR2YXIgSWNvbiA9IGZ1bmN0aW9uIEljb24ocHJvcHMpIHtcblx0XG5cdCAgICB2YXIgc3JjID0gJy4uL3NyYy9pbWcvaWNvbi8nICsgcHJvcHMubmFtZSArICcucG5nJztcblx0XG5cdCAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2ltZycsIHtcblx0ICAgICAgICBjbGFzc05hbWU6ICdpbWctaWNvbicsXG5cdCAgICAgICAgc3JjOiBzcmMsXG5cdCAgICAgICAgc3R5bGU6IHByb3BzLnN0eWxlLFxuXHQgICAgICAgIGFsdDogJ2ljb24nIH0pO1xuXHR9O1xuXHRcblx0SWNvbi5wcm9wVHlwZXMgPSB7XG5cdCAgICBjaGlsZHJlbjogX3JlYWN0Mi5kZWZhdWx0LlByb3BUeXBlcy5hbnlcblx0fTtcblx0XG5cdGV4cG9ydHMuZGVmYXVsdCA9IEljb247XG5cbi8qKiovIH0sXG5cbi8qKiovIDczNDpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cdFxuXHQvLyBsb2FkIHRoZSBzdHlsZXNcblx0dmFyIGNvbnRlbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDczNSk7XG5cdGlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXHQvLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG5cdHZhciB1cGRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ3MCkoY29udGVudCwge30pO1xuXHRpZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcblx0Ly8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuXHRpZih0cnVlKSB7XG5cdFx0Ly8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0XHRpZighY29udGVudC5sb2NhbHMpIHtcblx0XHRcdG1vZHVsZS5ob3QuYWNjZXB0KDczNSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBuZXdDb250ZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MzUpO1xuXHRcdFx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblx0XHRcdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0XHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcblx0fVxuXG4vKioqLyB9LFxuXG4vKioqLyA3MzU6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ2OCkoKTtcblx0Ly8gaW1wb3J0c1xuXHRcblx0XG5cdC8vIG1vZHVsZVxuXHRleHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuaW1nLWljb257dmVydGljYWwtYWxpZ246bWlkZGxlO3dpZHRoOi4yMTMzMzNyZW07aGVpZ2h0Oi4yMTMzMzNyZW19XCIsIFwiXCJdKTtcblx0XG5cdC8vIGV4cG9ydHNcblxuXG4vKioqLyB9LFxuXG4vKioqLyA3MzY6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXHRcblx0Ly8gbG9hZCB0aGUgc3R5bGVzXG5cdHZhciBjb250ZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MzcpO1xuXHRpZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblx0Ly8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxuXHR2YXIgdXBkYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NzApKGNvbnRlbnQsIHt9KTtcblx0aWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cdC8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcblx0aWYodHJ1ZSkge1xuXHRcdC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdFx0aWYoIWNvbnRlbnQubG9jYWxzKSB7XG5cdFx0XHRtb2R1bGUuaG90LmFjY2VwdCg3MzcsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgbmV3Q29udGVudCA9IF9fd2VicGFja19yZXF1aXJlX18oNzM3KTtcblx0XHRcdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cdFx0XHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0XHRcdH0pO1xuXHRcdH1cblx0XHQvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdFx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG5cdH1cblxuLyoqKi8gfSxcblxuLyoqKi8gNzM3OlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0ZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NjgpKCk7XG5cdC8vIGltcG9ydHNcblx0XG5cdFxuXHQvLyBtb2R1bGVcblx0ZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiYm9keXtiYWNrZ3JvdW5kLWNvbG9yOiNmZmZ9LmJ1dHRvbi1yZWR7Y29sb3I6I2ZmZjtiYWNrZ3JvdW5kLWNvbG9yOiNmNDQzMzYhaW1wb3J0YW50fS5idXR0b24tb3Jhbmdle2NvbG9yOiNmZmY7YmFja2dyb3VuZC1jb2xvcjojZmY5ODAwIWltcG9ydGFudH0uYnV0dG9uLWdyZWVue2NvbG9yOiNmZmY7YmFja2dyb3VuZC1jb2xvcjojNGNhZjUwIWltcG9ydGFudH0uYnV0dG9uLWJsdWV7Y29sb3I6I2ZmZjtiYWNrZ3JvdW5kLWNvbG9yOiMyMTk2ZjMhaW1wb3J0YW50fS5idXR0b257Ym9yZGVyLXJhZGl1czowfS5lbnRyeS13cmFwLC5lbnRyeS13cmFwPmRpdiwuZW50cnktd3JhcD5kaXY+ZGl2e2hlaWdodDoxMDAlfS5saXN0LWJsb2NrIC5pdGVtLWlubmVyOmFmdGVye2Rpc3BsYXk6bm9uZX0uaGVhZGVyIC5saW5rLmFjdGl2ZS1zdGF0ZXtvcGFjaXR5Oi40O2ZpbHRlcjphbHBoYShvcGFjaXR5PTQwKX1cIiwgXCJcIl0pO1xuXHRcblx0Ly8gZXhwb3J0c1xuXG5cbi8qKiovIH0sXG5cbi8qKiovIDczODpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHRcdHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblx0XG5cdHZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMwMCk7XG5cdFxuXHR2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblx0XG5cdHZhciBfY2xhc3NuYW1lcyA9IF9fd2VicGFja19yZXF1aXJlX18oNzM5KTtcblx0XG5cdHZhciBfY2xhc3NuYW1lczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc25hbWVzKTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oNzQwKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHR2YXIgQ29udGVudCA9IGZ1bmN0aW9uIENvbnRlbnQocHJvcHMpIHtcblx0XHRyZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG5cdFx0XHQnZGl2Jyxcblx0XHRcdF9leHRlbmRzKHt9LCBwcm9wcywgeyBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lczIuZGVmYXVsdCkoJ3BhZ2UtY29udGVudCcsIHByb3BzLmNsYXNzTmFtZSkgfSksXG5cdFx0XHRwcm9wcy5jaGlsZHJlblxuXHRcdCk7XG5cdH07XG5cdFxuXHRDb250ZW50LnByb3BUeXBlcyA9IHtcblx0XHRjaGlsZHJlbjogX3JlYWN0Mi5kZWZhdWx0LlByb3BUeXBlcy5hbnkuaXNSZXF1aXJlZFxuXHR9O1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gQ29udGVudDtcblxuLyoqKi8gfSxcblxuLyoqKi8gNzM5OlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18sIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fOy8qIVxuXHQgIENvcHlyaWdodCAoYykgMjAxNiBKZWQgV2F0c29uLlxuXHQgIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgc2VlXG5cdCAgaHR0cDovL2plZHdhdHNvbi5naXRodWIuaW8vY2xhc3NuYW1lc1xuXHQqL1xuXHQvKiBnbG9iYWwgZGVmaW5lICovXG5cdFxuXHQoZnVuY3Rpb24gKCkge1xuXHRcdCd1c2Ugc3RyaWN0Jztcblx0XG5cdFx0dmFyIGhhc093biA9IHt9Lmhhc093blByb3BlcnR5O1xuXHRcblx0XHRmdW5jdGlvbiBjbGFzc05hbWVzICgpIHtcblx0XHRcdHZhciBjbGFzc2VzID0gW107XG5cdFxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0dmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdFx0aWYgKCFhcmcpIGNvbnRpbnVlO1xuXHRcblx0XHRcdFx0dmFyIGFyZ1R5cGUgPSB0eXBlb2YgYXJnO1xuXHRcblx0XHRcdFx0aWYgKGFyZ1R5cGUgPT09ICdzdHJpbmcnIHx8IGFyZ1R5cGUgPT09ICdudW1iZXInKSB7XG5cdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZyk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhcmcpKSB7XG5cdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGNsYXNzTmFtZXMuYXBwbHkobnVsbCwgYXJnKSk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoYXJnVHlwZSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdFx0XHRmb3IgKHZhciBrZXkgaW4gYXJnKSB7XG5cdFx0XHRcdFx0XHRpZiAoaGFzT3duLmNhbGwoYXJnLCBrZXkpICYmIGFyZ1trZXldKSB7XG5cdFx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChrZXkpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcblx0XHRcdHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTtcblx0XHR9XG5cdFxuXHRcdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdFx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xuXHRcdH0gZWxzZSBpZiAodHJ1ZSkge1xuXHRcdFx0Ly8gcmVnaXN0ZXIgYXMgJ2NsYXNzbmFtZXMnLCBjb25zaXN0ZW50IHdpdGggbnBtIHBhY2thZ2UgbmFtZVxuXHRcdFx0IShfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fID0gW10sIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRyZXR1cm4gY2xhc3NOYW1lcztcblx0XHRcdH0uYXBwbHkoZXhwb3J0cywgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXyksIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fICE9PSB1bmRlZmluZWQgJiYgKG1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18pKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0d2luZG93LmNsYXNzTmFtZXMgPSBjbGFzc05hbWVzO1xuXHRcdH1cblx0fSgpKTtcblxuXG4vKioqLyB9LFxuXG4vKioqLyA3NDA6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXHRcblx0Ly8gbG9hZCB0aGUgc3R5bGVzXG5cdHZhciBjb250ZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NDEpO1xuXHRpZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblx0Ly8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxuXHR2YXIgdXBkYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NzApKGNvbnRlbnQsIHt9KTtcblx0aWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cdC8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcblx0aWYodHJ1ZSkge1xuXHRcdC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdFx0aWYoIWNvbnRlbnQubG9jYWxzKSB7XG5cdFx0XHRtb2R1bGUuaG90LmFjY2VwdCg3NDEsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgbmV3Q29udGVudCA9IF9fd2VicGFja19yZXF1aXJlX18oNzQxKTtcblx0XHRcdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cdFx0XHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0XHRcdH0pO1xuXHRcdH1cblx0XHQvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdFx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG5cdH1cblxuLyoqKi8gfSxcblxuLyoqKi8gNzQxOlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0ZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NjgpKCk7XG5cdC8vIGltcG9ydHNcblx0XG5cdFxuXHQvLyBtb2R1bGVcblx0ZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLnBhZ2UtY29udGVudHtvdmVyZmxvdzpzY3JvbGw7aGVpZ2h0OmNhbGMoMTAwJSAtIC41ODY2NjdyZW0pfVwiLCBcIlwiXSk7XG5cdFxuXHQvLyBleHBvcnRzXG5cblxuLyoqKi8gfSxcblxuLyoqKi8gNzQyOlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfTGlzdCA9IF9fd2VicGFja19yZXF1aXJlX18oNzQzKTtcblx0XG5cdHZhciBfTGlzdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9MaXN0KTtcblx0XG5cdHZhciBfSXRlbSA9IF9fd2VicGFja19yZXF1aXJlX18oNzQ0KTtcblx0XG5cdHZhciBfSXRlbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9JdGVtKTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oNzQ1KTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHR2YXIgTGlzdEJsb2NrID0ge1xuXHQgICAgTGlzdDogX0xpc3QyLmRlZmF1bHQsXG5cdCAgICBJdGVtOiBfSXRlbTIuZGVmYXVsdFxuXHR9O1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gTGlzdEJsb2NrO1xuXG4vKioqLyB9LFxuXG4vKioqLyA3NDM6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0XHR2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMwMCk7XG5cdFxuXHR2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblx0XG5cdHZhciBfY2xhc3NuYW1lcyA9IF9fd2VicGFja19yZXF1aXJlX18oNzM5KTtcblx0XG5cdHZhciBfY2xhc3NuYW1lczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc25hbWVzKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHR2YXIgTGlzdCA9IGZ1bmN0aW9uIExpc3QoX3JlZikge1xuXHRcdHZhciBjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcblx0XHQgICAgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuO1xuXHRcblx0XG5cdFx0dmFyIGNuID0gKDAsIF9jbGFzc25hbWVzMi5kZWZhdWx0KSgnbGlzdC1ibG9jaycsIGNsYXNzTmFtZSwge30pO1xuXHRcblx0XHRyZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG5cdFx0XHQnZGl2Jyxcblx0XHRcdHsgY2xhc3NOYW1lOiBjbiB9LFxuXHRcdFx0X3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG5cdFx0XHRcdCd1bCcsXG5cdFx0XHRcdG51bGwsXG5cdFx0XHRcdGNoaWxkcmVuXG5cdFx0XHQpXG5cdFx0KTtcblx0fTtcblx0XG5cdExpc3QucHJvcFR5cGVzID0ge1xuXHRcdGNoaWxkcmVuOiBfcmVhY3QyLmRlZmF1bHQuUHJvcFR5cGVzLmFueVxuXHR9O1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gTGlzdDtcblxuLyoqKi8gfSxcblxuLyoqKi8gNzQ0OlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdFx0dmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMDApO1xuXHRcblx0dmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cdFxuXHR2YXIgX2NsYXNzbmFtZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDczOSk7XG5cdFxuXHR2YXIgX2NsYXNzbmFtZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NuYW1lcyk7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0dmFyIEl0ZW0gPSBmdW5jdGlvbiBJdGVtKF9yZWYpIHtcblx0XHR2YXIgY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG5cdFx0ICAgIG1lZGlhID0gX3JlZi5tZWRpYSxcblx0XHQgICAgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuO1xuXHRcblx0XG5cdFx0dmFyIGNuID0gKDAsIF9jbGFzc25hbWVzMi5kZWZhdWx0KSgnaXRlbS1jb250ZW50JywgY2xhc3NOYW1lLCB7XG5cdFx0XHRtZWRpYTogbWVkaWFcblx0XHR9KTtcblx0XG5cdFx0cmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHRcdFx0J2xpJyxcblx0XHRcdHsgY2xhc3NOYW1lOiBjbiB9LFxuXHRcdFx0Y2hpbGRyZW5cblx0XHQpO1xuXHR9O1xuXHRcblx0SXRlbS5wcm9wVHlwZXMgPSB7XG5cdFx0Y2hpbGRyZW46IF9yZWFjdDIuZGVmYXVsdC5Qcm9wVHlwZXMuYW55XG5cdH07XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSBJdGVtO1xuXG4vKioqLyB9LFxuXG4vKioqLyA3NDU6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXHRcblx0Ly8gbG9hZCB0aGUgc3R5bGVzXG5cdHZhciBjb250ZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NDYpO1xuXHRpZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblx0Ly8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxuXHR2YXIgdXBkYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NzApKGNvbnRlbnQsIHt9KTtcblx0aWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cdC8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcblx0aWYodHJ1ZSkge1xuXHRcdC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdFx0aWYoIWNvbnRlbnQubG9jYWxzKSB7XG5cdFx0XHRtb2R1bGUuaG90LmFjY2VwdCg3NDYsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgbmV3Q29udGVudCA9IF9fd2VicGFja19yZXF1aXJlX18oNzQ2KTtcblx0XHRcdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cdFx0XHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0XHRcdH0pO1xuXHRcdH1cblx0XHQvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdFx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG5cdH1cblxuLyoqKi8gfSxcblxuLyoqKi8gNzQ2OlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0ZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NjgpKCk7XG5cdC8vIGltcG9ydHNcblx0XG5cdFxuXHQvLyBtb2R1bGVcblx0ZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmxpc3QtYmxvY2t7bWFyZ2luOjB9Lmxpc3QtYmxvY2sgLml0ZW0tY29udGVudHtkaXNwbGF5OmJsb2NrfS5saXN0LWJsb2NrIC5pdGVtLWNvbnRlbnQubWVkaWF7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleH0ubGlzdC1ibG9jayBVTDphZnRlciwubGlzdC1ibG9jayB1bDpiZWZvcmV7ZGlzcGxheTpub25lfS5saXN0LWJsb2NrIGxpe2JvcmRlci1ib3R0b206LjAxMzMzM3JlbSBzb2xpZCAjY2NjfVwiLCBcIlwiXSk7XG5cdFxuXHQvLyBleHBvcnRzXG5cblxuLyoqKi8gfSxcblxuLyoqKi8gNzQ3OlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfZiA9IF9fd2VicGFja19yZXF1aXJlX18oNDY0KTtcblx0XG5cdHZhciBfZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9mKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHR2YXIgJCA9IF9mMi5kZWZhdWx0LiQ7XG5cdFxuXHRcblx0dmFyICRwYWdlcyA9ICQoJyNwYWdlcycpO1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgJHBhZ2VzLnJlbW92ZUNsYXNzKCd0b29sYmFyLWZpeGVkJyk7XG5cdH07XG5cbi8qKiovIH0sXG5cbi8qKiovIDc0ODpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihtb2R1bGUpIHsndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0XHR2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfaW5kZXggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU3OSk7XG5cdFxuXHR2YXIgX2luZGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luZGV4KTtcblx0XG5cdHZhciBfaW5kZXgzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1ODQpO1xuXHRcblx0dmFyIF9pbmRleDQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmRleDMpO1xuXHRcblx0dmFyIF9yZWFjdDIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMwMCk7XG5cdFxuXHR2YXIgX3JlYWN0MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0Mik7XG5cdFxuXHR2YXIgX2luZGV4NSA9IF9fd2VicGFja19yZXF1aXJlX18oNTg1KTtcblx0XG5cdHZhciBfaW5kZXg2ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5kZXg1KTtcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cdFxuXHR2YXIgX2NsYXNzbmFtZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDczOSk7XG5cdFxuXHR2YXIgX2NsYXNzbmFtZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NuYW1lcyk7XG5cdFxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDc0OSk7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblx0XG5cdGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXHRcblx0ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cdFxuXHR2YXIgX2NvbXBvbmVudHMgPSB7XG5cdFx0VGFiOiB7XG5cdFx0XHRkaXNwbGF5TmFtZTogJ1RhYidcblx0XHR9XG5cdH07XG5cdFxuXHR2YXIgX2hvbWVUcmF2aXNCdWlsZEdvdW1hbmcyMDEwUmVhY3RSZWR1eEdpdGh1Yk5vZGVfbW9kdWxlc1JlYWN0VHJhbnNmb3JtSG1yTGliSW5kZXhKczIgPSAoMCwgX2luZGV4Ni5kZWZhdWx0KSh7XG5cdFx0ZmlsZW5hbWU6ICcvaG9tZS90cmF2aXMvYnVpbGQvZ291bWFuZzIwMTAvcmVhY3QtcmVkdXgtZ2l0aHViL3NyYy9jb21wb25lbnRzL1RhYi9pbmRleC5qc3gnLFxuXHRcdGNvbXBvbmVudHM6IF9jb21wb25lbnRzLFxuXHRcdGxvY2FsczogW21vZHVsZV0sXG5cdFx0aW1wb3J0czogW19yZWFjdDMuZGVmYXVsdF1cblx0fSk7XG5cdFxuXHR2YXIgX2hvbWVUcmF2aXNCdWlsZEdvdW1hbmcyMDEwUmVhY3RSZWR1eEdpdGh1Yk5vZGVfbW9kdWxlc1JlYWN0VHJhbnNmb3JtQ2F0Y2hFcnJvcnNMaWJJbmRleEpzMiA9ICgwLCBfaW5kZXg0LmRlZmF1bHQpKHtcblx0XHRmaWxlbmFtZTogJy9ob21lL3RyYXZpcy9idWlsZC9nb3VtYW5nMjAxMC9yZWFjdC1yZWR1eC1naXRodWIvc3JjL2NvbXBvbmVudHMvVGFiL2luZGV4LmpzeCcsXG5cdFx0Y29tcG9uZW50czogX2NvbXBvbmVudHMsXG5cdFx0bG9jYWxzOiBbXSxcblx0XHRpbXBvcnRzOiBbX3JlYWN0My5kZWZhdWx0LCBfaW5kZXgyLmRlZmF1bHRdXG5cdH0pO1xuXHRcblx0ZnVuY3Rpb24gX3dyYXBDb21wb25lbnQoaWQpIHtcblx0XHRyZXR1cm4gZnVuY3Rpb24gKENvbXBvbmVudCkge1xuXHRcdFx0cmV0dXJuIF9ob21lVHJhdmlzQnVpbGRHb3VtYW5nMjAxMFJlYWN0UmVkdXhHaXRodWJOb2RlX21vZHVsZXNSZWFjdFRyYW5zZm9ybUhtckxpYkluZGV4SnMyKF9ob21lVHJhdmlzQnVpbGRHb3VtYW5nMjAxMFJlYWN0UmVkdXhHaXRodWJOb2RlX21vZHVsZXNSZWFjdFRyYW5zZm9ybUNhdGNoRXJyb3JzTGliSW5kZXhKczIoQ29tcG9uZW50LCBpZCksIGlkKTtcblx0XHR9O1xuXHR9XG5cdFxuXHR2YXIgVGFiID0gX3dyYXBDb21wb25lbnQoJ1RhYicpKGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG5cdFx0X2luaGVyaXRzKFRhYiwgX1JlYWN0JENvbXBvbmVudCk7XG5cdFxuXHRcdGZ1bmN0aW9uIFRhYihwcm9wcykge1xuXHRcdFx0X2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRhYik7XG5cdFxuXHRcdFx0dmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFRhYi5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFRhYikpLmNhbGwodGhpcywgcHJvcHMpKTtcblx0XG5cdFx0XHRfdGhpcy5zdGF0ZSA9IHtcblx0XHRcdFx0YWN0aXZlTmFtZTogcHJvcHMuYWN0aXZlTmFtZVxuXHRcdFx0fTtcblx0XHRcdHJldHVybiBfdGhpcztcblx0XHR9XG5cdFxuXHRcdF9jcmVhdGVDbGFzcyhUYWIsIFt7XG5cdFx0XHRrZXk6ICdjaGFuZ2VBY3RpdmVOYW1lJyxcblx0XHRcdHZhbHVlOiBmdW5jdGlvbiBjaGFuZ2VBY3RpdmVOYW1lKGFjdGl2ZU5hbWUpIHtcblx0XHRcdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRcdFx0YWN0aXZlTmFtZTogYWN0aXZlTmFtZVxuXHRcdFx0XHR9KTtcblx0XG5cdFx0XHRcdGlmICh0eXBlb2YgdGhpcy5wcm9wcy5vbkNoYW5nZSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHRcdHRoaXMucHJvcHMub25DaGFuZ2UoYWN0aXZlTmFtZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LCB7XG5cdFx0XHRrZXk6ICdyZW5kZXInLFxuXHRcdFx0dmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcblx0XHRcdFx0dmFyIF90aGlzMiA9IHRoaXM7XG5cdFxuXHRcdFx0XHR2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcblx0XHRcdFx0ICAgIHRhYnMgPSBfcHJvcHMudGFicyxcblx0XHRcdFx0ICAgIGlzRmV0Y2hpbmcgPSBfcHJvcHMuaXNGZXRjaGluZztcblx0XG5cdFxuXHRcdFx0XHRyZXR1cm4gX3JlYWN0My5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG5cdFx0XHRcdFx0J2RpdicsXG5cdFx0XHRcdFx0eyBjbGFzc05hbWU6ICd0YWJzJyB9LFxuXHRcdFx0XHRcdHRhYnMubWFwKGZ1bmN0aW9uICh0YWIpIHtcblx0XHRcdFx0XHRcdHJldHVybiBfcmVhY3QzLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcblx0XHRcdFx0XHRcdFx0J2RpdicsXG5cdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHRrZXk6IHRhYi5hY3RpdmVOYW1lLFxuXHRcdFx0XHRcdFx0XHRcdGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzMi5kZWZhdWx0KSgndGFiJywge1xuXHRcdFx0XHRcdFx0XHRcdFx0c2VsZWN0ZWQ6IF90aGlzMi5zdGF0ZS5hY3RpdmVOYW1lID09PSB0YWIuYWN0aXZlTmFtZVxuXHRcdFx0XHRcdFx0XHRcdH0pLFxuXHRcdFx0XHRcdFx0XHRcdG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gX3RoaXMyLmNoYW5nZUFjdGl2ZU5hbWUodGFiLmFjdGl2ZU5hbWUpO1xuXHRcdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdFx0ZGlzYWJsZWQ6IGlzRmV0Y2hpbmcgfSxcblx0XHRcdFx0XHRcdFx0dGFiLnRpdGxlXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0pXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fV0pO1xuXHRcblx0XHRyZXR1cm4gVGFiO1xuXHR9KF9yZWFjdDMuZGVmYXVsdC5Db21wb25lbnQpKTtcblx0XG5cdFRhYi5wb3JwVHlwZXMgPSB7XG5cdFx0dGFiczogX3JlYWN0My5kZWZhdWx0LlByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblx0XHRhY3RpdmVOYW1lOiBfcmVhY3QzLmRlZmF1bHQuUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuXHRcdGlzRmV0Y2hpbmc6IF9yZWFjdDMuZGVmYXVsdC5Qcm9wVHlwZXMuYm9vbFxuXHR9O1xuXHRcblx0VGFiLmRlZmF1bHRQcm9wcyA9IHtcblx0XHRpc0ZldGNoaW5nOiBmYWxzZVxuXHR9O1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gVGFiO1xuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyg0OTYpKG1vZHVsZSkpKVxuXG4vKioqLyB9LFxuXG4vKioqLyA3NDk6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXHRcblx0Ly8gbG9hZCB0aGUgc3R5bGVzXG5cdHZhciBjb250ZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NTApO1xuXHRpZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblx0Ly8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxuXHR2YXIgdXBkYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NzApKGNvbnRlbnQsIHt9KTtcblx0aWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cdC8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcblx0aWYodHJ1ZSkge1xuXHRcdC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdFx0aWYoIWNvbnRlbnQubG9jYWxzKSB7XG5cdFx0XHRtb2R1bGUuaG90LmFjY2VwdCg3NTAsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgbmV3Q29udGVudCA9IF9fd2VicGFja19yZXF1aXJlX18oNzUwKTtcblx0XHRcdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cdFx0XHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0XHRcdH0pO1xuXHRcdH1cblx0XHQvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdFx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG5cdH1cblxuLyoqKi8gfSxcblxuLyoqKi8gNzUwOlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0ZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NjgpKCk7XG5cdC8vIGltcG9ydHNcblx0XG5cdFxuXHQvLyBtb2R1bGVcblx0ZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLnRhYnN7ZGlzcGxheTp0YWJsZTt3aWR0aDoxMDAlO3RhYmxlLWxheW91dDpmaXhlZDtiYWNrZ3JvdW5kOiNmYWZhZmF9LnRhYnMgLnRhYntkaXNwbGF5OnRhYmxlLWNlbGw7dGV4dC1hbGlnbjpjZW50ZXI7cGFkZGluZzouMTMzMzMzcmVtIDB9XCIsIFwiXCJdKTtcblx0XG5cdC8vIGV4cG9ydHNcblxuXG4vKioqLyB9LFxuXG4vKioqLyA3NTc6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXHRcblx0Ly8gbG9hZCB0aGUgc3R5bGVzXG5cdHZhciBjb250ZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NTgpO1xuXHRpZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblx0Ly8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxuXHR2YXIgdXBkYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NzApKGNvbnRlbnQsIHt9KTtcblx0aWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cdC8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcblx0aWYodHJ1ZSkge1xuXHRcdC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdFx0aWYoIWNvbnRlbnQubG9jYWxzKSB7XG5cdFx0XHRtb2R1bGUuaG90LmFjY2VwdCg3NTgsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgbmV3Q29udGVudCA9IF9fd2VicGFja19yZXF1aXJlX18oNzU4KTtcblx0XHRcdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cdFx0XHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0XHRcdH0pO1xuXHRcdH1cblx0XHQvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdFx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG5cdH1cblxuLyoqKi8gfSxcblxuLyoqKi8gNzU4OlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0ZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NjgpKCk7XG5cdC8vIGltcG9ydHNcblx0XG5cdFxuXHQvLyBtb2R1bGVcblx0ZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLnVzZXItcGxhY2Vob2xkZXJ7cGFkZGluZzowO21hcmdpbjouMnJlbTtvdmVyZmxvdzpoaWRkZW47d29yZC1icmVhazpicmVhay13b3JkO3dvcmQtd3JhcDpicmVhay13b3JkO3doaXRlLXNwYWNlOm5vcm1hbDtib3JkZXI6LjAxMzMzM3JlbSBzb2xpZCAjZGRkO2JvcmRlci1yYWRpdXM6LjA0cmVtO2JhY2tncm91bmQ6I2Y1ZjVmNTtib3JkZXItY29sb3I6I2NjYztib3gtc2hhZG93Omluc2V0IDAgMCAuMTMzMzMzcmVtIHJnYmEoMCwwLDAsLjEpfS51c2VyLXBsYWNlaG9sZGVyIC53cmFwe2ZvbnQtc2l6ZTouMnJlbTtjb2xvcjojNzY3Njc2O3RleHQtYWxpZ246Y2VudGVyO3BhZGRpbmc6LjJyZW19LnNlYXJjaC1wbGFjZWhvbGRlcntwYWRkaW5nOi42cmVtO2ZvbnQtd2VpZ2h0OjcwMDtjb2xvcjojNzY3Njc2O3RleHQtYWxpZ246Y2VudGVyfVwiLCBcIlwiXSk7XG5cdFxuXHQvLyBleHBvcnRzXG5cblxuLyoqKi8gfSxcblxuLyoqKi8gNzU5OlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdFx0dmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMDApO1xuXHRcblx0dmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cdFxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDc2MCk7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0dmFyIExvYWRpbmcgPSBmdW5jdGlvbiBMb2FkaW5nKCkge1xuXHRcdHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcblx0XHRcdCdkaXYnLFxuXHRcdFx0eyBjbGFzc05hbWU6ICdsb2FkaW5nJyB9LFxuXHRcdFx0X3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiAnbG9hZGVyJyB9KSxcblx0XHRcdF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHRcdFx0XHQnZGl2Jyxcblx0XHRcdFx0eyBjbGFzc05hbWU6ICd0ZXh0JyB9LFxuXHRcdFx0XHQnTG9hZGluZy4uLidcblx0XHRcdClcblx0XHQpO1xuXHR9O1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gTG9hZGluZztcblxuLyoqKi8gfSxcblxuLyoqKi8gNzYwOlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0Ly8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblx0XG5cdC8vIGxvYWQgdGhlIHN0eWxlc1xuXHR2YXIgY29udGVudCA9IF9fd2VicGFja19yZXF1aXJlX18oNzYxKTtcblx0aWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cdC8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cblx0dmFyIHVwZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNDcwKShjb250ZW50LCB7fSk7XG5cdGlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXHQvLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5cdGlmKHRydWUpIHtcblx0XHQvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuXHRcdGlmKCFjb250ZW50LmxvY2Fscykge1xuXHRcdFx0bW9kdWxlLmhvdC5hY2NlcHQoNzYxLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIG5ld0NvbnRlbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc2MSk7XG5cdFx0XHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXHRcdFx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0Ly8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuXHRcdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xuXHR9XG5cbi8qKiovIH0sXG5cbi8qKiovIDc2MTpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oNDY4KSgpO1xuXHQvLyBpbXBvcnRzXG5cdFxuXHRcblx0Ly8gbW9kdWxlXG5cdGV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5sb2FkaW5ne21hcmdpbjouMjY2NjY3cmVtIGF1dG87ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstd2Via2l0LWJveC1wYWNrOmNlbnRlcjstbXMtZmxleC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO3Bvc2l0aW9uOnJlbGF0aXZlfS5sb2FkaW5nIC50ZXh0e3Bvc2l0aW9uOmFic29sdXRlO3RvcDo1MCU7bGVmdDo1MCU7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlKC01MCUsLTUwJSk7dHJhbnNmb3JtOnRyYW5zbGF0ZSgtNTAlLC01MCUpO2ZvbnQtc2l6ZTouMjRyZW19LmxvYWRpbmcgLmxvYWRlciwubG9hZGluZyAubG9hZGVyOmFmdGVye2JvcmRlci1yYWRpdXM6NTAlO3dpZHRoOjEwZW07aGVpZ2h0OjEwZW19LmxvYWRpbmcgLmxvYWRlcnttYXJnaW46LjhyZW0gYXV0bztmb250LXNpemU6LjEzMzMzM3JlbTtwb3NpdGlvbjpyZWxhdGl2ZTt0ZXh0LWluZGVudDotOTk5OWVtO2JvcmRlci10b3A6MS4xZW0gc29saWQgaHNsYSgwLDAlLDgwJSwuMik7Ym9yZGVyLXJpZ2h0OjEuMWVtIHNvbGlkIGhzbGEoMCwwJSw4MCUsLjIpO2JvcmRlci1ib3R0b206MS4xZW0gc29saWQgaHNsYSgwLDAlLDgwJSwuMik7Ym9yZGVyLWxlZnQ6MS4xZW0gc29saWQgI2NjYzstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVaKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVaKDApOy13ZWJraXQtYW5pbWF0aW9uOmxvYWQ4IDEuMXMgaW5maW5pdGUgbGluZWFyO2FuaW1hdGlvbjpsb2FkOCAxLjFzIGluZmluaXRlIGxpbmVhcn1ALXdlYmtpdC1rZXlmcmFtZXMgbG9hZDh7MCV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDBkZWcpO3RyYW5zZm9ybTpyb3RhdGUoMGRlZyl9dG97LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDF0dXJuKTt0cmFuc2Zvcm06cm90YXRlKDF0dXJuKX19QGtleWZyYW1lcyBsb2FkOHswJXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgwZGVnKX10b3std2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMXR1cm4pO3RyYW5zZm9ybTpyb3RhdGUoMXR1cm4pfX1cIiwgXCJcIl0pO1xuXHRcblx0Ly8gZXhwb3J0c1xuXG5cbi8qKiovIH0sXG5cbi8qKiovIDc3MTpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX3JlYWN0UmVkdXggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ3MSk7XG5cdFxuXHR2YXIgX2NvbXBvbmVudCA9IF9fd2VicGFja19yZXF1aXJlX18oNzcyKTtcblx0XG5cdHZhciBfY29tcG9uZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NvbXBvbmVudCk7XG5cdFxuXHR2YXIgX3NlbGVjdG9ycyA9IF9fd2VicGFja19yZXF1aXJlX18oNzg2KTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSAoMCwgX3JlYWN0UmVkdXguY29ubmVjdCkoX3NlbGVjdG9ycy5tYXBTdGF0ZVRvUHJvcHMsIF9zZWxlY3RvcnMubWFwRGlzcGF0Y2hUb1Byb3BzKShfY29tcG9uZW50Mi5kZWZhdWx0KTtcblxuLyoqKi8gfSxcblxuLyoqKi8gNzcyOlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKG1vZHVsZSkgeyd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX2luZGV4ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1NzkpO1xuXHRcblx0dmFyIF9pbmRleDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmRleCk7XG5cdFxuXHR2YXIgX2luZGV4MyA9IF9fd2VicGFja19yZXF1aXJlX18oNTg0KTtcblx0XG5cdHZhciBfaW5kZXg0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5kZXgzKTtcblx0XG5cdHZhciBfcmVhY3QyID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMDApO1xuXHRcblx0dmFyIF9yZWFjdDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdDIpO1xuXHRcblx0dmFyIF9pbmRleDUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU4NSk7XG5cdFxuXHR2YXIgX2luZGV4NiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luZGV4NSk7XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXHRcblx0dmFyIF9IZWFkZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDczMik7XG5cdFxuXHR2YXIgX0hlYWRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9IZWFkZXIpO1xuXHRcblx0dmFyIF9Db250ZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MzgpO1xuXHRcblx0dmFyIF9Db250ZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0NvbnRlbnQpO1xuXHRcblx0dmFyIF9jbGVhclRvb2xiYXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc0Nyk7XG5cdFxuXHR2YXIgX2NsZWFyVG9vbGJhcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGVhclRvb2xiYXIpO1xuXHRcblx0dmFyIF9UYWIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc0OCk7XG5cdFxuXHR2YXIgX1RhYjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9UYWIpO1xuXHRcblx0dmFyIF9PdmVyVmlldyA9IF9fd2VicGFja19yZXF1aXJlX18oNzczKTtcblx0XG5cdHZhciBfT3ZlclZpZXcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfT3ZlclZpZXcpO1xuXHRcblx0dmFyIF9SZXBvc2l0b3JpZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc3NCk7XG5cdFxuXHR2YXIgX1JlcG9zaXRvcmllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9SZXBvc2l0b3JpZXMpO1xuXHRcblx0dmFyIF9TdGFycyA9IF9fd2VicGFja19yZXF1aXJlX18oNzgxKTtcblx0XG5cdHZhciBfU3RhcnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU3RhcnMpO1xuXHRcblx0dmFyIF9Gb2xsb3dlcnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc4Mik7XG5cdFxuXHR2YXIgX0ZvbGxvd2VyczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Gb2xsb3dlcnMpO1xuXHRcblx0dmFyIF9Gb2xsb3dpbmdzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3ODMpO1xuXHRcblx0dmFyIF9Gb2xsb3dpbmdzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0ZvbGxvd2luZ3MpO1xuXHRcblx0X193ZWJwYWNrX3JlcXVpcmVfXyg3ODQpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cdFxuXHRmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblx0XG5cdGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXHRcblx0dmFyIF9jb21wb25lbnRzID0ge1xuXHQgICAgVXNlcjoge1xuXHQgICAgICAgIGRpc3BsYXlOYW1lOiAnVXNlcidcblx0ICAgIH1cblx0fTtcblx0XG5cdHZhciBfaG9tZVRyYXZpc0J1aWxkR291bWFuZzIwMTBSZWFjdFJlZHV4R2l0aHViTm9kZV9tb2R1bGVzUmVhY3RUcmFuc2Zvcm1IbXJMaWJJbmRleEpzMiA9ICgwLCBfaW5kZXg2LmRlZmF1bHQpKHtcblx0ICAgIGZpbGVuYW1lOiAnL2hvbWUvdHJhdmlzL2J1aWxkL2dvdW1hbmcyMDEwL3JlYWN0LXJlZHV4LWdpdGh1Yi9zcmMvbW9kdWxlcy9Vc2VyL2NvbXBvbmVudC5qc3gnLFxuXHQgICAgY29tcG9uZW50czogX2NvbXBvbmVudHMsXG5cdCAgICBsb2NhbHM6IFttb2R1bGVdLFxuXHQgICAgaW1wb3J0czogW19yZWFjdDMuZGVmYXVsdF1cblx0fSk7XG5cdFxuXHR2YXIgX2hvbWVUcmF2aXNCdWlsZEdvdW1hbmcyMDEwUmVhY3RSZWR1eEdpdGh1Yk5vZGVfbW9kdWxlc1JlYWN0VHJhbnNmb3JtQ2F0Y2hFcnJvcnNMaWJJbmRleEpzMiA9ICgwLCBfaW5kZXg0LmRlZmF1bHQpKHtcblx0ICAgIGZpbGVuYW1lOiAnL2hvbWUvdHJhdmlzL2J1aWxkL2dvdW1hbmcyMDEwL3JlYWN0LXJlZHV4LWdpdGh1Yi9zcmMvbW9kdWxlcy9Vc2VyL2NvbXBvbmVudC5qc3gnLFxuXHQgICAgY29tcG9uZW50czogX2NvbXBvbmVudHMsXG5cdCAgICBsb2NhbHM6IFtdLFxuXHQgICAgaW1wb3J0czogW19yZWFjdDMuZGVmYXVsdCwgX2luZGV4Mi5kZWZhdWx0XVxuXHR9KTtcblx0XG5cdGZ1bmN0aW9uIF93cmFwQ29tcG9uZW50KGlkKSB7XG5cdCAgICByZXR1cm4gZnVuY3Rpb24gKENvbXBvbmVudCkge1xuXHQgICAgICAgIHJldHVybiBfaG9tZVRyYXZpc0J1aWxkR291bWFuZzIwMTBSZWFjdFJlZHV4R2l0aHViTm9kZV9tb2R1bGVzUmVhY3RUcmFuc2Zvcm1IbXJMaWJJbmRleEpzMihfaG9tZVRyYXZpc0J1aWxkR291bWFuZzIwMTBSZWFjdFJlZHV4R2l0aHViTm9kZV9tb2R1bGVzUmVhY3RUcmFuc2Zvcm1DYXRjaEVycm9yc0xpYkluZGV4SnMyKENvbXBvbmVudCwgaWQpLCBpZCk7XG5cdCAgICB9O1xuXHR9XG5cdFxuXHR2YXIgdGFicyA9IFt7XG5cdCAgICBhY3RpdmVOYW1lOiAnb3ZlcnZpZXcnLFxuXHQgICAgdGl0bGU6ICdPdmVydmlldydcblx0fSwge1xuXHQgICAgYWN0aXZlTmFtZTogJ3JlcG9zaXRvcmllcycsXG5cdCAgICB0aXRsZTogJ1JlcG9zaXRvcmllcydcblx0fSwge1xuXHQgICAgYWN0aXZlTmFtZTogJ3N0YXJzJyxcblx0ICAgIHRpdGxlOiAnU3RhcnMnXG5cdH0sIHtcblx0ICAgIGFjdGl2ZU5hbWU6ICdmb2xsb3dlcnMnLFxuXHQgICAgdGl0bGU6ICdGb2xsb3dlcnMnXG5cdH0sIHtcblx0ICAgIGFjdGl2ZU5hbWU6ICdmb2xsb3dpbmcnLFxuXHQgICAgdGl0bGU6ICdGb2xsb3dpbmcnXG5cdH1dO1xuXHRcblx0dmFyIFVzZXIgPSBfd3JhcENvbXBvbmVudCgnVXNlcicpKGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG5cdCAgICBfaW5oZXJpdHMoVXNlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cdFxuXHQgICAgZnVuY3Rpb24gVXNlcihwcm9wcykge1xuXHQgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBVc2VyKTtcblx0XG5cdCAgICAgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChVc2VyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVXNlcikpLmNhbGwodGhpcywgcHJvcHMpKTtcblx0ICAgIH1cblx0XG5cdCAgICBfY3JlYXRlQ2xhc3MoVXNlciwgW3tcblx0ICAgICAgICBrZXk6ICdjb21wb25lbnREaWRNb3VudCcsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuXHQgICAgICAgICAgICAoMCwgX2NsZWFyVG9vbGJhcjIuZGVmYXVsdCkoKTtcblx0ICAgICAgICAgICAgdGhpcy5wcm9wcy5nZXRVc2VyKHRoaXMucHJvcHMucGFyYW1zLm5hbWUpO1xuXHQgICAgICAgICAgICB0aGlzLnByb3BzLmdldFVzZXJSZXAodGhpcy5wcm9wcy5wYXJhbXMubmFtZSk7XG5cdCAgICAgICAgICAgIHRoaXMucHJvcHMuY2hhbmdlQWN0aXZlTmFtZSh0YWJzWzBdLmFjdGl2ZU5hbWUpO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdjaGFuZ2VUYWJIYW5kbGVyJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2hhbmdlVGFiSGFuZGxlcihhY3RpdmVOYW1lKSB7XG5cdCAgICAgICAgICAgIHRoaXMucHJvcHMuY2hhbmdlQWN0aXZlTmFtZShhY3RpdmVOYW1lKTtcblx0XG5cdCAgICAgICAgICAgIHN3aXRjaCAoYWN0aXZlTmFtZSkge1xuXHQgICAgICAgICAgICAgICAgY2FzZSB0YWJzWzBdLmFjdGl2ZU5hbWU6XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5nZXRVc2VyKHRoaXMucHJvcHMucGFyYW1zLm5hbWUpO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSB0YWJzWzFdLmFjdGl2ZU5hbWU6XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5nZXRVc2VyUmVwKHRoaXMucHJvcHMucGFyYW1zLm5hbWUpO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSB0YWJzWzJdLmFjdGl2ZU5hbWU6XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5nZXRVc2VyU3RhcnModGhpcy5wcm9wcy5wYXJhbXMubmFtZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICBjYXNlIHRhYnNbM10uYWN0aXZlTmFtZTpcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmdldFVzZXJGb2xsb3dlcnModGhpcy5wcm9wcy5wYXJhbXMubmFtZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICBjYXNlIHRhYnNbNF0uYWN0aXZlTmFtZTpcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmdldFVzZXJGb2xsb3dpbmdzKHRoaXMucHJvcHMucGFyYW1zLm5hbWUpO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgZGVmYXVsdDpcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ3JlbmRlcicsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcblx0ICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cdFxuXHQgICAgICAgICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcblx0ICAgICAgICAgICAgICAgIGFjdGl2ZU5hbWUgPSBfcHJvcHMuYWN0aXZlTmFtZSxcblx0ICAgICAgICAgICAgICAgIHVzZXIgPSBfcHJvcHMudXNlcixcblx0ICAgICAgICAgICAgICAgIHJlcHMgPSBfcHJvcHMucmVwcyxcblx0ICAgICAgICAgICAgICAgIHN0YXJzID0gX3Byb3BzLnN0YXJzLFxuXHQgICAgICAgICAgICAgICAgZm9sbG93ZXJzID0gX3Byb3BzLmZvbGxvd2Vycyxcblx0ICAgICAgICAgICAgICAgIGZvbGxvd2luZ3MgPSBfcHJvcHMuZm9sbG93aW5ncyxcblx0ICAgICAgICAgICAgICAgIGlzRmV0Y2hpbmcgPSBfcHJvcHMuaXNGZXRjaGluZztcblx0XG5cdFxuXHQgICAgICAgICAgICByZXR1cm4gX3JlYWN0My5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICAgICAgICAnZGl2Jyxcblx0ICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAndXNlcicgfSxcblx0ICAgICAgICAgICAgICAgIF9yZWFjdDMuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9IZWFkZXIyLmRlZmF1bHQsIHtcblx0ICAgICAgICAgICAgICAgICAgICBsZWZ0OiB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGljb246ICdhbGlnbicsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6IHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAyMCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMjBcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgICAgICAgICAgY2VudGVyOiB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGljb246ICdnaXRodWInXG5cdCAgICAgICAgICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgICAgICAgICByaWdodDoge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiAnYmVsbCcsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6IHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAyNCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMjRcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIH0gfSksXG5cdCAgICAgICAgICAgICAgICBfcmVhY3QzLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgICAgICAgICBfQ29udGVudDIuZGVmYXVsdCxcblx0ICAgICAgICAgICAgICAgICAgICBudWxsLFxuXHQgICAgICAgICAgICAgICAgICAgIF9yZWFjdDMuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAnZGl2Jyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICd0YWJzLXdyYXAnIH0sXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIF9yZWFjdDMuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9UYWIyLmRlZmF1bHQsIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYnM6IHRhYnMsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVOYW1lOiB0YWJzWzBdLmFjdGl2ZU5hbWUsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZTogZnVuY3Rpb24gb25DaGFuZ2UoX2FjdGl2ZU5hbWUpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLmNoYW5nZVRhYkhhbmRsZXIoX2FjdGl2ZU5hbWUpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSB9KVxuXHQgICAgICAgICAgICAgICAgICAgICksXG5cdCAgICAgICAgICAgICAgICAgICAgYWN0aXZlTmFtZSA9PT0gdGFic1swXS5hY3RpdmVOYW1lICYmIF9yZWFjdDMuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9PdmVyVmlldzIuZGVmYXVsdCwge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB1c2VyOiB1c2VyLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXBzOiByZXBzLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpc0ZldGNoaW5nOiBpc0ZldGNoaW5nIH0pLFxuXHQgICAgICAgICAgICAgICAgICAgIGFjdGl2ZU5hbWUgPT09IHRhYnNbMV0uYWN0aXZlTmFtZSAmJiBfcmVhY3QzLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfUmVwb3NpdG9yaWVzMi5kZWZhdWx0LCB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJlcHM6IHJlcHMsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBhY3RpdmVOYW1lLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpc0ZldGNoaW5nOiBpc0ZldGNoaW5nIH0pLFxuXHQgICAgICAgICAgICAgICAgICAgIGFjdGl2ZU5hbWUgPT09IHRhYnNbMl0uYWN0aXZlTmFtZSAmJiBfcmVhY3QzLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfU3RhcnMyLmRlZmF1bHQsIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnM6IHN0YXJzLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogYWN0aXZlTmFtZSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaXNGZXRjaGluZzogaXNGZXRjaGluZyB9KSxcblx0ICAgICAgICAgICAgICAgICAgICBhY3RpdmVOYW1lID09PSB0YWJzWzNdLmFjdGl2ZU5hbWUgJiYgX3JlYWN0My5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0ZvbGxvd2VyczIuZGVmYXVsdCwge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBmb2xsb3dlcnM6IGZvbGxvd2Vycyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IGFjdGl2ZU5hbWUsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlzRmV0Y2hpbmc6IGlzRmV0Y2hpbmcgfSksXG5cdCAgICAgICAgICAgICAgICAgICAgYWN0aXZlTmFtZSA9PT0gdGFic1s0XS5hY3RpdmVOYW1lICYmIF9yZWFjdDMuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Gb2xsb3dpbmdzMi5kZWZhdWx0LCB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGZvbGxvd2luZ3M6IGZvbGxvd2luZ3MsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBhY3RpdmVOYW1lLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpc0ZldGNoaW5nOiBpc0ZldGNoaW5nIH0pXG5cdCAgICAgICAgICAgICAgICApXG5cdCAgICAgICAgICAgICk7XG5cdCAgICAgICAgfVxuXHQgICAgfV0pO1xuXHRcblx0ICAgIHJldHVybiBVc2VyO1xuXHR9KF9yZWFjdDMuZGVmYXVsdC5Db21wb25lbnQpKTtcblx0XG5cdFVzZXIucHJvcFR5cGVzID0ge1xuXHQgICAgYWN0aXZlTmFtZTogX3JlYWN0My5kZWZhdWx0LlByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZFxuXHR9O1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gVXNlcjtcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oNDk2KShtb2R1bGUpKSlcblxuLyoqKi8gfSxcblxuLyoqKi8gNzczOlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMwMCk7XG5cdFxuXHR2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblx0XG5cdHZhciBfaW1tdXRhYmxlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MzEpO1xuXHRcblx0dmFyIF9pbW11dGFibGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW1tdXRhYmxlKTtcblx0XG5cdHZhciBfTGlzdEJsb2NrID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NDIpO1xuXHRcblx0dmFyIF9MaXN0QmxvY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTGlzdEJsb2NrKTtcblx0XG5cdHZhciBfTG9hZGluZyA9IF9fd2VicGFja19yZXF1aXJlX18oNzU5KTtcblx0XG5cdHZhciBfTG9hZGluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Mb2FkaW5nKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHR2YXIgTGlzdCA9IF9MaXN0QmxvY2syLmRlZmF1bHQuTGlzdCxcblx0ICAgIEl0ZW0gPSBfTGlzdEJsb2NrMi5kZWZhdWx0Lkl0ZW07XG5cdFxuXHRcblx0dmFyIE92ZXJWaWV3ID0gZnVuY3Rpb24gT3ZlclZpZXcoX3JlZikge1xuXHQgICAgdmFyIHVzZXIgPSBfcmVmLnVzZXIsXG5cdCAgICAgICAgcmVwcyA9IF9yZWYucmVwcyxcblx0ICAgICAgICBpc0ZldGNoaW5nID0gX3JlZi5pc0ZldGNoaW5nO1xuXHQgICAgcmV0dXJuIGlzRmV0Y2hpbmcgPyBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfTG9hZGluZzIuZGVmYXVsdCwgbnVsbCkgOiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAnZGl2Jyxcblx0ICAgICAgICB7IGNsYXNzTmFtZTogJ292ZXJ2aWV3JyB9LFxuXHQgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgICAnZGl2Jyxcblx0ICAgICAgICAgICAgeyBjbGFzc05hbWU6ICd1c2VyLWl0ZW0nIH0sXG5cdCAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgICAgICAgJ2RpdicsXG5cdCAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ3VzZXItaW1nJyB9LFxuXHQgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2ltZycsIHsgc3JjOiB1c2VyLmdldCgnYXZhdGFyX3VybCcpIH0pXG5cdCAgICAgICAgICAgICksXG5cdCAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgICAgICAgJ2RpdicsXG5cdCAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ3VzZXItaW5mbycgfSxcblx0ICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgICAgICAgICAgICdoMScsXG5cdCAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdsb2dpbicgfSxcblx0ICAgICAgICAgICAgICAgICAgICB1c2VyLmdldCgnbG9naW4nKVxuXHQgICAgICAgICAgICAgICAgKSxcblx0ICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgICAgICAgICAgICdoMycsXG5cdCAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICduYW1lJyB9LFxuXHQgICAgICAgICAgICAgICAgICAgIHVzZXIuZ2V0KCduYW1lJylcblx0ICAgICAgICAgICAgICAgICksXG5cdCAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgICAgICAgICAndWwnLFxuXHQgICAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnaW5mbycgfSxcblx0ICAgICAgICAgICAgICAgICAgICB1c2VyLmdldCgnY29tcGFueScpICYmIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAnbGknLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBudWxsLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICB1c2VyLmdldCgnY29tcGFueScpXG5cdCAgICAgICAgICAgICAgICAgICAgKSxcblx0ICAgICAgICAgICAgICAgICAgICB1c2VyLmdldCgnbG9jYXRpb24nKSAmJiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgICAgICAgICAgICAgJ2xpJyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdXNlci5nZXQoJ2xvY2F0aW9uJylcblx0ICAgICAgICAgICAgICAgICAgICApLFxuXHQgICAgICAgICAgICAgICAgICAgIHVzZXIuZ2V0KCdlbWFpbCcpICYmIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAnbGknLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBudWxsLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICB1c2VyLmdldCgnZW1haWwnKVxuXHQgICAgICAgICAgICAgICAgICAgICksXG5cdCAgICAgICAgICAgICAgICAgICAgdXNlci5nZXQoJ2Jsb2cnKSAmJiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgICAgICAgICAgICAgJ2xpJyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdXNlci5nZXQoJ2Jsb2cnKVxuXHQgICAgICAgICAgICAgICAgICAgICksXG5cdCAgICAgICAgICAgICAgICAgICAgdXNlci5nZXQoJ2JpbycpICYmIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAnbGknLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBudWxsLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICB1c2VyLmdldCgnYmlvJylcblx0ICAgICAgICAgICAgICAgICAgICApLFxuXHQgICAgICAgICAgICAgICAgICAgIHVzZXIuZ2V0KCdoaXJlYWJsZScpICYmIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAnbGknLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBudWxsLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICB1c2VyLmdldCgnaGlyZWFibGUnKVxuXHQgICAgICAgICAgICAgICAgICAgIClcblx0ICAgICAgICAgICAgICAgIClcblx0ICAgICAgICAgICAgKVxuXHQgICAgICAgICksXG5cdCAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICAgICdkaXYnLFxuXHQgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ3JlcHMtd3JhcCcgfSxcblx0ICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICAgICAgICAnaDInLFxuXHQgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdyZXBzLXRpdGxlJyB9LFxuXHQgICAgICAgICAgICAgICAgJ1BvcHVsYXIgcmVwb3NpdG9yaWVzJ1xuXHQgICAgICAgICAgICApLFxuXHQgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgICAgIExpc3QsXG5cdCAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ3VzZXItcmVwcycgfSxcblx0ICAgICAgICAgICAgICAgIHJlcHMubWFwKGZ1bmN0aW9uIChyZXAsIGlkeCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBpZHggPD0gNSAmJiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgICAgICAgICAgICAgSXRlbSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgeyBrZXk6IHJlcC5nZXQoJ2lkJykgfSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGl2Jyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnaXRlbS1pbm5lcicgfSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnaXRlbS10aXRsZSBmdWxsLW5hbWUnIH0sXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwLmdldCgnZnVsbF9uYW1lJylcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGl2Jyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ2l0ZW0tYWZ0ZXIgc3Rhci1jb3VudCcgfSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXAuZ2V0KCdzdGFyZ2F6ZXJzX2NvdW50JyksXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzcGFuJyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1xcdTI2MDUnXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuXHQgICAgICAgICAgICAgICAgICAgICAgICApXG5cdCAgICAgICAgICAgICAgICAgICAgKTtcblx0ICAgICAgICAgICAgICAgIH0pXG5cdCAgICAgICAgICAgIClcblx0ICAgICAgICApXG5cdCAgICApO1xuXHR9O1xuXHRcblx0T3ZlclZpZXcucHJvcFR5cGVzID0ge1xuXHQgICAgdXNlcjogX3JlYWN0Mi5kZWZhdWx0LlByb3BUeXBlcy5pbnN0YW5jZU9mKF9pbW11dGFibGUyLmRlZmF1bHQuTWFwKSxcblx0ICAgIHJlcHM6IF9yZWFjdDIuZGVmYXVsdC5Qcm9wVHlwZXMuaW5zdGFuY2VPZihfaW1tdXRhYmxlMi5kZWZhdWx0Lkxpc3QpLFxuXHQgICAgaXNGZXRjaGluZzogX3JlYWN0Mi5kZWZhdWx0LlByb3BUeXBlcy5ib29sXG5cdH07XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSBPdmVyVmlldztcblxuLyoqKi8gfSxcblxuLyoqKi8gNzc0OlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMwMCk7XG5cdFxuXHR2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblx0XG5cdHZhciBfaW1tdXRhYmxlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MzEpO1xuXHRcblx0dmFyIF9pbW11dGFibGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW1tdXRhYmxlKTtcblx0XG5cdHZhciBfTGlzdEJsb2NrID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NDIpO1xuXHRcblx0dmFyIF9MaXN0QmxvY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTGlzdEJsb2NrKTtcblx0XG5cdHZhciBfVXNlclBsYWNlaG9sZGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NzUpO1xuXHRcblx0dmFyIF9Vc2VyUGxhY2Vob2xkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVXNlclBsYWNlaG9sZGVyKTtcblx0XG5cdHZhciBfTGFuZ3VhZ2VDb2xvciA9IF9fd2VicGFja19yZXF1aXJlX18oNzc2KTtcblx0XG5cdHZhciBfTGFuZ3VhZ2VDb2xvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9MYW5ndWFnZUNvbG9yKTtcblx0XG5cdHZhciBfTG9hZGluZyA9IF9fd2VicGFja19yZXF1aXJlX18oNzU5KTtcblx0XG5cdHZhciBfTG9hZGluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Mb2FkaW5nKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHR2YXIgTGlzdCA9IF9MaXN0QmxvY2syLmRlZmF1bHQuTGlzdCxcblx0ICAgIEl0ZW0gPSBfTGlzdEJsb2NrMi5kZWZhdWx0Lkl0ZW07XG5cdFxuXHRcblx0dmFyIFJlcG9zaXRvcmllcyA9IGZ1bmN0aW9uIFJlcG9zaXRvcmllcyhfcmVmKSB7XG5cdCAgICB2YXIgcmVwcyA9IF9yZWYucmVwcyxcblx0ICAgICAgICBwbGFjZWhvbGRlciA9IF9yZWYucGxhY2Vob2xkZXIsXG5cdCAgICAgICAgaXNGZXRjaGluZyA9IF9yZWYuaXNGZXRjaGluZztcblx0ICAgIHJldHVybiBpc0ZldGNoaW5nID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0xvYWRpbmcyLmRlZmF1bHQsIG51bGwpIDogcmVwcy5zaXplICE9PSAwID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgTGlzdCxcblx0ICAgICAgICB7IGNsYXNzTmFtZTogJ3JlcG9zaXRvcmllcycgfSxcblx0ICAgICAgICByZXBzLm1hcChmdW5jdGlvbiAocmVwKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgICAgIEl0ZW0sXG5cdCAgICAgICAgICAgICAgICB7IGtleTogcmVwLmdldCgnaWQnKSB9LFxuXHQgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG5cdCAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdpdGVtLWlubmVyJyB9LFxuXHQgICAgICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAnZGl2Jyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdpdGVtLXRpdGxlIGZ1bGwtbmFtZScgfSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmVwLmdldCgnZnVsbF9uYW1lJylcblx0ICAgICAgICAgICAgICAgICAgICApLFxuXHQgICAgICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAnZGl2Jyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdzdGFyLWxhbmd1YWdlJyB9LFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdzdGFyLWNvdW50JyB9LFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3NwYW4nLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGwsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1xcdTI2MDUnXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwLmdldCgnc3RhcmdhemVyc19jb3VudCcpXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICksXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9MYW5ndWFnZUNvbG9yMi5kZWZhdWx0LCB7IGxhbmd1YWdlOiByZXAuZ2V0KCdsYW5ndWFnZScpIH0pXG5cdCAgICAgICAgICAgICAgICAgICAgKVxuXHQgICAgICAgICAgICAgICAgKVxuXHQgICAgICAgICAgICApO1xuXHQgICAgICAgIH0pXG5cdCAgICApIDogX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1VzZXJQbGFjZWhvbGRlcjIuZGVmYXVsdCwgeyB0ZXh0OiBwbGFjZWhvbGRlciB9KTtcblx0fTtcblx0XG5cdFJlcG9zaXRvcmllcy5wcm9wVHlwZXMgPSB7XG5cdCAgICByZXBzOiBfcmVhY3QyLmRlZmF1bHQuUHJvcFR5cGVzLmluc3RhbmNlT2YoX2ltbXV0YWJsZTIuZGVmYXVsdC5MaXN0KSxcblx0ICAgIHBsYWNlaG9sZGVyOiBfcmVhY3QyLmRlZmF1bHQuUHJvcFR5cGVzLnN0cmluZyxcblx0ICAgIGlzRmV0Y2hpbmc6IF9yZWFjdDIuZGVmYXVsdC5Qcm9wVHlwZXMuYm9vbFxuXHR9O1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gUmVwb3NpdG9yaWVzO1xuXG4vKioqLyB9LFxuXG4vKioqLyA3NzU6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMzAwKTtcblx0XG5cdHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXHRcblx0X193ZWJwYWNrX3JlcXVpcmVfXyg3NTcpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdHZhciBVc2VyUGxhY2Vob2xkZXIgPSBmdW5jdGlvbiBVc2VyUGxhY2Vob2xkZXIoX3JlZikge1xuXHQgICAgdmFyIHRleHQgPSBfcmVmLnRleHQ7XG5cdCAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgJ2RpdicsXG5cdCAgICAgICAgeyBjbGFzc05hbWU6ICd1c2VyLXBsYWNlaG9sZGVyJyB9LFxuXHQgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgICAnZGl2Jyxcblx0ICAgICAgICAgICAgeyBjbGFzc05hbWU6ICd3cmFwJyB9LFxuXHQgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgICAgICdwJyxcblx0ICAgICAgICAgICAgICAgIG51bGwsXG5cdCAgICAgICAgICAgICAgICAnWW91IGRvblxcJ3QgaGF2ZSBhbnkgJyxcblx0ICAgICAgICAgICAgICAgIHRleHQsXG5cdCAgICAgICAgICAgICAgICAnIHlldC4nXG5cdCAgICAgICAgICAgIClcblx0ICAgICAgICApXG5cdCAgICApO1xuXHR9O1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gVXNlclBsYWNlaG9sZGVyO1xuXG4vKioqLyB9LFxuXG4vKioqLyA3NzY6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24obW9kdWxlKSB7J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfaW5kZXggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU3OSk7XG5cdFxuXHR2YXIgX2luZGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luZGV4KTtcblx0XG5cdHZhciBfaW5kZXgzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1ODQpO1xuXHRcblx0dmFyIF9pbmRleDQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmRleDMpO1xuXHRcblx0dmFyIF9yZWFjdDIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMwMCk7XG5cdFxuXHR2YXIgX3JlYWN0MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0Mik7XG5cdFxuXHR2YXIgX2luZGV4NSA9IF9fd2VicGFja19yZXF1aXJlX18oNTg1KTtcblx0XG5cdHZhciBfaW5kZXg2ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5kZXg1KTtcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cdFxuXHR2YXIgX2xhbmd1YWdlQ29sb3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc3Nyk7XG5cdFxuXHR2YXIgX2xhbmd1YWdlQ29sb3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbGFuZ3VhZ2VDb2xvcik7XG5cdFxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDc3OSk7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblx0XG5cdGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXHRcblx0ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cdFxuXHR2YXIgX2NvbXBvbmVudHMgPSB7XG5cdCAgICBMYW5ndWFnZUNvbG9yOiB7XG5cdCAgICAgICAgZGlzcGxheU5hbWU6ICdMYW5ndWFnZUNvbG9yJ1xuXHQgICAgfVxuXHR9O1xuXHRcblx0dmFyIF9ob21lVHJhdmlzQnVpbGRHb3VtYW5nMjAxMFJlYWN0UmVkdXhHaXRodWJOb2RlX21vZHVsZXNSZWFjdFRyYW5zZm9ybUhtckxpYkluZGV4SnMyID0gKDAsIF9pbmRleDYuZGVmYXVsdCkoe1xuXHQgICAgZmlsZW5hbWU6ICcvaG9tZS90cmF2aXMvYnVpbGQvZ291bWFuZzIwMTAvcmVhY3QtcmVkdXgtZ2l0aHViL3NyYy9jb21wb25lbnRzL0xhbmd1YWdlQ29sb3IvaW5kZXguanN4Jyxcblx0ICAgIGNvbXBvbmVudHM6IF9jb21wb25lbnRzLFxuXHQgICAgbG9jYWxzOiBbbW9kdWxlXSxcblx0ICAgIGltcG9ydHM6IFtfcmVhY3QzLmRlZmF1bHRdXG5cdH0pO1xuXHRcblx0dmFyIF9ob21lVHJhdmlzQnVpbGRHb3VtYW5nMjAxMFJlYWN0UmVkdXhHaXRodWJOb2RlX21vZHVsZXNSZWFjdFRyYW5zZm9ybUNhdGNoRXJyb3JzTGliSW5kZXhKczIgPSAoMCwgX2luZGV4NC5kZWZhdWx0KSh7XG5cdCAgICBmaWxlbmFtZTogJy9ob21lL3RyYXZpcy9idWlsZC9nb3VtYW5nMjAxMC9yZWFjdC1yZWR1eC1naXRodWIvc3JjL2NvbXBvbmVudHMvTGFuZ3VhZ2VDb2xvci9pbmRleC5qc3gnLFxuXHQgICAgY29tcG9uZW50czogX2NvbXBvbmVudHMsXG5cdCAgICBsb2NhbHM6IFtdLFxuXHQgICAgaW1wb3J0czogW19yZWFjdDMuZGVmYXVsdCwgX2luZGV4Mi5kZWZhdWx0XVxuXHR9KTtcblx0XG5cdGZ1bmN0aW9uIF93cmFwQ29tcG9uZW50KGlkKSB7XG5cdCAgICByZXR1cm4gZnVuY3Rpb24gKENvbXBvbmVudCkge1xuXHQgICAgICAgIHJldHVybiBfaG9tZVRyYXZpc0J1aWxkR291bWFuZzIwMTBSZWFjdFJlZHV4R2l0aHViTm9kZV9tb2R1bGVzUmVhY3RUcmFuc2Zvcm1IbXJMaWJJbmRleEpzMihfaG9tZVRyYXZpc0J1aWxkR291bWFuZzIwMTBSZWFjdFJlZHV4R2l0aHViTm9kZV9tb2R1bGVzUmVhY3RUcmFuc2Zvcm1DYXRjaEVycm9yc0xpYkluZGV4SnMyKENvbXBvbmVudCwgaWQpLCBpZCk7XG5cdCAgICB9O1xuXHR9XG5cdFxuXHR2YXIgTGFuZ3VhZ2VDb2xvciA9IF93cmFwQ29tcG9uZW50KCdMYW5ndWFnZUNvbG9yJykoZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcblx0ICAgIF9pbmhlcml0cyhMYW5ndWFnZUNvbG9yLCBfUmVhY3QkQ29tcG9uZW50KTtcblx0XG5cdCAgICBmdW5jdGlvbiBMYW5ndWFnZUNvbG9yKHByb3BzKSB7XG5cdCAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExhbmd1YWdlQ29sb3IpO1xuXHRcblx0ICAgICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoTGFuZ3VhZ2VDb2xvci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExhbmd1YWdlQ29sb3IpKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cdFxuXHQgICAgICAgIF90aGlzLnN0YXRlID0ge1xuXHQgICAgICAgICAgICBjb2xvcjogJydcblx0ICAgICAgICB9O1xuXHRcblx0ICAgICAgICByZXR1cm4gX3RoaXM7XG5cdCAgICB9XG5cdFxuXHQgICAgX2NyZWF0ZUNsYXNzKExhbmd1YWdlQ29sb3IsIFt7XG5cdCAgICAgICAga2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcblx0ICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cdFxuXHQgICAgICAgICAgICBfbGFuZ3VhZ2VDb2xvcjIuZGVmYXVsdC5tYXAoZnVuY3Rpb24gKGNvbG9yLCBsYW4pIHtcblx0ICAgICAgICAgICAgICAgIGlmIChsYW4gPT09IF90aGlzMi5wcm9wcy5sYW5ndWFnZSkge1xuXHQgICAgICAgICAgICAgICAgICAgIF90aGlzMi5zZXRTdGF0ZSh7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBjb2xvclxuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAncmVuZGVyJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuXHQgICAgICAgICAgICB2YXIgbGFuZ3VhZ2UgPSB0aGlzLnByb3BzLmxhbmd1YWdlLFxuXHQgICAgICAgICAgICAgICAgY29sb3IgPSB0aGlzLnN0YXRlLmNvbG9yO1xuXHRcblx0ICAgICAgICAgICAgcmV0dXJuIF9yZWFjdDMuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgICAgICAgJ2RpdicsXG5cdCAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ2xhbmd1YWdlLWNvbG9yJyB9LFxuXHQgICAgICAgICAgICAgICAgX3JlYWN0My5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcblx0ICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdjb2xvcicsXG5cdCAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHsgYmFja2dyb3VuZENvbG9yOiBjb2xvciB9IH0pLFxuXHQgICAgICAgICAgICAgICAgX3JlYWN0My5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG5cdCAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdsYW5ndWFnZScgfSxcblx0ICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZVxuXHQgICAgICAgICAgICAgICAgKVxuXHQgICAgICAgICAgICApO1xuXHQgICAgICAgIH1cblx0ICAgIH1dKTtcblx0XG5cdCAgICByZXR1cm4gTGFuZ3VhZ2VDb2xvcjtcblx0fShfcmVhY3QzLmRlZmF1bHQuQ29tcG9uZW50KSk7XG5cdFxuXHRMYW5ndWFnZUNvbG9yLnByb3BUeXBlcyA9IHtcblx0ICAgIGxhbmd1YWdlOiBfcmVhY3QzLmRlZmF1bHQuUHJvcFR5cGVzLnN0cmluZ1xuXHR9O1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gTGFuZ3VhZ2VDb2xvcjtcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oNDk2KShtb2R1bGUpKSlcblxuLyoqKi8gfSxcblxuLyoqKi8gNzc3OlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF90b0ltbXV0YWJsZSA9IF9fd2VicGFja19yZXF1aXJlX18oNzc4KTtcblx0XG5cdHZhciBfdG9JbW11dGFibGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdG9JbW11dGFibGUpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdHZhciBsYW5ndWFnZUNvbG9yID0ge1xuXHQgICAgXCJNZXJjdXJ5XCI6IFwiI2ZmMmIyYlwiLFxuXHQgICAgXCJUeXBlU2NyaXB0XCI6IFwiIzJiNzQ4OVwiLFxuXHQgICAgXCJQdXJlQmFzaWNcIjogXCIjNWE2OTg2XCIsXG5cdCAgICBcIk9iamVjdGl2ZS1DKytcIjogXCIjNjg2NmZiXCIsXG5cdCAgICBcIlNlbGZcIjogXCIjMDU3OWFhXCIsXG5cdCAgICBcImVkblwiOiBcIiNkYjU4NTVcIixcblx0ICAgIFwiTmV3TGlzcFwiOiBcIiM4N0FFRDdcIixcblx0ICAgIFwiSnVweXRlciBOb3RlYm9va1wiOiBcIiNEQTVCMEJcIixcblx0ICAgIFwiUmVib2xcIjogXCIjMzU4YTViXCIsXG5cdCAgICBcIkZyZWdlXCI6IFwiIzAwY2FmZVwiLFxuXHQgICAgXCJEYXJ0XCI6IFwiIzAwQjRBQlwiLFxuXHQgICAgXCJBc3BlY3RKXCI6IFwiI2E5NTdiMFwiLFxuXHQgICAgXCJTaGVsbFwiOiBcIiM4OWUwNTFcIixcblx0ICAgIFwiV2ViIE9udG9sb2d5IExhbmd1YWdlXCI6IFwiIzljYzlkZFwiLFxuXHQgICAgXCJ4QmFzZVwiOiBcIiM0MDNhNDBcIixcblx0ICAgIFwiRWlmZmVsXCI6IFwiIzk0NmQ1N1wiLFxuXHQgICAgXCJOaXhcIjogXCIjN2U3ZWZmXCIsXG5cdCAgICBcIlJBTUxcIjogXCIjNzdkOWZiXCIsXG5cdCAgICBcIk1UTUxcIjogXCIjYjdlMWY0XCIsXG5cdCAgICBcIlJhY2tldFwiOiBcIiMyMjIyOGZcIixcblx0ICAgIFwiRWxpeGlyXCI6IFwiIzZlNGE3ZVwiLFxuXHQgICAgXCJTQVNcIjogXCIjQjM0OTM2XCIsXG5cdCAgICBcIkFnZGFcIjogXCIjMzE1NjY1XCIsXG5cdCAgICBcIndpc3BcIjogXCIjNzU4MkQxXCIsXG5cdCAgICBcIkRcIjogXCIjYmE1OTVlXCIsXG5cdCAgICBcIktvdGxpblwiOiBcIiNGMThFMzNcIixcblx0ICAgIFwiT3BhbFwiOiBcIiNmN2VkZTBcIixcblx0ICAgIFwiQ3J5c3RhbFwiOiBcIiM3NzY3OTFcIixcblx0ICAgIFwiT2JqZWN0aXZlLUNcIjogXCIjNDM4ZWZmXCIsXG5cdCAgICBcIkNvbGRGdXNpb24gQ0ZDXCI6IFwiI2VkMmNkNlwiLFxuXHQgICAgXCJPelwiOiBcIiNmYWI3MzhcIixcblx0ICAgIFwiTWlyYWhcIjogXCIjYzdhOTM4XCIsXG5cdCAgICBcIk9iamVjdGl2ZS1KXCI6IFwiI2ZmMGM1YVwiLFxuXHQgICAgXCJHb3N1XCI6IFwiIzgyOTM3ZlwiLFxuXHQgICAgXCJGcmVlTWFya2VyXCI6IFwiIzAwNTBiMlwiLFxuXHQgICAgXCJSdWJ5XCI6IFwiIzcwMTUxNlwiLFxuXHQgICAgXCJDb21wb25lbnQgUGFzY2FsXCI6IFwiI2IwY2U0ZVwiLFxuXHQgICAgXCJBcmNcIjogXCIjYWEyYWZlXCIsXG5cdCAgICBcIkJyYWluZnVja1wiOiBcIiMyRjI1MzBcIixcblx0ICAgIFwiTml0XCI6IFwiIzAwOTkxN1wiLFxuXHQgICAgXCJBUExcIjogXCIjNUE4MTY0XCIsXG5cdCAgICBcIkdvXCI6IFwiIzM3NWVhYlwiLFxuXHQgICAgXCJWaXN1YWwgQmFzaWNcIjogXCIjOTQ1ZGI3XCIsXG5cdCAgICBcIlBIUFwiOiBcIiM0RjVEOTVcIixcblx0ICAgIFwiQ2lycnVcIjogXCIjY2NjY2ZmXCIsXG5cdCAgICBcIlNRRlwiOiBcIiMzRjNGM0ZcIixcblx0ICAgIFwiR2x5cGhcIjogXCIjZTRjYzk4XCIsXG5cdCAgICBcIkphdmFcIjogXCIjYjA3MjE5XCIsXG5cdCAgICBcIk1BWFNjcmlwdFwiOiBcIiMwMGE2YTZcIixcblx0ICAgIFwiU2NhbGFcIjogXCIjREMzMjJGXCIsXG5cdCAgICBcIk1ha2VmaWxlXCI6IFwiIzQyNzgxOVwiLFxuXHQgICAgXCJDb2xkRnVzaW9uXCI6IFwiI2VkMmNkNlwiLFxuXHQgICAgXCJQZXJsXCI6IFwiIzAyOThjM1wiLFxuXHQgICAgXCJMdWFcIjogXCIjMDAwMDgwXCIsXG5cdCAgICBcIlZ1ZVwiOiBcIiMyYzNlNTBcIixcblx0ICAgIFwiVmVyaWxvZ1wiOiBcIiNiMmI3ZjhcIixcblx0ICAgIFwiRmFjdG9yXCI6IFwiIzYzNjc0NlwiLFxuXHQgICAgXCJIYXhlXCI6IFwiI2RmNzkwMFwiLFxuXHQgICAgXCJQdXJlIERhdGFcIjogXCIjOTFkZTc5XCIsXG5cdCAgICBcIkZvcnRoXCI6IFwiIzM0MTcwOFwiLFxuXHQgICAgXCJSZWRcIjogXCIjZWUwMDAwXCIsXG5cdCAgICBcIkh5XCI6IFwiIzc3OTBCMlwiLFxuXHQgICAgXCJWb2x0XCI6IFwiIzFGMUYxRlwiLFxuXHQgICAgXCJMU0xcIjogXCIjM2Q5OTcwXCIsXG5cdCAgICBcImVDXCI6IFwiIzkxMzk2MFwiLFxuXHQgICAgXCJDb2ZmZWVTY3JpcHRcIjogXCIjMjQ0Nzc2XCIsXG5cdCAgICBcIkhUTUxcIjogXCIjZTQ0YjIzXCIsXG5cdCAgICBcIkxleFwiOiBcIiNEQkNBMDBcIixcblx0ICAgIFwiQVBJIEJsdWVwcmludFwiOiBcIiMyQUNDQThcIixcblx0ICAgIFwiU3dpZnRcIjogXCIjZmZhYzQ1XCIsXG5cdCAgICBcIkNcIjogXCIjNTU1NTU1XCIsXG5cdCAgICBcIkF1dG9Ib3RrZXlcIjogXCIjNjU5NGI5XCIsXG5cdCAgICBcIklzYWJlbGxlXCI6IFwiI0ZFRkUwMFwiLFxuXHQgICAgXCJNZXRhbFwiOiBcIiM4ZjE0ZTlcIixcblx0ICAgIFwiQ2xhcmlvblwiOiBcIiNkYjkwMWVcIixcblx0ICAgIFwiSlNPTmlxXCI6IFwiIzQwZDQ3ZVwiLFxuXHQgICAgXCJCb29cIjogXCIjZDRiZWMxXCIsXG5cdCAgICBcIkF1dG9JdFwiOiBcIiMxQzM1NTJcIixcblx0ICAgIFwiQ2xvanVyZVwiOiBcIiNkYjU4NTVcIixcblx0ICAgIFwiUnVzdFwiOiBcIiNkZWE1ODRcIixcblx0ICAgIFwiUHJvbG9nXCI6IFwiIzc0MjgzY1wiLFxuXHQgICAgXCJTb3VyY2VQYXduXCI6IFwiIzVjNzYxMVwiLFxuXHQgICAgXCJBTVBMXCI6IFwiI0U2RUZCQlwiLFxuXHQgICAgXCJGT1JUUkFOXCI6IFwiIzRkNDFiMVwiLFxuXHQgICAgXCJBTlRMUlwiOiBcIiM5REMzRkZcIixcblx0ICAgIFwiSGFyYm91clwiOiBcIiMwZTYwZTNcIixcblx0ICAgIFwiVGNsXCI6IFwiI2U0Y2M5OFwiLFxuXHQgICAgXCJCbGl0ek1heFwiOiBcIiNjZDY0MDBcIixcblx0ICAgIFwiUGlnTGF0aW5cIjogXCIjZmNkN2RlXCIsXG5cdCAgICBcIkxhc3NvXCI6IFwiIzk5OTk5OVwiLFxuXHQgICAgXCJFQ0xcIjogXCIjOGExMjY3XCIsXG5cdCAgICBcIlZIRExcIjogXCIjYWRiMmNiXCIsXG5cdCAgICBcIkVsbVwiOiBcIiM2MEI1Q0NcIixcblx0ICAgIFwiUHJvcGVsbGVyIFNwaW5cIjogXCIjN2ZhMmE3XCIsXG5cdCAgICBcIlgxMFwiOiBcIiM0QjZCRUZcIixcblx0ICAgIFwiSURMXCI6IFwiI2EzNTIyZlwiLFxuXHQgICAgXCJBVFNcIjogXCIjMWFjNjIwXCIsXG5cdCAgICBcIkFkYVwiOiBcIiMwMmY4OGNcIixcblx0ICAgIFwiVW5pdHkzRCBBc3NldFwiOiBcIiNhYjY5YTFcIixcblx0ICAgIFwiTnVcIjogXCIjYzlkZjQwXCIsXG5cdCAgICBcIkxGRVwiOiBcIiMwMDQyMDBcIixcblx0ICAgIFwiU3VwZXJDb2xsaWRlclwiOiBcIiM0NjM5MGJcIixcblx0ICAgIFwiT3h5Z2VuZVwiOiBcIiNjZGQwZTNcIixcblx0ICAgIFwiQVNQXCI6IFwiIzZhNDBmZFwiLFxuXHQgICAgXCJBc3NlbWJseVwiOiBcIiM2RTRDMTNcIixcblx0ICAgIFwiR251cGxvdFwiOiBcIiNmMGE5ZjBcIixcblx0ICAgIFwiSkZsZXhcIjogXCIjREJDQTAwXCIsXG5cdCAgICBcIk5ldExpbnhcIjogXCIjMGFhMGZmXCIsXG5cdCAgICBcIlR1cmluZ1wiOiBcIiM0NWY3MTVcIixcblx0ICAgIFwiVmFsYVwiOiBcIiNmYmU1Y2RcIixcblx0ICAgIFwiUHJvY2Vzc2luZ1wiOiBcIiMwMDk2RDhcIixcblx0ICAgIFwiQXJkdWlub1wiOiBcIiNiZDc5ZDFcIixcblx0ICAgIFwiRkxVWFwiOiBcIiM4OGNjZmZcIixcblx0ICAgIFwiTmV0TG9nb1wiOiBcIiNmZjYzNzVcIixcblx0ICAgIFwiQyBTaGFycFwiOiBcIiMxNzg2MDBcIixcblx0ICAgIFwiQ1NTXCI6IFwiIzU2M2Q3Y1wiLFxuXHQgICAgXCJFbWFjcyBMaXNwXCI6IFwiI2MwNjVkYlwiLFxuXHQgICAgXCJTdGFuXCI6IFwiI2IyMDExZFwiLFxuXHQgICAgXCJTYWx0U3RhY2tcIjogXCIjNjQ2NDY0XCIsXG5cdCAgICBcIlFNTFwiOiBcIiM0NGE1MWNcIixcblx0ICAgIFwiUGlrZVwiOiBcIiMwMDUzOTBcIixcblx0ICAgIFwiTE9MQ09ERVwiOiBcIiNjYzk5MDBcIixcblx0ICAgIFwib29jXCI6IFwiI2IwYjc3ZVwiLFxuXHQgICAgXCJIYW5kbGViYXJzXCI6IFwiIzAxYTlkNlwiLFxuXHQgICAgXCJKXCI6IFwiIzlFRURGRlwiLFxuXHQgICAgXCJNYXNrXCI6IFwiI2Y5NzczMlwiLFxuXHQgICAgXCJFbWJlclNjcmlwdFwiOiBcIiNGRkY0RjNcIixcblx0ICAgIFwiVGVYXCI6IFwiIzNENjExN1wiLFxuXHQgICAgXCJOZW1lcmxlXCI6IFwiIzNkM2M2ZVwiLFxuXHQgICAgXCJLUkxcIjogXCIjMjg0MzFmXCIsXG5cdCAgICBcIlJlbidQeVwiOiBcIiNmZjdmN2ZcIixcblx0ICAgIFwiVW5pZmllZCBQYXJhbGxlbCBDXCI6IFwiIzRlMzYxN1wiLFxuXHQgICAgXCJHb2xvXCI6IFwiIzg4NTYyQVwiLFxuXHQgICAgXCJGYW5jeVwiOiBcIiM3YjlkYjRcIixcblx0ICAgIFwiT0NhbWxcIjogXCIjM2JlMTMzXCIsXG5cdCAgICBcIlNoZW5cIjogXCIjMTIwRjE0XCIsXG5cdCAgICBcIlBhc2NhbFwiOiBcIiNiMGNlNGVcIixcblx0ICAgIFwiRiNcIjogXCIjYjg0NWZjXCIsXG5cdCAgICBcIlB1cHBldFwiOiBcIiMzMDJCNkRcIixcblx0ICAgIFwiQWN0aW9uU2NyaXB0XCI6IFwiIzg4MkIwRlwiLFxuXHQgICAgXCJEaWZmXCI6IFwiIzg4ZGRkZFwiLFxuXHQgICAgXCJSYWdlbCBpbiBSdWJ5IEhvc3RcIjogXCIjOWQ1MjAwXCIsXG5cdCAgICBcIkZhbnRvbVwiOiBcIiNkYmRlZDVcIixcblx0ICAgIFwiWmVwaGlyXCI6IFwiIzExOGY5ZVwiLFxuXHQgICAgXCJDbGlja1wiOiBcIiNFNEU2RjNcIixcblx0ICAgIFwiU21hbGx0YWxrXCI6IFwiIzU5NjcwNlwiLFxuXHQgICAgXCJETVwiOiBcIiM0NDcyNjVcIixcblx0ICAgIFwiSW9rZVwiOiBcIiMwNzgxOTNcIixcblx0ICAgIFwiUG9nb1NjcmlwdFwiOiBcIiNkODAwNzRcIixcblx0ICAgIFwiTGl2ZVNjcmlwdFwiOiBcIiM0OTk4ODZcIixcblx0ICAgIFwiSmF2YVNjcmlwdFwiOiBcIiNmMWUwNWFcIixcblx0ICAgIFwiVmltTFwiOiBcIiMxOTlmNGJcIixcblx0ICAgIFwiUHVyZVNjcmlwdFwiOiBcIiMxRDIyMkRcIixcblx0ICAgIFwiQUJBUFwiOiBcIiNFODI3NEJcIixcblx0ICAgIFwiTWF0bGFiXCI6IFwiI2JiOTJhY1wiLFxuXHQgICAgXCJTbGFzaFwiOiBcIiMwMDdlZmZcIixcblx0ICAgIFwiUlwiOiBcIiMxOThjZTdcIixcblx0ICAgIFwiRXJsYW5nXCI6IFwiI0I4Mzk5OFwiLFxuXHQgICAgXCJQYW5cIjogXCIjY2MwMDAwXCIsXG5cdCAgICBcIkxvb2tNTFwiOiBcIiM2NTJCODFcIixcblx0ICAgIFwiRWFnbGVcIjogXCIjODE0QzA1XCIsXG5cdCAgICBcIlNjaGVtZVwiOiBcIiMxZTRhZWNcIixcblx0ICAgIFwiUExTUUxcIjogXCIjZGFkOGQ4XCIsXG5cdCAgICBcIlB5dGhvblwiOiBcIiMzNTcyQTVcIixcblx0ICAgIFwiTWF4XCI6IFwiI2M0YTc5Y1wiLFxuXHQgICAgXCJDb21tb24gTGlzcFwiOiBcIiMzZmI2OGJcIixcblx0ICAgIFwiTGF0dGVcIjogXCIjQThGRjk3XCIsXG5cdCAgICBcIlhRdWVyeVwiOiBcIiM1MjMyZTdcIixcblx0ICAgIFwiT21ncm9mbFwiOiBcIiNjYWJiZmZcIixcblx0ICAgIFwiWENcIjogXCIjOTlEQTA3XCIsXG5cdCAgICBcIk5pbXJvZFwiOiBcIiMzNzc3NWJcIixcblx0ICAgIFwiU3lzdGVtVmVyaWxvZ1wiOiBcIiNEQUUxQzJcIixcblx0ICAgIFwiQ2hhcGVsXCI6IFwiIzhkYzYzZlwiLFxuXHQgICAgXCJHcm9vdnlcIjogXCIjZTY5ZjU2XCIsXG5cdCAgICBcIkR5bGFuXCI6IFwiIzZjNjE2ZVwiLFxuXHQgICAgXCJFXCI6IFwiI2NjY2UzNVwiLFxuXHQgICAgXCJQYXJyb3RcIjogXCIjZjNjYTBhXCIsXG5cdCAgICBcIkdyYW1tYXRpY2FsIEZyYW1ld29ya1wiOiBcIiM3OWFhN2FcIixcblx0ICAgIFwiR2FtZSBNYWtlciBMYW5ndWFnZVwiOiBcIiM4ZmIyMDBcIixcblx0ICAgIFwiUGFweXJ1c1wiOiBcIiM2NjAwY2NcIixcblx0ICAgIFwiTmV0TGlueCtFUkJcIjogXCIjNzQ3ZmFhXCIsXG5cdCAgICBcIkNsZWFuXCI6IFwiIzNGODVBRlwiLFxuXHQgICAgXCJBbGxveVwiOiBcIiM2NEM4MDBcIixcblx0ICAgIFwiU3F1aXJyZWxcIjogXCIjODAwMDAwXCIsXG5cdCAgICBcIlBBV05cIjogXCIjZGJiMjg0XCIsXG5cdCAgICBcIlVucmVhbFNjcmlwdFwiOiBcIiNhNTRjNGRcIixcblx0ICAgIFwiU3RhbmRhcmQgTUxcIjogXCIjZGM1NjZkXCIsXG5cdCAgICBcIlNsaW1cIjogXCIjZmY4Zjc3XCIsXG5cdCAgICBcIlBlcmw2XCI6IFwiIzAwMDBmYlwiLFxuXHQgICAgXCJKdWxpYVwiOiBcIiNhMjcwYmFcIixcblx0ICAgIFwiSGFza2VsbFwiOiBcIiMyOWI1NDRcIixcblx0ICAgIFwiTkNMXCI6IFwiIzI4NDMxZlwiLFxuXHQgICAgXCJJb1wiOiBcIiNhOTE4OGRcIixcblx0ICAgIFwiUm91Z2VcIjogXCIjY2MwMDg4XCIsXG5cdCAgICBcImNwcFwiOiBcIiNmMzRiN2RcIixcblx0ICAgIFwiQUdTIFNjcmlwdFwiOiBcIiNCOUQ5RkZcIixcblx0ICAgIFwiRG9nZXNjcmlwdFwiOiBcIiNjY2E3NjBcIixcblx0ICAgIFwibmVzQ1wiOiBcIiM5NEIwQzdcIixcblx0ICAgIFwiQyNcIjogXCIjMTc4NjAwXCJcblx0fTtcblx0XG5cdGxhbmd1YWdlQ29sb3IgPSAoMCwgX3RvSW1tdXRhYmxlMi5kZWZhdWx0KShsYW5ndWFnZUNvbG9yKTtcblx0XG5cdGV4cG9ydHMuZGVmYXVsdCA9IGxhbmd1YWdlQ29sb3I7XG5cbi8qKiovIH0sXG5cbi8qKiovIDc3OTpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cdFxuXHQvLyBsb2FkIHRoZSBzdHlsZXNcblx0dmFyIGNvbnRlbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc4MCk7XG5cdGlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXHQvLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG5cdHZhciB1cGRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ3MCkoY29udGVudCwge30pO1xuXHRpZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcblx0Ly8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuXHRpZih0cnVlKSB7XG5cdFx0Ly8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0XHRpZighY29udGVudC5sb2NhbHMpIHtcblx0XHRcdG1vZHVsZS5ob3QuYWNjZXB0KDc4MCwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBuZXdDb250ZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3ODApO1xuXHRcdFx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblx0XHRcdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0XHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcblx0fVxuXG4vKioqLyB9LFxuXG4vKioqLyA3ODA6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ2OCkoKTtcblx0Ly8gaW1wb3J0c1xuXHRcblx0XG5cdC8vIG1vZHVsZVxuXHRleHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIubGFuZ3VhZ2UtY29sb3J7cG9zaXRpb246cmVsYXRpdmV9Lmxhbmd1YWdlLWNvbG9yIC5jb2xvcntwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDouMTZyZW07aGVpZ2h0Oi4xNnJlbTtib3JkZXItcmFkaXVzOjUwJTtsZWZ0Oi4yNHJlbTt0b3A6LjA0cmVtfS5sYW5ndWFnZS1jb2xvciAubGFuZ3VhZ2V7cGFkZGluZy1sZWZ0Oi40NjY2NjdyZW07Zm9udC1zaXplOi4xNnJlbTtsaW5lLWhlaWdodDouMjUzMzMzcmVtfVwiLCBcIlwiXSk7XG5cdFxuXHQvLyBleHBvcnRzXG5cblxuLyoqKi8gfSxcblxuLyoqKi8gNzgxOlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMwMCk7XG5cdFxuXHR2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblx0XG5cdHZhciBfaW1tdXRhYmxlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MzEpO1xuXHRcblx0dmFyIF9pbW11dGFibGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW1tdXRhYmxlKTtcblx0XG5cdHZhciBfTGlzdEJsb2NrID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NDIpO1xuXHRcblx0dmFyIF9MaXN0QmxvY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTGlzdEJsb2NrKTtcblx0XG5cdHZhciBfVXNlclBsYWNlaG9sZGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NzUpO1xuXHRcblx0dmFyIF9Vc2VyUGxhY2Vob2xkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVXNlclBsYWNlaG9sZGVyKTtcblx0XG5cdHZhciBfTGFuZ3VhZ2VDb2xvciA9IF9fd2VicGFja19yZXF1aXJlX18oNzc2KTtcblx0XG5cdHZhciBfTGFuZ3VhZ2VDb2xvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9MYW5ndWFnZUNvbG9yKTtcblx0XG5cdHZhciBfTG9hZGluZyA9IF9fd2VicGFja19yZXF1aXJlX18oNzU5KTtcblx0XG5cdHZhciBfTG9hZGluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Mb2FkaW5nKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHR2YXIgTGlzdCA9IF9MaXN0QmxvY2syLmRlZmF1bHQuTGlzdCxcblx0ICAgIEl0ZW0gPSBfTGlzdEJsb2NrMi5kZWZhdWx0Lkl0ZW07XG5cdFxuXHRcblx0dmFyIFN0YXJzID0gZnVuY3Rpb24gU3RhcnMoX3JlZikge1xuXHQgICAgdmFyIHN0YXJzID0gX3JlZi5zdGFycyxcblx0ICAgICAgICBwbGFjZWhvbGRlciA9IF9yZWYucGxhY2Vob2xkZXIsXG5cdCAgICAgICAgaXNGZXRjaGluZyA9IF9yZWYuaXNGZXRjaGluZztcblx0ICAgIHJldHVybiBpc0ZldGNoaW5nID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0xvYWRpbmcyLmRlZmF1bHQsIG51bGwpIDogc3RhcnMuc2l6ZSAhPT0gMCA/IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgIExpc3QsXG5cdCAgICAgICAgeyBjbGFzc05hbWU6ICdzdGFycycgfSxcblx0ICAgICAgICBzdGFycy5tYXAoZnVuY3Rpb24gKHN0YXIpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgICAgICAgSXRlbSxcblx0ICAgICAgICAgICAgICAgIHsga2V5OiBzdGFyLmdldCgnaWQnKSB9LFxuXHQgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG5cdCAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdpdGVtLWlubmVyJyB9LFxuXHQgICAgICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAnZGl2Jyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdpdGVtLXRpdGxlIGZ1bGwtbmFtZScgfSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3Rhci5nZXQoJ2Z1bGxfbmFtZScpXG5cdCAgICAgICAgICAgICAgICAgICAgKSxcblx0ICAgICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnZGVzJyB9LFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBzdGFyLmdldCgnZGVzY3JpcHRpb24nKVxuXHQgICAgICAgICAgICAgICAgICAgICksXG5cdCAgICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ3N0YXItbGFuZ3VhZ2UnIH0sXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ3N0YXItY291bnQnIH0sXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc3BhbicsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnXFx1MjYwNSdcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFyLmdldCgnc3RhcmdhemVyc19jb3VudCcpXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICksXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9MYW5ndWFnZUNvbG9yMi5kZWZhdWx0LCB7IGxhbmd1YWdlOiBzdGFyLmdldCgnbGFuZ3VhZ2UnKSB9KVxuXHQgICAgICAgICAgICAgICAgICAgIClcblx0ICAgICAgICAgICAgICAgIClcblx0ICAgICAgICAgICAgKTtcblx0ICAgICAgICB9KVxuXHQgICAgKSA6IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Vc2VyUGxhY2Vob2xkZXIyLmRlZmF1bHQsIHsgdGV4dDogcGxhY2Vob2xkZXIgfSk7XG5cdH07XG5cdFxuXHRTdGFycy5wcm9wVHlwZXMgPSB7XG5cdCAgICBzdGFyczogX3JlYWN0Mi5kZWZhdWx0LlByb3BUeXBlcy5pbnN0YW5jZU9mKF9pbW11dGFibGUyLmRlZmF1bHQuTGlzdCksXG5cdCAgICBwbGFjZWhvbGRlcjogX3JlYWN0Mi5kZWZhdWx0LlByb3BUeXBlcy5zdHJpbmcsXG5cdCAgICBpc0ZldGNoaW5nOiBfcmVhY3QyLmRlZmF1bHQuUHJvcFR5cGVzLmJvb2xcblx0fTtcblx0XG5cdGV4cG9ydHMuZGVmYXVsdCA9IFN0YXJzO1xuXG4vKioqLyB9LFxuXG4vKioqLyA3ODI6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMzAwKTtcblx0XG5cdHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXHRcblx0dmFyIF9pbW11dGFibGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDczMSk7XG5cdFxuXHR2YXIgX2ltbXV0YWJsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbW11dGFibGUpO1xuXHRcblx0dmFyIF9MaXN0QmxvY2sgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc0Mik7XG5cdFxuXHR2YXIgX0xpc3RCbG9jazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9MaXN0QmxvY2spO1xuXHRcblx0dmFyIF9Vc2VyUGxhY2Vob2xkZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc3NSk7XG5cdFxuXHR2YXIgX1VzZXJQbGFjZWhvbGRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Vc2VyUGxhY2Vob2xkZXIpO1xuXHRcblx0dmFyIF9Mb2FkaW5nID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NTkpO1xuXHRcblx0dmFyIF9Mb2FkaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0xvYWRpbmcpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdHZhciBMaXN0ID0gX0xpc3RCbG9jazIuZGVmYXVsdC5MaXN0LFxuXHQgICAgSXRlbSA9IF9MaXN0QmxvY2syLmRlZmF1bHQuSXRlbTtcblx0XG5cdFxuXHR2YXIgRm9sbG93ZXJzID0gZnVuY3Rpb24gRm9sbG93ZXJzKF9yZWYpIHtcblx0ICAgIHZhciBmb2xsb3dlcnMgPSBfcmVmLmZvbGxvd2Vycyxcblx0ICAgICAgICBwbGFjZWhvbGRlciA9IF9yZWYucGxhY2Vob2xkZXIsXG5cdCAgICAgICAgaXNGZXRjaGluZyA9IF9yZWYuaXNGZXRjaGluZztcblx0ICAgIHJldHVybiBpc0ZldGNoaW5nID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0xvYWRpbmcyLmRlZmF1bHQsIG51bGwpIDogZm9sbG93ZXJzLnNpemUgIT09IDAgPyBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcblx0ICAgICAgICBMaXN0LFxuXHQgICAgICAgIHsgY2xhc3NOYW1lOiAnZm9sbG93ZXJzJyB9LFxuXHQgICAgICAgIGZvbGxvd2Vycy5tYXAoZnVuY3Rpb24gKGZvbCkge1xuXHQgICAgICAgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICAgICAgICBJdGVtLFxuXHQgICAgICAgICAgICAgICAgeyBrZXk6IGZvbC5nZXQoJ2lkJykgfSxcblx0ICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuXHQgICAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnaXRlbS1tZWRpYScgfSxcblx0ICAgICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnaW1nJywgeyBzcmM6IGZvbC5nZXQoJ2F2YXRhcl91cmwnKSB9KVxuXHQgICAgICAgICAgICAgICAgKSxcblx0ICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuXHQgICAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnaXRlbS1pbm5lcicgfSxcblx0ICAgICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnaXRlbS10aXRsZScgfSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZm9sLmdldCgnbmFtZScpLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzcGFuJyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGwsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb2wuZ2V0KCdsb2dpbicpXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIClcblx0ICAgICAgICAgICAgICAgICAgICApLFxuXHQgICAgICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAnZGl2Jyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdsb2NhdGlvbicgfSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZm9sLmdldCgnbG9jYXRpb24nKVxuXHQgICAgICAgICAgICAgICAgICAgIClcblx0ICAgICAgICAgICAgICAgIClcblx0ICAgICAgICAgICAgKTtcblx0ICAgICAgICB9KVxuXHQgICAgKSA6IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Vc2VyUGxhY2Vob2xkZXIyLmRlZmF1bHQsIHsgdGV4dDogcGxhY2Vob2xkZXIgfSk7XG5cdH07XG5cdFxuXHRGb2xsb3dlcnMucHJvcFR5cGVzID0ge1xuXHQgICAgZm9sbG93ZXJzOiBfcmVhY3QyLmRlZmF1bHQuUHJvcFR5cGVzLmluc3RhbmNlT2YoX2ltbXV0YWJsZTIuZGVmYXVsdC5MaXN0KSxcblx0ICAgIHBsYWNlaG9sZGVyOiBfcmVhY3QyLmRlZmF1bHQuUHJvcFR5cGVzLnN0cmluZyxcblx0ICAgIGlzRmV0Y2hpbmc6IF9yZWFjdDIuZGVmYXVsdC5Qcm9wVHlwZXMuYm9vbFxuXHR9O1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gRm9sbG93ZXJzO1xuXG4vKioqLyB9LFxuXG4vKioqLyA3ODM6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMzAwKTtcblx0XG5cdHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXHRcblx0dmFyIF9pbW11dGFibGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDczMSk7XG5cdFxuXHR2YXIgX2ltbXV0YWJsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbW11dGFibGUpO1xuXHRcblx0dmFyIF9MaXN0QmxvY2sgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc0Mik7XG5cdFxuXHR2YXIgX0xpc3RCbG9jazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9MaXN0QmxvY2spO1xuXHRcblx0dmFyIF9Vc2VyUGxhY2Vob2xkZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc3NSk7XG5cdFxuXHR2YXIgX1VzZXJQbGFjZWhvbGRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Vc2VyUGxhY2Vob2xkZXIpO1xuXHRcblx0dmFyIF9Mb2FkaW5nID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NTkpO1xuXHRcblx0dmFyIF9Mb2FkaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0xvYWRpbmcpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdHZhciBMaXN0ID0gX0xpc3RCbG9jazIuZGVmYXVsdC5MaXN0LFxuXHQgICAgSXRlbSA9IF9MaXN0QmxvY2syLmRlZmF1bHQuSXRlbTtcblx0XG5cdFxuXHR2YXIgRm9sbG93aW5ncyA9IGZ1bmN0aW9uIEZvbGxvd2luZ3MoX3JlZikge1xuXHQgICAgdmFyIGZvbGxvd2luZ3MgPSBfcmVmLmZvbGxvd2luZ3MsXG5cdCAgICAgICAgcGxhY2Vob2xkZXIgPSBfcmVmLnBsYWNlaG9sZGVyLFxuXHQgICAgICAgIGlzRmV0Y2hpbmcgPSBfcmVmLmlzRmV0Y2hpbmc7XG5cdCAgICByZXR1cm4gaXNGZXRjaGluZyA/IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Mb2FkaW5nMi5kZWZhdWx0LCBudWxsKSA6IGZvbGxvd2luZ3Muc2l6ZSAhPT0gMCA/IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgIExpc3QsXG5cdCAgICAgICAgeyBjbGFzc05hbWU6ICdmb2xsb3dpbmdzJyB9LFxuXHQgICAgICAgIGZvbGxvd2luZ3MubWFwKGZ1bmN0aW9uIChmb2wpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuXHQgICAgICAgICAgICAgICAgSXRlbSxcblx0ICAgICAgICAgICAgICAgIHsga2V5OiBmb2wuZ2V0KCdpZCcpIH0sXG5cdCAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgICAgICAgICAnZGl2Jyxcblx0ICAgICAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ2l0ZW0tbWVkaWEnIH0sXG5cdCAgICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2ltZycsIHsgc3JjOiBmb2wuZ2V0KCdhdmF0YXJfdXJsJykgfSlcblx0ICAgICAgICAgICAgICAgICksXG5cdCAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgICAgICAgICAnZGl2Jyxcblx0ICAgICAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ2l0ZW0taW5uZXInIH0sXG5cdCAgICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ2l0ZW0tdGl0bGUnIH0sXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGZvbC5nZXQoJ25hbWUnKSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc3BhbicsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9sLmdldCgnbG9naW4nKVxuXHQgICAgICAgICAgICAgICAgICAgICAgICApXG5cdCAgICAgICAgICAgICAgICAgICAgKSxcblx0ICAgICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcblx0ICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnbG9jYXRpb24nIH0sXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGZvbC5nZXQoJ2xvY2F0aW9uJylcblx0ICAgICAgICAgICAgICAgICAgICApXG5cdCAgICAgICAgICAgICAgICApXG5cdCAgICAgICAgICAgICk7XG5cdCAgICAgICAgfSlcblx0ICAgICkgOiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfVXNlclBsYWNlaG9sZGVyMi5kZWZhdWx0LCB7IHRleHQ6IHBsYWNlaG9sZGVyIH0pO1xuXHR9O1xuXHRcblx0Rm9sbG93aW5ncy5wcm9wVHlwZXMgPSB7XG5cdCAgICBmb2xsb3dpbmdzOiBfcmVhY3QyLmRlZmF1bHQuUHJvcFR5cGVzLmluc3RhbmNlT2YoX2ltbXV0YWJsZTIuZGVmYXVsdC5MaXN0KSxcblx0ICAgIHBsYWNlaG9sZGVyOiBfcmVhY3QyLmRlZmF1bHQuUHJvcFR5cGVzLnN0cmluZyxcblx0ICAgIGlzRmV0Y2hpbmc6IF9yZWFjdDIuZGVmYXVsdC5Qcm9wVHlwZXMuYm9vbFxuXHR9O1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gRm9sbG93aW5ncztcblxuLyoqKi8gfSxcblxuLyoqKi8gNzg0OlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0Ly8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblx0XG5cdC8vIGxvYWQgdGhlIHN0eWxlc1xuXHR2YXIgY29udGVudCA9IF9fd2VicGFja19yZXF1aXJlX18oNzg1KTtcblx0aWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cdC8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cblx0dmFyIHVwZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNDcwKShjb250ZW50LCB7fSk7XG5cdGlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXHQvLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5cdGlmKHRydWUpIHtcblx0XHQvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuXHRcdGlmKCFjb250ZW50LmxvY2Fscykge1xuXHRcdFx0bW9kdWxlLmhvdC5hY2NlcHQoNzg1LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIG5ld0NvbnRlbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc4NSk7XG5cdFx0XHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXHRcdFx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0Ly8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuXHRcdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xuXHR9XG5cbi8qKiovIH0sXG5cbi8qKiovIDc4NTpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oNDY4KSgpO1xuXHQvLyBpbXBvcnRzXG5cdFxuXHRcblx0Ly8gbW9kdWxlXG5cdGV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcImJvZHl7YmFja2dyb3VuZC1jb2xvcjojZmZmfS5idXR0b24tcmVke2NvbG9yOiNmZmY7YmFja2dyb3VuZC1jb2xvcjojZjQ0MzM2IWltcG9ydGFudH0uYnV0dG9uLW9yYW5nZXtjb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6I2ZmOTgwMCFpbXBvcnRhbnR9LmJ1dHRvbi1ncmVlbntjb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6IzRjYWY1MCFpbXBvcnRhbnR9LmJ1dHRvbi1ibHVle2NvbG9yOiNmZmY7YmFja2dyb3VuZC1jb2xvcjojMjE5NmYzIWltcG9ydGFudH0uYnV0dG9ue2JvcmRlci1yYWRpdXM6MH0uZW50cnktd3JhcCwuZW50cnktd3JhcD5kaXYsLmVudHJ5LXdyYXA+ZGl2PmRpdntoZWlnaHQ6MTAwJX0ubGlzdC1ibG9jayAuaXRlbS1pbm5lcjphZnRlcntkaXNwbGF5Om5vbmV9LnVzZXIgLmFjdGl2ZS1zdGF0ZXtiYWNrZ3JvdW5kLWNvbG9yOiNiZmU1ZjN9LnVzZXIgLm5hdmJhci1pbm5lcntiYWNrZ3JvdW5kLWNvbG9yOiNmNWY1ZjV9LnVzZXIgLm5hdmJhcjphZnRlcntkaXNwbGF5Om5vbmV9LnVzZXIgLnRhYnMtd3JhcHtwb3NpdGlvbjpyZWxhdGl2ZTt6LWluZGV4OjI7aGVpZ2h0Oi41MzMzMzNyZW07bWFyZ2luLXRvcDotLjAxMzMzM3JlbTtvdmVyZmxvdy15OmhpZGRlbjtvdmVyZmxvdy14OmF1dG87YmFja2dyb3VuZC1jb2xvcjojZjVmNWY1O2JvcmRlci1ib3R0b206LjAxMzMzM3JlbSBzb2xpZCAjZDVkNWQ1O3dpZHRoOjEwMCV9LnVzZXIgLnRhYnMtd3JhcDo6LXdlYmtpdC1zY3JvbGxiYXJ7d2lkdGg6MH0udXNlciAudGFicy13cmFwIC50YWJze292ZXJmbG93LXk6aGlkZGVuO292ZXJmbG93LXg6c2Nyb2xsO3RleHQtYWxpZ246Y2VudGVyO3doaXRlLXNwYWNlOm5vd3JhcDt3aWR0aDo2cmVtO2JhY2tncm91bmQtY29sb3I6I2Y1ZjVmNTtwYWRkaW5nLWJvdHRvbTouMjY2NjY3cmVtO21hcmdpbi10b3A6LS4wOHJlbX0udXNlciAudGFiLnNlbGVjdGVke2ZvbnQtd2VpZ2h0OjYwMDtjb2xvcjojYzk1MTBjfS51c2VyIC51c2VyLWl0ZW17YmFja2dyb3VuZC1jb2xvcjojZmFmYWZhO2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7cG9zaXRpb246cmVsYXRpdmU7cGFkZGluZzouMnJlbSAuMnJlbSAuMTMzMzMzcmVtO292ZXJmbG93OnZpc2libGU7bGluZS1oZWlnaHQ6MS41O2JvcmRlci1ib3R0b206LjAxMzMzM3JlbSBzb2xpZCAjY2NjfS51c2VyIC51c2VyLWl0ZW0gaW1ne3dpZHRoOjEuNDY2NjY3cmVtO2hlaWdodDoxLjQ2NjY2N3JlbTtib3JkZXItcmFkaXVzOi4wNHJlbX0udXNlciAudXNlci1pdGVtIC51c2VyLWluZm97cGFkZGluZy1sZWZ0Oi4ycmVtfS51c2VyIC51c2VyLWl0ZW0gLnVzZXItaW5mbyAubG9naW57bWFyZ2luOjA7Zm9udC1zaXplOi4yMTMzMzNyZW07Y29sb3I6IzMzM30udXNlciAudXNlci1pdGVtIC51c2VyLWluZm8gLm5hbWV7bWFyZ2luOjA7Zm9udC1zaXplOi4xNnJlbTtmb250LXdlaWdodDo0MDA7Y29sb3I6Izc2NzY3Nn0udXNlciAudXNlci1pdGVtIC51c2VyLWluZm8gLmluZm97bGlzdC1zdHlsZTpub25lO3BhZGRpbmc6MDttYXJnaW46LjFyZW0gMCAwfS51c2VyIC51c2VyLWl0ZW0gLnVzZXItaW5mbyAuaW5mbyBsaXtib3JkZXI6bm9uZTttYXJnaW4tYm90dG9tOjA7Zm9udC1zaXplOi4xNnJlbTtsaW5lLWhlaWdodDoxLjh9LnVzZXIgLnJlcHMtd3JhcHtwYWRkaW5nOi4xNnJlbSAuMTZyZW0gMH0udXNlciAucmVwcy13cmFwIC5yZXBzLXRpdGxle2ZvbnQtc2l6ZTouMjEzMzMzcmVtO2ZvbnQtd2VpZ2h0OjQwMH0udXNlciAucmVwcy13cmFwIC51c2VyLXJlcHN7Ym9yZGVyOi4wMTMzMzNyZW0gc29saWQgI2NjY30udXNlciAuc3Rhci1jb3VudHttYXJnaW4tYm90dG9tOi4wNjY2NjdyZW07bWFyZ2luLWxlZnQ6LjA2NjY2N3JlbTtmb250LXNpemU6LjE0NjY2N3JlbTtjb2xvcjojOTk5fS51c2VyIC5mdWxsLW5hbWV7bWFyZ2luLWJvdHRvbTouMDRyZW07Zm9udC13ZWlnaHQ6NTAwO2xpbmUtaGVpZ2h0OjEuMjtjb2xvcjojNDA3OGMwO3dvcmQtd3JhcDpicmVhay13b3JkO21heC13aWR0aDo4MCU7d2hpdGUtc3BhY2U6bm9ybWFsO2ZvbnQtc2l6ZTouMTg2NjY3cmVtfS51c2VyIC5yZXBvc2l0b3JpZXMgLml0ZW0taW5uZXIsLnVzZXIgLnN0YXJzIC5pdGVtLWlubmVye2Rpc3BsYXk6YmxvY2t9LnVzZXIgLnN0YXJzIC5kZXN7Zm9udC1zaXplOi4xNnJlbTtjb2xvcjojNzY3Njc2fS51c2VyIC5zdGFyLWxhbmd1YWdle21hcmdpbi1ib3R0b206LjA2NjY2N3JlbTtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4O2ZvbnQtc2l6ZTouMTg2NjY3cmVtfS51c2VyIC5zdGFyLWxhbmd1YWdlIC5zdGFyLWNvdW50e2ZvbnQtc2l6ZTouMTg2NjY3cmVtO21hcmdpbjowO2NvbG9yOiM3Njc2NzZ9LnVzZXIgLnN0YXItbGFuZ3VhZ2UgLmZ1bGwtbmFtZXttYXgtd2lkdGg6MTAwJX0udXNlciAuZm9sbG93ZXJzIC5pdGVtLW1lZGlhLC51c2VyIC5mb2xsb3dpbmdzIC5pdGVtLW1lZGlhe3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6LjJyZW19LnVzZXIgLmZvbGxvd2VycyAuaXRlbS1pbm5lciwudXNlciAuZm9sbG93aW5ncyAuaXRlbS1pbm5lcntkaXNwbGF5OmJsb2NrO21hcmdpbi1sZWZ0Oi42cmVtOy13ZWJraXQtYm94LXBhY2s6c3RhcnQ7LW1zLWZsZXgtcGFjazpzdGFydDtqdXN0aWZ5LWNvbnRlbnQ6ZmxleC1zdGFydH0udXNlciAuZm9sbG93ZXJzIC5pdGVtLWlubmVyIC5pdGVtLXRpdGxlLC51c2VyIC5mb2xsb3dpbmdzIC5pdGVtLWlubmVyIC5pdGVtLXRpdGxle2ZvbnQtc2l6ZTouMTg2NjY3cmVtO2NvbG9yOiM0MDc4YzB9LnVzZXIgLmZvbGxvd2VycyAuaXRlbS1pbm5lciBzcGFuLC51c2VyIC5mb2xsb3dpbmdzIC5pdGVtLWlubmVyIHNwYW57Zm9udC1zaXplOi4xODY2NjdyZW07cGFkZGluZy1sZWZ0Oi4wNjY2NjdyZW07Y29sb3I6IzMzM30udXNlciAuZm9sbG93ZXJzIC5pdGVtLWlubmVyIC5sb2NhdGlvbiwudXNlciAuZm9sbG93aW5ncyAuaXRlbS1pbm5lciAubG9jYXRpb257Zm9udC1zaXplOi4xNnJlbTtjb2xvcjojNzY3Njc2fS51c2VyIC5mb2xsb3dlcnMgaW1nLC51c2VyIC5mb2xsb3dpbmdzIGltZ3t3aWR0aDouNHJlbTtoZWlnaHQ6LjRyZW19XCIsIFwiXCJdKTtcblx0XG5cdC8vIGV4cG9ydHNcblxuXG4vKioqLyB9XG5cbn0pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzdGF0aWMvanMvdXNlci5jYzc3Yy5jaHVuay5qcyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBwdXNoLCBnbyB9IGZyb20gJ3JlYWN0LXJvdXRlci1yZWR1eCc7XG5pbXBvcnQgSWNvbiBmcm9tICdjb21wb25lbnRzL0ljb24nO1xuaW1wb3J0ICcuL3N0eWxlLmxlc3MnO1xuXG5jbGFzcyBIZWFkZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICB9XG5cbiAgICBnbyhldmVudCwgaGlzdG9yeSkge1xuICAgICAgICBpZiAoZXZlbnQgPT09ICdiYWNrJykge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5kaXNwYXRjaChnbygtMSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5kaXNwYXRjaChnbyhoaXN0b3J5KSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnb3RvKHVybCkge1xuICAgICAgICBpZiAodXJsKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLmRpc3BhdGNoKHB1c2godXJsKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGxldCB7XG4gICAgICAgICAgICBsZWZ0LFxuICAgICAgICAgICAgY2VudGVyLFxuICAgICAgICAgICAgcmlnaHQsXG4gICAgICAgICAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgICAgICBjb25zdCBpY29uU2l6ZSA9IHtcbiAgICAgICAgICAgIHdpZHRoOiAyOCwgaGVpZ2h0OiAyOFxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0naGVhZGVyJz5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nbmF2YmFyJz5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J25hdmJhci1pbm5lcic+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPSdsZWZ0IGxpbmsnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gdGhpcy5nbyhsZWZ0LmV2ZW50KX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0Lmljb24gP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEljb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPXtsZWZ0Lmljb259XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e2xlZnQuc2l6ZSA/IGxlZnQuc2l6ZSA6IGljb25TaXplfSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBsZWZ0LnRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NlbnRlcic+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZW50ZXIuaWNvbiAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEljb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPXtjZW50ZXIuaWNvbn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17Y2VudGVyLnNpemUgPyBjZW50ZXIuc2l6ZSA6IGljb25TaXplfSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbnRlci50ZXh0ICYmIDxzcGFuPntjZW50ZXIudGV4dH08L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9J3JpZ2h0IGxpbmsnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gdGhpcy5nb3RvKHJpZ2h0LnVybCl9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmlnaHQuaWNvbiA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SWNvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9e3JpZ2h0Lmljb259XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3JpZ2h0LnNpemUgPyByaWdodC5zaXplIDogaWNvblNpemV9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHJpZ2h0LnRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cbkhlYWRlci5wcm9wVHlwZXMgPSB7XG4gICAgbGVmdDogUmVhY3QuUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIGNlbnRlcjogUmVhY3QuUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIHJpZ2h0OiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgSGVhZGVyO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9jb21wb25lbnRzL0hlYWRlci9pbmRleC5qc3giLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0ICcuL3N0eWxlLmxlc3MnO1xuXG5jb25zdCBJY29uID0gKHByb3BzKSA9PiB7XG5cbiAgICBjb25zdCBzcmMgPSAnLi4vc3JjL2ltZy9pY29uLycgKyBwcm9wcy5uYW1lICsgJy5wbmcnO1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGltZ1xuICAgICAgICAgICAgY2xhc3NOYW1lPSdpbWctaWNvbidcbiAgICAgICAgICAgIHNyYz17c3JjfVxuICAgICAgICAgICAgc3R5bGU9e3Byb3BzLnN0eWxlfVxuICAgICAgICAgICAgYWx0PSdpY29uJyAvPlxuICAgICk7XG59O1xuXG5JY29uLnByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUmVhY3QuUHJvcFR5cGVzLmFueVxufTtcblxuZXhwb3J0IGRlZmF1bHQgSWNvbjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29tcG9uZW50cy9JY29uL2luZGV4LmpzeCIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2luZGV4LmpzIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2luZGV4LmpzIS4vc3R5bGUubGVzc1wiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCB7fSk7XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcblx0Ly8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0aWYoIWNvbnRlbnQubG9jYWxzKSB7XG5cdFx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvaW5kZXguanMhLi9zdHlsZS5sZXNzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2luZGV4LmpzIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2luZGV4LmpzIS4vc3R5bGUubGVzc1wiKTtcblx0XHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXHRcdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHRcdH0pO1xuXHR9XG5cdC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvY29tcG9uZW50cy9JY29uL3N0eWxlLmxlc3Ncbi8vIG1vZHVsZSBpZCA9IDczNFxuLy8gbW9kdWxlIGNodW5rcyA9IDEgMiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKSgpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmltZy1pY29ue3ZlcnRpY2FsLWFsaWduOm1pZGRsZTt3aWR0aDouMjEzMzMzcmVtO2hlaWdodDouMjEzMzMzcmVtfVwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jc3MtbG9hZGVyIS4vfi9wb3N0Y3NzLWxvYWRlciEuL34vbGVzcy1sb2FkZXIhLi9zcmMvY29tcG9uZW50cy9JY29uL3N0eWxlLmxlc3Ncbi8vIG1vZHVsZSBpZCA9IDczNVxuLy8gbW9kdWxlIGNodW5rcyA9IDEgMiIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2luZGV4LmpzIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2luZGV4LmpzIS4vc3R5bGUubGVzc1wiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCB7fSk7XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcblx0Ly8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0aWYoIWNvbnRlbnQubG9jYWxzKSB7XG5cdFx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvaW5kZXguanMhLi9zdHlsZS5sZXNzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2luZGV4LmpzIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2luZGV4LmpzIS4vc3R5bGUubGVzc1wiKTtcblx0XHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXHRcdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHRcdH0pO1xuXHR9XG5cdC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvY29tcG9uZW50cy9IZWFkZXIvc3R5bGUubGVzc1xuLy8gbW9kdWxlIGlkID0gNzM2XG4vLyBtb2R1bGUgY2h1bmtzID0gMSAyIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKCk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJib2R5e2JhY2tncm91bmQtY29sb3I6I2ZmZn0uYnV0dG9uLXJlZHtjb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6I2Y0NDMzNiFpbXBvcnRhbnR9LmJ1dHRvbi1vcmFuZ2V7Y29sb3I6I2ZmZjtiYWNrZ3JvdW5kLWNvbG9yOiNmZjk4MDAhaW1wb3J0YW50fS5idXR0b24tZ3JlZW57Y29sb3I6I2ZmZjtiYWNrZ3JvdW5kLWNvbG9yOiM0Y2FmNTAhaW1wb3J0YW50fS5idXR0b24tYmx1ZXtjb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6IzIxOTZmMyFpbXBvcnRhbnR9LmJ1dHRvbntib3JkZXItcmFkaXVzOjB9LmVudHJ5LXdyYXAsLmVudHJ5LXdyYXA+ZGl2LC5lbnRyeS13cmFwPmRpdj5kaXZ7aGVpZ2h0OjEwMCV9Lmxpc3QtYmxvY2sgLml0ZW0taW5uZXI6YWZ0ZXJ7ZGlzcGxheTpub25lfS5oZWFkZXIgLmxpbmsuYWN0aXZlLXN0YXRle29wYWNpdHk6LjQ7ZmlsdGVyOmFscGhhKG9wYWNpdHk9NDApfVwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jc3MtbG9hZGVyIS4vfi9wb3N0Y3NzLWxvYWRlciEuL34vbGVzcy1sb2FkZXIhLi9zcmMvY29tcG9uZW50cy9IZWFkZXIvc3R5bGUubGVzc1xuLy8gbW9kdWxlIGlkID0gNzM3XG4vLyBtb2R1bGUgY2h1bmtzID0gMSAyIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0ICcuL3N0eWxlLmxlc3MnO1xuXG5jb25zdCBDb250ZW50ID0gcHJvcHMgPT5cblx0PGRpdiB7Li4ucHJvcHN9IGNsYXNzTmFtZT17Y2xhc3NuYW1lcygncGFnZS1jb250ZW50JywgcHJvcHMuY2xhc3NOYW1lKX0gPlxuXHRcdHtwcm9wcy5jaGlsZHJlbn1cblx0PC9kaXY+O1xuXG5Db250ZW50LnByb3BUeXBlcyA9IHtcblx0Y2hpbGRyZW46IFJlYWN0LlByb3BUeXBlcy5hbnkuaXNSZXF1aXJlZFxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ29udGVudDtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29tcG9uZW50cy9Db250ZW50L2luZGV4LmpzeCIsIi8qIVxuICBDb3B5cmlnaHQgKGMpIDIwMTYgSmVkIFdhdHNvbi5cbiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChNSVQpLCBzZWVcbiAgaHR0cDovL2plZHdhdHNvbi5naXRodWIuaW8vY2xhc3NuYW1lc1xuKi9cbi8qIGdsb2JhbCBkZWZpbmUgKi9cblxuKGZ1bmN0aW9uICgpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBoYXNPd24gPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuXHRmdW5jdGlvbiBjbGFzc05hbWVzICgpIHtcblx0XHR2YXIgY2xhc3NlcyA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBhcmcgPSBhcmd1bWVudHNbaV07XG5cdFx0XHRpZiAoIWFyZykgY29udGludWU7XG5cblx0XHRcdHZhciBhcmdUeXBlID0gdHlwZW9mIGFyZztcblxuXHRcdFx0aWYgKGFyZ1R5cGUgPT09ICdzdHJpbmcnIHx8IGFyZ1R5cGUgPT09ICdudW1iZXInKSB7XG5cdFx0XHRcdGNsYXNzZXMucHVzaChhcmcpO1xuXHRcdFx0fSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcblx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGNsYXNzTmFtZXMuYXBwbHkobnVsbCwgYXJnKSk7XG5cdFx0XHR9IGVsc2UgaWYgKGFyZ1R5cGUgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdGZvciAodmFyIGtleSBpbiBhcmcpIHtcblx0XHRcdFx0XHRpZiAoaGFzT3duLmNhbGwoYXJnLCBrZXkpICYmIGFyZ1trZXldKSB7XG5cdFx0XHRcdFx0XHRjbGFzc2VzLnB1c2goa2V5KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gY2xhc3Nlcy5qb2luKCcgJyk7XG5cdH1cblxuXHRpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGNsYXNzTmFtZXM7XG5cdH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PT0gJ29iamVjdCcgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIHJlZ2lzdGVyIGFzICdjbGFzc25hbWVzJywgY29uc2lzdGVudCB3aXRoIG5wbSBwYWNrYWdlIG5hbWVcblx0XHRkZWZpbmUoJ2NsYXNzbmFtZXMnLCBbXSwgZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIGNsYXNzTmFtZXM7XG5cdFx0fSk7XG5cdH0gZWxzZSB7XG5cdFx0d2luZG93LmNsYXNzTmFtZXMgPSBjbGFzc05hbWVzO1xuXHR9XG59KCkpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NsYXNzbmFtZXMvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDczOVxuLy8gbW9kdWxlIGNodW5rcyA9IDEgMiIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2luZGV4LmpzIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2luZGV4LmpzIS4vc3R5bGUubGVzc1wiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCB7fSk7XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcblx0Ly8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0aWYoIWNvbnRlbnQubG9jYWxzKSB7XG5cdFx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvaW5kZXguanMhLi9zdHlsZS5sZXNzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2luZGV4LmpzIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2luZGV4LmpzIS4vc3R5bGUubGVzc1wiKTtcblx0XHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXHRcdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHRcdH0pO1xuXHR9XG5cdC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvY29tcG9uZW50cy9Db250ZW50L3N0eWxlLmxlc3Ncbi8vIG1vZHVsZSBpZCA9IDc0MFxuLy8gbW9kdWxlIGNodW5rcyA9IDEgMiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKSgpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLnBhZ2UtY29udGVudHtvdmVyZmxvdzpzY3JvbGw7aGVpZ2h0OmNhbGMoMTAwJSAtIC41ODY2NjdyZW0pfVwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jc3MtbG9hZGVyIS4vfi9wb3N0Y3NzLWxvYWRlciEuL34vbGVzcy1sb2FkZXIhLi9zcmMvY29tcG9uZW50cy9Db250ZW50L3N0eWxlLmxlc3Ncbi8vIG1vZHVsZSBpZCA9IDc0MVxuLy8gbW9kdWxlIGNodW5rcyA9IDEgMiIsImltcG9ydCBMaXN0IGZyb20gJy4vTGlzdCc7XG5pbXBvcnQgSXRlbSBmcm9tICcuL0l0ZW0nO1xuaW1wb3J0ICcuL3N0eWxlLmxlc3MnO1xuXG5jb25zdCBMaXN0QmxvY2sgPSB7XG4gICAgTGlzdDogTGlzdCxcbiAgICBJdGVtOiBJdGVtXG59O1xuXG5leHBvcnQgZGVmYXVsdCBMaXN0QmxvY2s7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbXBvbmVudHMvTGlzdEJsb2NrL2luZGV4LmpzIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuXG5jb25zdCBMaXN0ID0gKHtcblx0Y2xhc3NOYW1lLFxuXHRjaGlsZHJlbixcbn0pID0+IHtcblxuXHRjb25zdCBjbiA9IGNsYXNzTmFtZXMoJ2xpc3QtYmxvY2snLCBjbGFzc05hbWUsIHt9KTtcblxuXHRyZXR1cm4gKFxuXHRcdDxkaXYgY2xhc3NOYW1lPXtjbn0+XG4gICAgICAgICAgICA8dWw+XG4gICAgICAgICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICAgICAgPC91bD5cbiAgICAgICAgPC9kaXY+XG5cdCk7XG59O1xuXG5MaXN0LnByb3BUeXBlcyA9IHtcblx0Y2hpbGRyZW46IFJlYWN0LlByb3BUeXBlcy5hbnlcbn07XG5cbmV4cG9ydCBkZWZhdWx0IExpc3Q7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbXBvbmVudHMvTGlzdEJsb2NrL0xpc3QuanN4IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuXG5jb25zdCBJdGVtID0gKHtcblx0Y2xhc3NOYW1lLFxuXHRtZWRpYSxcblx0Y2hpbGRyZW4sXG59KSA9PiB7XG5cblx0Y29uc3QgY24gPSBjbGFzc05hbWVzKCdpdGVtLWNvbnRlbnQnLCBjbGFzc05hbWUsIHtcblx0XHRtZWRpYTogbWVkaWFcblx0fSk7XG5cblx0cmV0dXJuIDxsaSBjbGFzc05hbWU9e2NufT57Y2hpbGRyZW59PC9saT47XG59O1xuXG5JdGVtLnByb3BUeXBlcyA9IHtcblx0Y2hpbGRyZW46IFJlYWN0LlByb3BUeXBlcy5hbnlcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEl0ZW07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbXBvbmVudHMvTGlzdEJsb2NrL0l0ZW0uanN4IiwiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvaW5kZXguanMhLi9zdHlsZS5sZXNzXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIHt9KTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuXHQvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuXHRpZighY29udGVudC5sb2NhbHMpIHtcblx0XHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9pbmRleC5qcyEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9sZXNzLWxvYWRlci9pbmRleC5qcyEuL3N0eWxlLmxlc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvaW5kZXguanMhLi9zdHlsZS5sZXNzXCIpO1xuXHRcdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cdFx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdFx0fSk7XG5cdH1cblx0Ly8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21wb25lbnRzL0xpc3RCbG9jay9zdHlsZS5sZXNzXG4vLyBtb2R1bGUgaWQgPSA3NDVcbi8vIG1vZHVsZSBjaHVua3MgPSAxIDIiLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5saXN0LWJsb2Nre21hcmdpbjowfS5saXN0LWJsb2NrIC5pdGVtLWNvbnRlbnR7ZGlzcGxheTpibG9ja30ubGlzdC1ibG9jayAuaXRlbS1jb250ZW50Lm1lZGlhe2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXh9Lmxpc3QtYmxvY2sgVUw6YWZ0ZXIsLmxpc3QtYmxvY2sgdWw6YmVmb3Jle2Rpc3BsYXk6bm9uZX0ubGlzdC1ibG9jayBsaXtib3JkZXItYm90dG9tOi4wMTMzMzNyZW0gc29saWQgI2NjY31cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY3NzLWxvYWRlciEuL34vcG9zdGNzcy1sb2FkZXIhLi9+L2xlc3MtbG9hZGVyIS4vc3JjL2NvbXBvbmVudHMvTGlzdEJsb2NrL3N0eWxlLmxlc3Ncbi8vIG1vZHVsZSBpZCA9IDc0NlxuLy8gbW9kdWxlIGNodW5rcyA9IDEgMiIsImltcG9ydCBmNyBmcm9tICcuL2Y3LmpzJztcblxubGV0IHskfSA9IGY3O1xuXG5sZXQgJHBhZ2VzID0gJCgnI3BhZ2VzJyk7XG5cbmV4cG9ydCBkZWZhdWx0ICgpID0+IHtcbiAgICAkcGFnZXMucmVtb3ZlQ2xhc3MoJ3Rvb2xiYXItZml4ZWQnKTtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29tbW9uL2NsZWFyVG9vbGJhci5qcyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCAnLi9zdHlsZS5sZXNzJztcblxuY2xhc3MgVGFiIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcblx0Y29uc3RydWN0b3IocHJvcHMpIHtcblx0XHRzdXBlcihwcm9wcyk7XG5cblx0XHR0aGlzLnN0YXRlID0ge1xuXHRcdFx0YWN0aXZlTmFtZTpwcm9wcy5hY3RpdmVOYW1lXG5cdFx0fTtcblx0fVxuXG5cdGNoYW5nZUFjdGl2ZU5hbWUoYWN0aXZlTmFtZSkge1xuXHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0YWN0aXZlTmFtZTphY3RpdmVOYW1lXG5cdFx0fSk7XG5cblx0XHRpZiAodHlwZW9mIHRoaXMucHJvcHMub25DaGFuZ2UgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdHRoaXMucHJvcHMub25DaGFuZ2UoYWN0aXZlTmFtZSk7XG5cdFx0fVxuXHR9XG5cblx0cmVuZGVyKCkge1xuXHRcdGNvbnN0IHtcblx0XHRcdHRhYnMsXG5cdFx0XHRpc0ZldGNoaW5nLFxuXHRcdH0gPSB0aGlzLnByb3BzO1xuXG5cdFx0cmV0dXJuIChcblx0XHRcdDxkaXYgY2xhc3NOYW1lPSd0YWJzJz5cblx0XHRcdFx0e1xuXHRcdFx0XHRcdHRhYnMubWFwKHRhYiA9PiAoXG5cdFx0XHRcdFx0XHRcdDxkaXZcblx0XHRcdFx0XHRcdFx0XHRrZXk9e3RhYi5hY3RpdmVOYW1lfVxuXHRcdFx0XHRcdFx0XHRcdGNsYXNzTmFtZT17Y2xhc3NOYW1lcygndGFiJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkOnRoaXMuc3RhdGUuYWN0aXZlTmFtZSA9PT0gdGFiLmFjdGl2ZU5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pfVxuXHRcdFx0XHRcdFx0XHRcdG9uQ2xpY2s9eygpID0+IHRoaXMuY2hhbmdlQWN0aXZlTmFtZSh0YWIuYWN0aXZlTmFtZSl9XG5cdFx0XHRcdFx0XHRcdFx0ZGlzYWJsZWQ9e2lzRmV0Y2hpbmd9PlxuXHRcdFx0XHRcdFx0XHRcdHt0YWIudGl0bGV9XG5cdFx0XHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdClcblx0XHRcdFx0fVxuICAgICAgICAgICAgPC9kaXY+XG5cdFx0KTtcblx0fVxufVxuXG5UYWIucG9ycFR5cGVzID0ge1xuXHR0YWJzOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cdGFjdGl2ZU5hbWU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcblx0aXNGZXRjaGluZzogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG59O1xuXG5UYWIuZGVmYXVsdFByb3BzID0ge1xuXHRpc0ZldGNoaW5nOiBmYWxzZSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRhYjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29tcG9uZW50cy9UYWIvaW5kZXguanN4IiwiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvaW5kZXguanMhLi9zdHlsZS5sZXNzXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIHt9KTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuXHQvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuXHRpZighY29udGVudC5sb2NhbHMpIHtcblx0XHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9pbmRleC5qcyEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9sZXNzLWxvYWRlci9pbmRleC5qcyEuL3N0eWxlLmxlc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvaW5kZXguanMhLi9zdHlsZS5sZXNzXCIpO1xuXHRcdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cdFx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdFx0fSk7XG5cdH1cblx0Ly8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21wb25lbnRzL1RhYi9zdHlsZS5sZXNzXG4vLyBtb2R1bGUgaWQgPSA3NDlcbi8vIG1vZHVsZSBjaHVua3MgPSAxIDIiLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi50YWJze2Rpc3BsYXk6dGFibGU7d2lkdGg6MTAwJTt0YWJsZS1sYXlvdXQ6Zml4ZWQ7YmFja2dyb3VuZDojZmFmYWZhfS50YWJzIC50YWJ7ZGlzcGxheTp0YWJsZS1jZWxsO3RleHQtYWxpZ246Y2VudGVyO3BhZGRpbmc6LjEzMzMzM3JlbSAwfVwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jc3MtbG9hZGVyIS4vfi9wb3N0Y3NzLWxvYWRlciEuL34vbGVzcy1sb2FkZXIhLi9zcmMvY29tcG9uZW50cy9UYWIvc3R5bGUubGVzc1xuLy8gbW9kdWxlIGlkID0gNzUwXG4vLyBtb2R1bGUgY2h1bmtzID0gMSAyIiwiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvaW5kZXguanMhLi9zdHlsZS5sZXNzXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIHt9KTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuXHQvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuXHRpZighY29udGVudC5sb2NhbHMpIHtcblx0XHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9pbmRleC5qcyEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9sZXNzLWxvYWRlci9pbmRleC5qcyEuL3N0eWxlLmxlc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvaW5kZXguanMhLi9zdHlsZS5sZXNzXCIpO1xuXHRcdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cdFx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdFx0fSk7XG5cdH1cblx0Ly8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21wb25lbnRzL1BsYWNlaG9sZGVyL3N0eWxlLmxlc3Ncbi8vIG1vZHVsZSBpZCA9IDc1N1xuLy8gbW9kdWxlIGNodW5rcyA9IDEgMiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKSgpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLnVzZXItcGxhY2Vob2xkZXJ7cGFkZGluZzowO21hcmdpbjouMnJlbTtvdmVyZmxvdzpoaWRkZW47d29yZC1icmVhazpicmVhay13b3JkO3dvcmQtd3JhcDpicmVhay13b3JkO3doaXRlLXNwYWNlOm5vcm1hbDtib3JkZXI6LjAxMzMzM3JlbSBzb2xpZCAjZGRkO2JvcmRlci1yYWRpdXM6LjA0cmVtO2JhY2tncm91bmQ6I2Y1ZjVmNTtib3JkZXItY29sb3I6I2NjYztib3gtc2hhZG93Omluc2V0IDAgMCAuMTMzMzMzcmVtIHJnYmEoMCwwLDAsLjEpfS51c2VyLXBsYWNlaG9sZGVyIC53cmFwe2ZvbnQtc2l6ZTouMnJlbTtjb2xvcjojNzY3Njc2O3RleHQtYWxpZ246Y2VudGVyO3BhZGRpbmc6LjJyZW19LnNlYXJjaC1wbGFjZWhvbGRlcntwYWRkaW5nOi42cmVtO2ZvbnQtd2VpZ2h0OjcwMDtjb2xvcjojNzY3Njc2O3RleHQtYWxpZ246Y2VudGVyfVwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jc3MtbG9hZGVyIS4vfi9wb3N0Y3NzLWxvYWRlciEuL34vbGVzcy1sb2FkZXIhLi9zcmMvY29tcG9uZW50cy9QbGFjZWhvbGRlci9zdHlsZS5sZXNzXG4vLyBtb2R1bGUgaWQgPSA3NThcbi8vIG1vZHVsZSBjaHVua3MgPSAxIDIiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0ICcuL3N0eWxlLmxlc3MnO1xuXG5jb25zdCBMb2FkaW5nID0gKCkgPT5cblx0PGRpdiBjbGFzc05hbWU9J2xvYWRpbmcnPlxuXHRcdDxkaXYgY2xhc3NOYW1lPSdsb2FkZXInPjwvZGl2PlxuXHRcdDxkaXYgY2xhc3NOYW1lPSd0ZXh0Jz5Mb2FkaW5nLi4uPC9kaXY+XG5cdDwvZGl2PjtcblxuZXhwb3J0IGRlZmF1bHQgTG9hZGluZztcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29tcG9uZW50cy9Mb2FkaW5nL2luZGV4LmpzeCIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2luZGV4LmpzIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2luZGV4LmpzIS4vc3R5bGUubGVzc1wiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCB7fSk7XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcblx0Ly8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0aWYoIWNvbnRlbnQubG9jYWxzKSB7XG5cdFx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvaW5kZXguanMhLi9zdHlsZS5sZXNzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2luZGV4LmpzIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2luZGV4LmpzIS4vc3R5bGUubGVzc1wiKTtcblx0XHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXHRcdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHRcdH0pO1xuXHR9XG5cdC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvY29tcG9uZW50cy9Mb2FkaW5nL3N0eWxlLmxlc3Ncbi8vIG1vZHVsZSBpZCA9IDc2MFxuLy8gbW9kdWxlIGNodW5rcyA9IDEgMiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKSgpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmxvYWRpbmd7bWFyZ2luOi4yNjY2NjdyZW0gYXV0bztkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy13ZWJraXQtYm94LXBhY2s6Y2VudGVyOy1tcy1mbGV4LXBhY2s6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7cG9zaXRpb246cmVsYXRpdmV9LmxvYWRpbmcgLnRleHR7cG9zaXRpb246YWJzb2x1dGU7dG9wOjUwJTtsZWZ0OjUwJTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUoLTUwJSwtNTAlKTt0cmFuc2Zvcm06dHJhbnNsYXRlKC01MCUsLTUwJSk7Zm9udC1zaXplOi4yNHJlbX0ubG9hZGluZyAubG9hZGVyLC5sb2FkaW5nIC5sb2FkZXI6YWZ0ZXJ7Ym9yZGVyLXJhZGl1czo1MCU7d2lkdGg6MTBlbTtoZWlnaHQ6MTBlbX0ubG9hZGluZyAubG9hZGVye21hcmdpbjouOHJlbSBhdXRvO2ZvbnQtc2l6ZTouMTMzMzMzcmVtO3Bvc2l0aW9uOnJlbGF0aXZlO3RleHQtaW5kZW50Oi05OTk5ZW07Ym9yZGVyLXRvcDoxLjFlbSBzb2xpZCBoc2xhKDAsMCUsODAlLC4yKTtib3JkZXItcmlnaHQ6MS4xZW0gc29saWQgaHNsYSgwLDAlLDgwJSwuMik7Ym9yZGVyLWJvdHRvbToxLjFlbSBzb2xpZCBoc2xhKDAsMCUsODAlLC4yKTtib3JkZXItbGVmdDoxLjFlbSBzb2xpZCAjY2NjOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVooMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVooMCk7LXdlYmtpdC1hbmltYXRpb246bG9hZDggMS4xcyBpbmZpbml0ZSBsaW5lYXI7YW5pbWF0aW9uOmxvYWQ4IDEuMXMgaW5maW5pdGUgbGluZWFyfUAtd2Via2l0LWtleWZyYW1lcyBsb2FkOHswJXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgwZGVnKX10b3std2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMXR1cm4pO3RyYW5zZm9ybTpyb3RhdGUoMXR1cm4pfX1Aa2V5ZnJhbWVzIGxvYWQ4ezAley13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgwZGVnKTt0cmFuc2Zvcm06cm90YXRlKDBkZWcpfXRvey13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgxdHVybik7dHJhbnNmb3JtOnJvdGF0ZSgxdHVybil9fVwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jc3MtbG9hZGVyIS4vfi9wb3N0Y3NzLWxvYWRlciEuL34vbGVzcy1sb2FkZXIhLi9zcmMvY29tcG9uZW50cy9Mb2FkaW5nL3N0eWxlLmxlc3Ncbi8vIG1vZHVsZSBpZCA9IDc2MVxuLy8gbW9kdWxlIGNodW5rcyA9IDEgMiIsImltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgVXNlciBmcm9tICcuL2NvbXBvbmVudCc7XG5pbXBvcnQge21hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzfSBmcm9tICcuL3NlbGVjdG9ycyc7XG5cblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChcbiAgICBtYXBTdGF0ZVRvUHJvcHMsXG4gICAgbWFwRGlzcGF0Y2hUb1Byb3BzXG4pKFVzZXIpO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL1VzZXIvY29udGFpbmVycy5qcyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgSGVhZGVyIGZyb20gJ2NvbXBvbmVudHMvSGVhZGVyJztcbmltcG9ydCBDb250ZW50IGZyb20gJ2NvbXBvbmVudHMvQ29udGVudCc7XG5pbXBvcnQgY2xlYXJUb29sYmFyIGZyb20gJ2NvbW1vbi9jbGVhclRvb2xiYXInO1xuaW1wb3J0IFRhYiBmcm9tICdjb21wb25lbnRzL1RhYic7XG5pbXBvcnQgT3ZlclZpZXcgZnJvbSAnLi9jb21wb25lbnRzL092ZXJWaWV3JztcbmltcG9ydCBSZXBvc2l0b3JpZXMgZnJvbSAnLi9jb21wb25lbnRzL1JlcG9zaXRvcmllcyc7XG5pbXBvcnQgU3RhcnMgZnJvbSAnLi9jb21wb25lbnRzL1N0YXJzJztcbmltcG9ydCBGb2xsb3dlcnMgZnJvbSAnLi9jb21wb25lbnRzL0ZvbGxvd2Vycyc7XG5pbXBvcnQgRm9sbG93aW5ncyBmcm9tICcuL2NvbXBvbmVudHMvRm9sbG93aW5ncyc7XG5pbXBvcnQgJy4vc3R5bGUubGVzcyc7XG5cbmNvbnN0IHRhYnMgPSBbe1xuICAgIGFjdGl2ZU5hbWU6ICdvdmVydmlldycsXG4gICAgdGl0bGU6ICdPdmVydmlldydcbn0sIHtcbiAgICBhY3RpdmVOYW1lOiAncmVwb3NpdG9yaWVzJyxcbiAgICB0aXRsZTogJ1JlcG9zaXRvcmllcydcbn0sIHtcbiAgICBhY3RpdmVOYW1lOiAnc3RhcnMnLFxuICAgIHRpdGxlOiAnU3RhcnMnXG59LCB7XG4gICAgYWN0aXZlTmFtZTogJ2ZvbGxvd2VycycsXG4gICAgdGl0bGU6ICdGb2xsb3dlcnMnXG59LCB7XG4gICAgYWN0aXZlTmFtZTogJ2ZvbGxvd2luZycsXG4gICAgdGl0bGU6ICdGb2xsb3dpbmcnXG59XTtcblxuXG5jbGFzcyBVc2VyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgfVxuXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIGNsZWFyVG9vbGJhcigpO1xuICAgICAgICB0aGlzLnByb3BzLmdldFVzZXIodGhpcy5wcm9wcy5wYXJhbXMubmFtZSk7XG4gICAgICAgIHRoaXMucHJvcHMuZ2V0VXNlclJlcCh0aGlzLnByb3BzLnBhcmFtcy5uYW1lKTtcbiAgICAgICAgdGhpcy5wcm9wcy5jaGFuZ2VBY3RpdmVOYW1lKHRhYnNbMF0uYWN0aXZlTmFtZSk7XG4gICAgfVxuXG4gICAgY2hhbmdlVGFiSGFuZGxlcihhY3RpdmVOYW1lKSB7XG4gICAgICAgIHRoaXMucHJvcHMuY2hhbmdlQWN0aXZlTmFtZShhY3RpdmVOYW1lKTtcblxuICAgICAgICBzd2l0Y2ggKGFjdGl2ZU5hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgdGFic1swXS5hY3RpdmVOYW1lOlxuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuZ2V0VXNlcih0aGlzLnByb3BzLnBhcmFtcy5uYW1lKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgdGFic1sxXS5hY3RpdmVOYW1lOlxuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuZ2V0VXNlclJlcCh0aGlzLnByb3BzLnBhcmFtcy5uYW1lKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgdGFic1syXS5hY3RpdmVOYW1lOlxuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuZ2V0VXNlclN0YXJzKHRoaXMucHJvcHMucGFyYW1zLm5hbWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSB0YWJzWzNdLmFjdGl2ZU5hbWU6XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5nZXRVc2VyRm9sbG93ZXJzKHRoaXMucHJvcHMucGFyYW1zLm5hbWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSB0YWJzWzRdLmFjdGl2ZU5hbWU6XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5nZXRVc2VyRm9sbG93aW5ncyh0aGlzLnByb3BzLnBhcmFtcy5uYW1lKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgYWN0aXZlTmFtZSxcbiAgICAgICAgICAgIHVzZXIsXG4gICAgICAgICAgICByZXBzLFxuICAgICAgICAgICAgc3RhcnMsXG4gICAgICAgICAgICBmb2xsb3dlcnMsXG4gICAgICAgICAgICBmb2xsb3dpbmdzLFxuICAgICAgICAgICAgaXNGZXRjaGluZyxcbiAgICAgICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSd1c2VyJz5cbiAgICAgICAgICAgICAgICA8SGVhZGVyXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ9e3tcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb246J2FsaWduJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAyMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDIwXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgIGNlbnRlcj17e1xuICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjonZ2l0aHViJ1xuICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICByaWdodD17e1xuICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjonYmVsbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMjQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAyNFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9fSAvPlxuICAgICAgICAgICAgICAgICAgICA8Q29udGVudD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSd0YWJzLXdyYXAnPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUYWJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFicz17dGFic31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlTmFtZT17dGFic1swXS5hY3RpdmVOYW1lfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17X2FjdGl2ZU5hbWUgPT4gdGhpcy5jaGFuZ2VUYWJIYW5kbGVyKF9hY3RpdmVOYW1lKX0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZU5hbWUgPT09IHRhYnNbMF0uYWN0aXZlTmFtZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxPdmVyVmlld1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyPXt1c2VyfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBzPXtyZXBzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0ZldGNoaW5nPXtpc0ZldGNoaW5nfSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlTmFtZSA9PT0gdGFic1sxXS5hY3RpdmVOYW1lICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFJlcG9zaXRvcmllc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBzPXtyZXBzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj17YWN0aXZlTmFtZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNGZXRjaGluZz17aXNGZXRjaGluZ30gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZU5hbWUgPT09IHRhYnNbMl0uYWN0aXZlTmFtZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTdGFyc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFycz17c3RhcnN9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPXthY3RpdmVOYW1lfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0ZldGNoaW5nPXtpc0ZldGNoaW5nfSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlTmFtZSA9PT0gdGFic1szXS5hY3RpdmVOYW1lICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEZvbGxvd2Vyc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb2xsb3dlcnM9e2ZvbGxvd2Vyc31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9e2FjdGl2ZU5hbWV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzRmV0Y2hpbmc9e2lzRmV0Y2hpbmd9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVOYW1lID09PSB0YWJzWzRdLmFjdGl2ZU5hbWUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Rm9sbG93aW5nc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb2xsb3dpbmdzPXtmb2xsb3dpbmdzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj17YWN0aXZlTmFtZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNGZXRjaGluZz17aXNGZXRjaGluZ30gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgPC9Db250ZW50PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5Vc2VyLnByb3BUeXBlcyA9IHtcbiAgICBhY3RpdmVOYW1lOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBVc2VyO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL1VzZXIvY29tcG9uZW50LmpzeCIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgSW1tdXRhYmxlIGZyb20gJ2ltbXV0YWJsZSc7XG5pbXBvcnQgTGlzdEJsb2NrIGZyb20gJ2NvbXBvbmVudHMvTGlzdEJsb2NrJztcbmltcG9ydCBMb2FkaW5nIGZyb20gJ2NvbXBvbmVudHMvTG9hZGluZyc7XG5cbmNvbnN0IHtcbiAgICBMaXN0LFxuICAgIEl0ZW1cbn0gPSBMaXN0QmxvY2s7XG5cbmNvbnN0IE92ZXJWaWV3ID0gKHtcbiAgICAgICAgdXNlcixcbiAgICAgICAgcmVwcyxcbiAgICAgICAgaXNGZXRjaGluZ1xuICAgIH0pID0+XG4gICAgaXNGZXRjaGluZyA/IDxMb2FkaW5nIC8+IDpcbiAgICA8ZGl2IGNsYXNzTmFtZT0nb3ZlcnZpZXcnPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ndXNlci1pdGVtJz5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSd1c2VyLWltZyc+XG4gICAgICAgICAgICAgICAgPGltZyBzcmM9e3VzZXIuZ2V0KCdhdmF0YXJfdXJsJyl9IC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSd1c2VyLWluZm8nPlxuICAgICAgICAgICAgICAgIDxoMSBjbGFzc05hbWU9J2xvZ2luJz57dXNlci5nZXQoJ2xvZ2luJyl9PC9oMT5cbiAgICAgICAgICAgICAgICA8aDMgY2xhc3NOYW1lPSduYW1lJz57dXNlci5nZXQoJ25hbWUnKX08L2gzPlxuICAgICAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9J2luZm8nPlxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VyLmdldCgnY29tcGFueScpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGk+e3VzZXIuZ2V0KCdjb21wYW55Jyl9PC9saT5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXIuZ2V0KCdsb2NhdGlvbicpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGk+e3VzZXIuZ2V0KCdsb2NhdGlvbicpfTwvbGk+XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VyLmdldCgnZW1haWwnKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPnt1c2VyLmdldCgnZW1haWwnKX08L2xpPlxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXNlci5nZXQoJ2Jsb2cnKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPnt1c2VyLmdldCgnYmxvZycpfTwvbGk+XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VyLmdldCgnYmlvJykgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT57dXNlci5nZXQoJ2JpbycpfTwvbGk+XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VyLmdldCgnaGlyZWFibGUnKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPnt1c2VyLmdldCgnaGlyZWFibGUnKX08L2xpPlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J3JlcHMtd3JhcCc+XG4gICAgICAgICAgICA8aDIgY2xhc3NOYW1lPSdyZXBzLXRpdGxlJz5Qb3B1bGFyIHJlcG9zaXRvcmllczwvaDI+XG4gICAgICAgICAgICA8TGlzdCBjbGFzc05hbWU9J3VzZXItcmVwcyc+XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICByZXBzLm1hcCgocmVwLCBpZHgpID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkeCA8PSA1ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJdGVtIGtleT17cmVwLmdldCgnaWQnKX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0naXRlbS1pbm5lcic+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2l0ZW0tdGl0bGUgZnVsbC1uYW1lJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3JlcC5nZXQoJ2Z1bGxfbmFtZScpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdpdGVtLWFmdGVyIHN0YXItY291bnQnPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7cmVwLmdldCgnc3RhcmdhemVyc19jb3VudCcpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj7imIU8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9JdGVtPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICA8L0xpc3Q+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PjtcblxuXG5PdmVyVmlldy5wcm9wVHlwZXMgPSB7XG4gICAgdXNlcjogUmVhY3QuUHJvcFR5cGVzLmluc3RhbmNlT2YoSW1tdXRhYmxlLk1hcCksXG4gICAgcmVwczogUmVhY3QuUHJvcFR5cGVzLmluc3RhbmNlT2YoSW1tdXRhYmxlLkxpc3QpLFxuICAgIGlzRmV0Y2hpbmc6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgT3ZlclZpZXc7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21vZHVsZXMvVXNlci9jb21wb25lbnRzL092ZXJWaWV3LmpzeCIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgSW1tdXRhYmxlIGZyb20gJ2ltbXV0YWJsZSc7XG5pbXBvcnQgTGlzdEJsb2NrIGZyb20gJ2NvbXBvbmVudHMvTGlzdEJsb2NrJztcbmltcG9ydCBVc2VyUGxhY2Vob2xkZXIgZnJvbSAnY29tcG9uZW50cy9QbGFjZWhvbGRlci9Vc2VyUGxhY2Vob2xkZXInO1xuaW1wb3J0IExhbmd1YWdlQ29sb3IgZnJvbSAnY29tcG9uZW50cy9MYW5ndWFnZUNvbG9yJztcbmltcG9ydCBMb2FkaW5nIGZyb20gJ2NvbXBvbmVudHMvTG9hZGluZyc7XG5cbmNvbnN0IHtcbiAgICBMaXN0LFxuICAgIEl0ZW1cbn0gPSBMaXN0QmxvY2s7XG5cbmNvbnN0IFJlcG9zaXRvcmllcyA9ICh7XG4gICAgICAgIHJlcHMsXG4gICAgICAgIHBsYWNlaG9sZGVyLFxuICAgICAgICBpc0ZldGNoaW5nLFxuICAgIH0pID0+XG4gICAgaXNGZXRjaGluZyA/IDxMb2FkaW5nIC8+IDpcbiAgICByZXBzLnNpemUgIT09IDAgP1xuICAgIDxMaXN0IGNsYXNzTmFtZT0ncmVwb3NpdG9yaWVzJz5cbiAgICAgICAge1xuICAgICAgICAgICAgcmVwcy5tYXAocmVwID0+IChcbiAgICAgICAgICAgICAgICA8SXRlbSBrZXk9e3JlcC5nZXQoJ2lkJyl9PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0naXRlbS1pbm5lcic+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0naXRlbS10aXRsZSBmdWxsLW5hbWUnPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtyZXAuZ2V0KCdmdWxsX25hbWUnKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3N0YXItbGFuZ3VhZ2UnPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdzdGFyLWNvdW50Jz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+4piFPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7cmVwLmdldCgnc3RhcmdhemVyc19jb3VudCcpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxMYW5ndWFnZUNvbG9yIGxhbmd1YWdlPXtyZXAuZ2V0KCdsYW5ndWFnZScpfSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvSXRlbT5cbiAgICAgICAgICAgICkpXG4gICAgICAgIH1cbiAgICA8L0xpc3Q+IDogPFVzZXJQbGFjZWhvbGRlciB0ZXh0PXtwbGFjZWhvbGRlcn0gLz47XG5cblJlcG9zaXRvcmllcy5wcm9wVHlwZXMgPSB7XG4gICAgcmVwczogUmVhY3QuUHJvcFR5cGVzLmluc3RhbmNlT2YoSW1tdXRhYmxlLkxpc3QpLFxuICAgIHBsYWNlaG9sZGVyOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIGlzRmV0Y2hpbmc6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgUmVwb3NpdG9yaWVzO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL1VzZXIvY29tcG9uZW50cy9SZXBvc2l0b3JpZXMuanN4IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCAnLi9zdHlsZS5sZXNzJztcblxuY29uc3QgVXNlclBsYWNlaG9sZGVyID0gKHt0ZXh0fSkgPT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J3VzZXItcGxhY2Vob2xkZXInPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3dyYXAnPlxuICAgICAgICAgICAgICAgIDxwPllvdSBkb24ndCBoYXZlIGFueSB7dGV4dH0geWV0LjwvcD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj47XG5cbmV4cG9ydCBkZWZhdWx0IFVzZXJQbGFjZWhvbGRlcjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29tcG9uZW50cy9QbGFjZWhvbGRlci9Vc2VyUGxhY2Vob2xkZXIuanN4IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBsYW5ndWFnZUNvbG9yIGZyb20gJ2NvbW1vbi9sYW5ndWFnZUNvbG9yJztcbmltcG9ydCAnLi9zdHlsZS5sZXNzJztcblxuY2xhc3MgTGFuZ3VhZ2VDb2xvciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBjb2xvcjogJydcbiAgICAgICAgfTtcblxuICAgIH1cblxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICBsYW5ndWFnZUNvbG9yLm1hcCgoY29sb3IsIGxhbikgPT4ge1xuICAgICAgICAgICAgaWYgKGxhbiA9PT0gdGhpcy5wcm9wcy5sYW5ndWFnZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICBjb2xvclxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGxldCB7XG4gICAgICAgICAgICBsYW5ndWFnZVxuICAgICAgICB9ID0gdGhpcy5wcm9wcywge1xuICAgICAgICAgICAgY29sb3JcbiAgICAgICAgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdsYW5ndWFnZS1jb2xvcic+XG4gICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9J2NvbG9yJ1xuICAgICAgICAgICAgICAgICAgICBzdHlsZT17e2JhY2tncm91bmRDb2xvcjpjb2xvcn19PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdsYW5ndWFnZSc+e2xhbmd1YWdlfTwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5MYW5ndWFnZUNvbG9yLnByb3BUeXBlcyA9IHtcbiAgICBsYW5ndWFnZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZ1xufTtcblxuZXhwb3J0IGRlZmF1bHQgTGFuZ3VhZ2VDb2xvcjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29tcG9uZW50cy9MYW5ndWFnZUNvbG9yL2luZGV4LmpzeCIsImltcG9ydCB0b0ltbXV0YWJsZSBmcm9tICcuL3RvSW1tdXRhYmxlLmpzJztcbmxldCBsYW5ndWFnZUNvbG9yID0ge1xuICAgIFwiTWVyY3VyeVwiOiBcIiNmZjJiMmJcIixcbiAgICBcIlR5cGVTY3JpcHRcIjogXCIjMmI3NDg5XCIsXG4gICAgXCJQdXJlQmFzaWNcIjogXCIjNWE2OTg2XCIsXG4gICAgXCJPYmplY3RpdmUtQysrXCI6IFwiIzY4NjZmYlwiLFxuICAgIFwiU2VsZlwiOiBcIiMwNTc5YWFcIixcbiAgICBcImVkblwiOiBcIiNkYjU4NTVcIixcbiAgICBcIk5ld0xpc3BcIjogXCIjODdBRUQ3XCIsXG4gICAgXCJKdXB5dGVyIE5vdGVib29rXCI6IFwiI0RBNUIwQlwiLFxuICAgIFwiUmVib2xcIjogXCIjMzU4YTViXCIsXG4gICAgXCJGcmVnZVwiOiBcIiMwMGNhZmVcIixcbiAgICBcIkRhcnRcIjogXCIjMDBCNEFCXCIsXG4gICAgXCJBc3BlY3RKXCI6IFwiI2E5NTdiMFwiLFxuICAgIFwiU2hlbGxcIjogXCIjODllMDUxXCIsXG4gICAgXCJXZWIgT250b2xvZ3kgTGFuZ3VhZ2VcIjogXCIjOWNjOWRkXCIsXG4gICAgXCJ4QmFzZVwiOiBcIiM0MDNhNDBcIixcbiAgICBcIkVpZmZlbFwiOiBcIiM5NDZkNTdcIixcbiAgICBcIk5peFwiOiBcIiM3ZTdlZmZcIixcbiAgICBcIlJBTUxcIjogXCIjNzdkOWZiXCIsXG4gICAgXCJNVE1MXCI6IFwiI2I3ZTFmNFwiLFxuICAgIFwiUmFja2V0XCI6IFwiIzIyMjI4ZlwiLFxuICAgIFwiRWxpeGlyXCI6IFwiIzZlNGE3ZVwiLFxuICAgIFwiU0FTXCI6IFwiI0IzNDkzNlwiLFxuICAgIFwiQWdkYVwiOiBcIiMzMTU2NjVcIixcbiAgICBcIndpc3BcIjogXCIjNzU4MkQxXCIsXG4gICAgXCJEXCI6IFwiI2JhNTk1ZVwiLFxuICAgIFwiS290bGluXCI6IFwiI0YxOEUzM1wiLFxuICAgIFwiT3BhbFwiOiBcIiNmN2VkZTBcIixcbiAgICBcIkNyeXN0YWxcIjogXCIjNzc2NzkxXCIsXG4gICAgXCJPYmplY3RpdmUtQ1wiOiBcIiM0MzhlZmZcIixcbiAgICBcIkNvbGRGdXNpb24gQ0ZDXCI6IFwiI2VkMmNkNlwiLFxuICAgIFwiT3pcIjogXCIjZmFiNzM4XCIsXG4gICAgXCJNaXJhaFwiOiBcIiNjN2E5MzhcIixcbiAgICBcIk9iamVjdGl2ZS1KXCI6IFwiI2ZmMGM1YVwiLFxuICAgIFwiR29zdVwiOiBcIiM4MjkzN2ZcIixcbiAgICBcIkZyZWVNYXJrZXJcIjogXCIjMDA1MGIyXCIsXG4gICAgXCJSdWJ5XCI6IFwiIzcwMTUxNlwiLFxuICAgIFwiQ29tcG9uZW50IFBhc2NhbFwiOiBcIiNiMGNlNGVcIixcbiAgICBcIkFyY1wiOiBcIiNhYTJhZmVcIixcbiAgICBcIkJyYWluZnVja1wiOiBcIiMyRjI1MzBcIixcbiAgICBcIk5pdFwiOiBcIiMwMDk5MTdcIixcbiAgICBcIkFQTFwiOiBcIiM1QTgxNjRcIixcbiAgICBcIkdvXCI6IFwiIzM3NWVhYlwiLFxuICAgIFwiVmlzdWFsIEJhc2ljXCI6IFwiIzk0NWRiN1wiLFxuICAgIFwiUEhQXCI6IFwiIzRGNUQ5NVwiLFxuICAgIFwiQ2lycnVcIjogXCIjY2NjY2ZmXCIsXG4gICAgXCJTUUZcIjogXCIjM0YzRjNGXCIsXG4gICAgXCJHbHlwaFwiOiBcIiNlNGNjOThcIixcbiAgICBcIkphdmFcIjogXCIjYjA3MjE5XCIsXG4gICAgXCJNQVhTY3JpcHRcIjogXCIjMDBhNmE2XCIsXG4gICAgXCJTY2FsYVwiOiBcIiNEQzMyMkZcIixcbiAgICBcIk1ha2VmaWxlXCI6IFwiIzQyNzgxOVwiLFxuICAgIFwiQ29sZEZ1c2lvblwiOiBcIiNlZDJjZDZcIixcbiAgICBcIlBlcmxcIjogXCIjMDI5OGMzXCIsXG4gICAgXCJMdWFcIjogXCIjMDAwMDgwXCIsXG4gICAgXCJWdWVcIjogXCIjMmMzZTUwXCIsXG4gICAgXCJWZXJpbG9nXCI6IFwiI2IyYjdmOFwiLFxuICAgIFwiRmFjdG9yXCI6IFwiIzYzNjc0NlwiLFxuICAgIFwiSGF4ZVwiOiBcIiNkZjc5MDBcIixcbiAgICBcIlB1cmUgRGF0YVwiOiBcIiM5MWRlNzlcIixcbiAgICBcIkZvcnRoXCI6IFwiIzM0MTcwOFwiLFxuICAgIFwiUmVkXCI6IFwiI2VlMDAwMFwiLFxuICAgIFwiSHlcIjogXCIjNzc5MEIyXCIsXG4gICAgXCJWb2x0XCI6IFwiIzFGMUYxRlwiLFxuICAgIFwiTFNMXCI6IFwiIzNkOTk3MFwiLFxuICAgIFwiZUNcIjogXCIjOTEzOTYwXCIsXG4gICAgXCJDb2ZmZWVTY3JpcHRcIjogXCIjMjQ0Nzc2XCIsXG4gICAgXCJIVE1MXCI6IFwiI2U0NGIyM1wiLFxuICAgIFwiTGV4XCI6IFwiI0RCQ0EwMFwiLFxuICAgIFwiQVBJIEJsdWVwcmludFwiOiBcIiMyQUNDQThcIixcbiAgICBcIlN3aWZ0XCI6IFwiI2ZmYWM0NVwiLFxuICAgIFwiQ1wiOiBcIiM1NTU1NTVcIixcbiAgICBcIkF1dG9Ib3RrZXlcIjogXCIjNjU5NGI5XCIsXG4gICAgXCJJc2FiZWxsZVwiOiBcIiNGRUZFMDBcIixcbiAgICBcIk1ldGFsXCI6IFwiIzhmMTRlOVwiLFxuICAgIFwiQ2xhcmlvblwiOiBcIiNkYjkwMWVcIixcbiAgICBcIkpTT05pcVwiOiBcIiM0MGQ0N2VcIixcbiAgICBcIkJvb1wiOiBcIiNkNGJlYzFcIixcbiAgICBcIkF1dG9JdFwiOiBcIiMxQzM1NTJcIixcbiAgICBcIkNsb2p1cmVcIjogXCIjZGI1ODU1XCIsXG4gICAgXCJSdXN0XCI6IFwiI2RlYTU4NFwiLFxuICAgIFwiUHJvbG9nXCI6IFwiIzc0MjgzY1wiLFxuICAgIFwiU291cmNlUGF3blwiOiBcIiM1Yzc2MTFcIixcbiAgICBcIkFNUExcIjogXCIjRTZFRkJCXCIsXG4gICAgXCJGT1JUUkFOXCI6IFwiIzRkNDFiMVwiLFxuICAgIFwiQU5UTFJcIjogXCIjOURDM0ZGXCIsXG4gICAgXCJIYXJib3VyXCI6IFwiIzBlNjBlM1wiLFxuICAgIFwiVGNsXCI6IFwiI2U0Y2M5OFwiLFxuICAgIFwiQmxpdHpNYXhcIjogXCIjY2Q2NDAwXCIsXG4gICAgXCJQaWdMYXRpblwiOiBcIiNmY2Q3ZGVcIixcbiAgICBcIkxhc3NvXCI6IFwiIzk5OTk5OVwiLFxuICAgIFwiRUNMXCI6IFwiIzhhMTI2N1wiLFxuICAgIFwiVkhETFwiOiBcIiNhZGIyY2JcIixcbiAgICBcIkVsbVwiOiBcIiM2MEI1Q0NcIixcbiAgICBcIlByb3BlbGxlciBTcGluXCI6IFwiIzdmYTJhN1wiLFxuICAgIFwiWDEwXCI6IFwiIzRCNkJFRlwiLFxuICAgIFwiSURMXCI6IFwiI2EzNTIyZlwiLFxuICAgIFwiQVRTXCI6IFwiIzFhYzYyMFwiLFxuICAgIFwiQWRhXCI6IFwiIzAyZjg4Y1wiLFxuICAgIFwiVW5pdHkzRCBBc3NldFwiOiBcIiNhYjY5YTFcIixcbiAgICBcIk51XCI6IFwiI2M5ZGY0MFwiLFxuICAgIFwiTEZFXCI6IFwiIzAwNDIwMFwiLFxuICAgIFwiU3VwZXJDb2xsaWRlclwiOiBcIiM0NjM5MGJcIixcbiAgICBcIk94eWdlbmVcIjogXCIjY2RkMGUzXCIsXG4gICAgXCJBU1BcIjogXCIjNmE0MGZkXCIsXG4gICAgXCJBc3NlbWJseVwiOiBcIiM2RTRDMTNcIixcbiAgICBcIkdudXBsb3RcIjogXCIjZjBhOWYwXCIsXG4gICAgXCJKRmxleFwiOiBcIiNEQkNBMDBcIixcbiAgICBcIk5ldExpbnhcIjogXCIjMGFhMGZmXCIsXG4gICAgXCJUdXJpbmdcIjogXCIjNDVmNzE1XCIsXG4gICAgXCJWYWxhXCI6IFwiI2ZiZTVjZFwiLFxuICAgIFwiUHJvY2Vzc2luZ1wiOiBcIiMwMDk2RDhcIixcbiAgICBcIkFyZHVpbm9cIjogXCIjYmQ3OWQxXCIsXG4gICAgXCJGTFVYXCI6IFwiIzg4Y2NmZlwiLFxuICAgIFwiTmV0TG9nb1wiOiBcIiNmZjYzNzVcIixcbiAgICBcIkMgU2hhcnBcIjogXCIjMTc4NjAwXCIsXG4gICAgXCJDU1NcIjogXCIjNTYzZDdjXCIsXG4gICAgXCJFbWFjcyBMaXNwXCI6IFwiI2MwNjVkYlwiLFxuICAgIFwiU3RhblwiOiBcIiNiMjAxMWRcIixcbiAgICBcIlNhbHRTdGFja1wiOiBcIiM2NDY0NjRcIixcbiAgICBcIlFNTFwiOiBcIiM0NGE1MWNcIixcbiAgICBcIlBpa2VcIjogXCIjMDA1MzkwXCIsXG4gICAgXCJMT0xDT0RFXCI6IFwiI2NjOTkwMFwiLFxuICAgIFwib29jXCI6IFwiI2IwYjc3ZVwiLFxuICAgIFwiSGFuZGxlYmFyc1wiOiBcIiMwMWE5ZDZcIixcbiAgICBcIkpcIjogXCIjOUVFREZGXCIsXG4gICAgXCJNYXNrXCI6IFwiI2Y5NzczMlwiLFxuICAgIFwiRW1iZXJTY3JpcHRcIjogXCIjRkZGNEYzXCIsXG4gICAgXCJUZVhcIjogXCIjM0Q2MTE3XCIsXG4gICAgXCJOZW1lcmxlXCI6IFwiIzNkM2M2ZVwiLFxuICAgIFwiS1JMXCI6IFwiIzI4NDMxZlwiLFxuICAgIFwiUmVuJ1B5XCI6IFwiI2ZmN2Y3ZlwiLFxuICAgIFwiVW5pZmllZCBQYXJhbGxlbCBDXCI6IFwiIzRlMzYxN1wiLFxuICAgIFwiR29sb1wiOiBcIiM4ODU2MkFcIixcbiAgICBcIkZhbmN5XCI6IFwiIzdiOWRiNFwiLFxuICAgIFwiT0NhbWxcIjogXCIjM2JlMTMzXCIsXG4gICAgXCJTaGVuXCI6IFwiIzEyMEYxNFwiLFxuICAgIFwiUGFzY2FsXCI6IFwiI2IwY2U0ZVwiLFxuICAgIFwiRiNcIjogXCIjYjg0NWZjXCIsXG4gICAgXCJQdXBwZXRcIjogXCIjMzAyQjZEXCIsXG4gICAgXCJBY3Rpb25TY3JpcHRcIjogXCIjODgyQjBGXCIsXG4gICAgXCJEaWZmXCI6IFwiIzg4ZGRkZFwiLFxuICAgIFwiUmFnZWwgaW4gUnVieSBIb3N0XCI6IFwiIzlkNTIwMFwiLFxuICAgIFwiRmFudG9tXCI6IFwiI2RiZGVkNVwiLFxuICAgIFwiWmVwaGlyXCI6IFwiIzExOGY5ZVwiLFxuICAgIFwiQ2xpY2tcIjogXCIjRTRFNkYzXCIsXG4gICAgXCJTbWFsbHRhbGtcIjogXCIjNTk2NzA2XCIsXG4gICAgXCJETVwiOiBcIiM0NDcyNjVcIixcbiAgICBcIklva2VcIjogXCIjMDc4MTkzXCIsXG4gICAgXCJQb2dvU2NyaXB0XCI6IFwiI2Q4MDA3NFwiLFxuICAgIFwiTGl2ZVNjcmlwdFwiOiBcIiM0OTk4ODZcIixcbiAgICBcIkphdmFTY3JpcHRcIjogXCIjZjFlMDVhXCIsXG4gICAgXCJWaW1MXCI6IFwiIzE5OWY0YlwiLFxuICAgIFwiUHVyZVNjcmlwdFwiOiBcIiMxRDIyMkRcIixcbiAgICBcIkFCQVBcIjogXCIjRTgyNzRCXCIsXG4gICAgXCJNYXRsYWJcIjogXCIjYmI5MmFjXCIsXG4gICAgXCJTbGFzaFwiOiBcIiMwMDdlZmZcIixcbiAgICBcIlJcIjogXCIjMTk4Y2U3XCIsXG4gICAgXCJFcmxhbmdcIjogXCIjQjgzOTk4XCIsXG4gICAgXCJQYW5cIjogXCIjY2MwMDAwXCIsXG4gICAgXCJMb29rTUxcIjogXCIjNjUyQjgxXCIsXG4gICAgXCJFYWdsZVwiOiBcIiM4MTRDMDVcIixcbiAgICBcIlNjaGVtZVwiOiBcIiMxZTRhZWNcIixcbiAgICBcIlBMU1FMXCI6IFwiI2RhZDhkOFwiLFxuICAgIFwiUHl0aG9uXCI6IFwiIzM1NzJBNVwiLFxuICAgIFwiTWF4XCI6IFwiI2M0YTc5Y1wiLFxuICAgIFwiQ29tbW9uIExpc3BcIjogXCIjM2ZiNjhiXCIsXG4gICAgXCJMYXR0ZVwiOiBcIiNBOEZGOTdcIixcbiAgICBcIlhRdWVyeVwiOiBcIiM1MjMyZTdcIixcbiAgICBcIk9tZ3JvZmxcIjogXCIjY2FiYmZmXCIsXG4gICAgXCJYQ1wiOiBcIiM5OURBMDdcIixcbiAgICBcIk5pbXJvZFwiOiBcIiMzNzc3NWJcIixcbiAgICBcIlN5c3RlbVZlcmlsb2dcIjogXCIjREFFMUMyXCIsXG4gICAgXCJDaGFwZWxcIjogXCIjOGRjNjNmXCIsXG4gICAgXCJHcm9vdnlcIjogXCIjZTY5ZjU2XCIsXG4gICAgXCJEeWxhblwiOiBcIiM2YzYxNmVcIixcbiAgICBcIkVcIjogXCIjY2NjZTM1XCIsXG4gICAgXCJQYXJyb3RcIjogXCIjZjNjYTBhXCIsXG4gICAgXCJHcmFtbWF0aWNhbCBGcmFtZXdvcmtcIjogXCIjNzlhYTdhXCIsXG4gICAgXCJHYW1lIE1ha2VyIExhbmd1YWdlXCI6IFwiIzhmYjIwMFwiLFxuICAgIFwiUGFweXJ1c1wiOiBcIiM2NjAwY2NcIixcbiAgICBcIk5ldExpbngrRVJCXCI6IFwiIzc0N2ZhYVwiLFxuICAgIFwiQ2xlYW5cIjogXCIjM0Y4NUFGXCIsXG4gICAgXCJBbGxveVwiOiBcIiM2NEM4MDBcIixcbiAgICBcIlNxdWlycmVsXCI6IFwiIzgwMDAwMFwiLFxuICAgIFwiUEFXTlwiOiBcIiNkYmIyODRcIixcbiAgICBcIlVucmVhbFNjcmlwdFwiOiBcIiNhNTRjNGRcIixcbiAgICBcIlN0YW5kYXJkIE1MXCI6IFwiI2RjNTY2ZFwiLFxuICAgIFwiU2xpbVwiOiBcIiNmZjhmNzdcIixcbiAgICBcIlBlcmw2XCI6IFwiIzAwMDBmYlwiLFxuICAgIFwiSnVsaWFcIjogXCIjYTI3MGJhXCIsXG4gICAgXCJIYXNrZWxsXCI6IFwiIzI5YjU0NFwiLFxuICAgIFwiTkNMXCI6IFwiIzI4NDMxZlwiLFxuICAgIFwiSW9cIjogXCIjYTkxODhkXCIsXG4gICAgXCJSb3VnZVwiOiBcIiNjYzAwODhcIixcbiAgICBcImNwcFwiOiBcIiNmMzRiN2RcIixcbiAgICBcIkFHUyBTY3JpcHRcIjogXCIjQjlEOUZGXCIsXG4gICAgXCJEb2dlc2NyaXB0XCI6IFwiI2NjYTc2MFwiLFxuICAgIFwibmVzQ1wiOiBcIiM5NEIwQzdcIixcbiAgICBcIkMjXCI6XCIjMTc4NjAwXCIsXG59O1xuXG5sYW5ndWFnZUNvbG9yID0gdG9JbW11dGFibGUobGFuZ3VhZ2VDb2xvcik7XG5cbmV4cG9ydCBkZWZhdWx0IGxhbmd1YWdlQ29sb3I7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbW1vbi9sYW5ndWFnZUNvbG9yLmpzIiwiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvaW5kZXguanMhLi9zdHlsZS5sZXNzXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIHt9KTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuXHQvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuXHRpZighY29udGVudC5sb2NhbHMpIHtcblx0XHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9pbmRleC5qcyEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9sZXNzLWxvYWRlci9pbmRleC5qcyEuL3N0eWxlLmxlc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvaW5kZXguanMhLi9zdHlsZS5sZXNzXCIpO1xuXHRcdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cdFx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdFx0fSk7XG5cdH1cblx0Ly8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21wb25lbnRzL0xhbmd1YWdlQ29sb3Ivc3R5bGUubGVzc1xuLy8gbW9kdWxlIGlkID0gNzc5XG4vLyBtb2R1bGUgY2h1bmtzID0gMiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKSgpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmxhbmd1YWdlLWNvbG9ye3Bvc2l0aW9uOnJlbGF0aXZlfS5sYW5ndWFnZS1jb2xvciAuY29sb3J7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6LjE2cmVtO2hlaWdodDouMTZyZW07Ym9yZGVyLXJhZGl1czo1MCU7bGVmdDouMjRyZW07dG9wOi4wNHJlbX0ubGFuZ3VhZ2UtY29sb3IgLmxhbmd1YWdle3BhZGRpbmctbGVmdDouNDY2NjY3cmVtO2ZvbnQtc2l6ZTouMTZyZW07bGluZS1oZWlnaHQ6LjI1MzMzM3JlbX1cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY3NzLWxvYWRlciEuL34vcG9zdGNzcy1sb2FkZXIhLi9+L2xlc3MtbG9hZGVyIS4vc3JjL2NvbXBvbmVudHMvTGFuZ3VhZ2VDb2xvci9zdHlsZS5sZXNzXG4vLyBtb2R1bGUgaWQgPSA3ODBcbi8vIG1vZHVsZSBjaHVua3MgPSAyIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBJbW11dGFibGUgZnJvbSAnaW1tdXRhYmxlJztcbmltcG9ydCBMaXN0QmxvY2sgZnJvbSAnY29tcG9uZW50cy9MaXN0QmxvY2snO1xuaW1wb3J0IFVzZXJQbGFjZWhvbGRlciBmcm9tICdjb21wb25lbnRzL1BsYWNlaG9sZGVyL1VzZXJQbGFjZWhvbGRlcic7XG5pbXBvcnQgTGFuZ3VhZ2VDb2xvciBmcm9tICdjb21wb25lbnRzL0xhbmd1YWdlQ29sb3InO1xuaW1wb3J0IExvYWRpbmcgZnJvbSAnY29tcG9uZW50cy9Mb2FkaW5nJztcblxuY29uc3Qge1xuICAgIExpc3QsXG4gICAgSXRlbVxufSA9IExpc3RCbG9jaztcblxuY29uc3QgU3RhcnMgPSAoe1xuICAgICAgICBzdGFycyxcbiAgICAgICAgcGxhY2Vob2xkZXIsXG4gICAgICAgIGlzRmV0Y2hpbmcsXG4gICAgfSkgPT5cbiAgICBpc0ZldGNoaW5nID8gPExvYWRpbmcgLz4gOlxuICAgIHN0YXJzLnNpemUgIT09IDAgP1xuICAgIDxMaXN0IGNsYXNzTmFtZT0nc3RhcnMnPlxuICAgICAgICB7XG4gICAgICAgICAgICBzdGFycy5tYXAoc3RhciA9PiAoXG4gICAgICAgICAgICAgICAgPEl0ZW0ga2V5PXtzdGFyLmdldCgnaWQnKX0+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdpdGVtLWlubmVyJz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdpdGVtLXRpdGxlIGZ1bGwtbmFtZSc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3N0YXIuZ2V0KCdmdWxsX25hbWUnKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2Rlcyc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3N0YXIuZ2V0KCdkZXNjcmlwdGlvbicpfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nc3Rhci1sYW5ndWFnZSc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3N0YXItY291bnQnPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj7imIU8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtzdGFyLmdldCgnc3RhcmdhemVyc19jb3VudCcpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxMYW5ndWFnZUNvbG9yIGxhbmd1YWdlPXtzdGFyLmdldCgnbGFuZ3VhZ2UnKX0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L0l0ZW0+XG4gICAgICAgICAgICApKVxuICAgICAgICB9XG4gICAgPC9MaXN0PiA6IDxVc2VyUGxhY2Vob2xkZXIgdGV4dD17cGxhY2Vob2xkZXJ9IC8+O1xuXG5TdGFycy5wcm9wVHlwZXMgPSB7XG4gICAgc3RhcnM6IFJlYWN0LlByb3BUeXBlcy5pbnN0YW5jZU9mKEltbXV0YWJsZS5MaXN0KSxcbiAgICBwbGFjZWhvbGRlcjogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICBpc0ZldGNoaW5nOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFN0YXJzO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL1VzZXIvY29tcG9uZW50cy9TdGFycy5qc3giLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEltbXV0YWJsZSBmcm9tICdpbW11dGFibGUnO1xuaW1wb3J0IExpc3RCbG9jayBmcm9tICdjb21wb25lbnRzL0xpc3RCbG9jayc7XG5pbXBvcnQgVXNlclBsYWNlaG9sZGVyIGZyb20gJ2NvbXBvbmVudHMvUGxhY2Vob2xkZXIvVXNlclBsYWNlaG9sZGVyJztcbmltcG9ydCBMb2FkaW5nIGZyb20gJ2NvbXBvbmVudHMvTG9hZGluZyc7XG5cbmNvbnN0IHtcbiAgICBMaXN0LFxuICAgIEl0ZW1cbn0gPSBMaXN0QmxvY2s7XG5cbmNvbnN0IEZvbGxvd2VycyA9ICh7XG4gICAgICAgIGZvbGxvd2VycyxcbiAgICAgICAgcGxhY2Vob2xkZXIsXG4gICAgICAgIGlzRmV0Y2hpbmcsXG4gICAgfSkgPT5cbiAgICBpc0ZldGNoaW5nID8gPExvYWRpbmcgLz4gOlxuICAgIGZvbGxvd2Vycy5zaXplICE9PSAwID9cbiAgICA8TGlzdCBjbGFzc05hbWU9J2ZvbGxvd2Vycyc+XG4gICAgICAgIHtcbiAgICAgICAgICAgIGZvbGxvd2Vycy5tYXAoZm9sID0+IChcbiAgICAgICAgICAgICAgICA8SXRlbSBrZXk9e2ZvbC5nZXQoJ2lkJyl9PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0naXRlbS1tZWRpYSc+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz17Zm9sLmdldCgnYXZhdGFyX3VybCcpfSAvPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2l0ZW0taW5uZXInPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2l0ZW0tdGl0bGUnPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtmb2wuZ2V0KCduYW1lJyl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+e2ZvbC5nZXQoJ2xvZ2luJyl9PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nbG9jYXRpb24nPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtmb2wuZ2V0KCdsb2NhdGlvbicpfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvSXRlbT5cbiAgICAgICAgICAgICkpXG4gICAgICAgIH1cbiAgICA8L0xpc3Q+IDogPFVzZXJQbGFjZWhvbGRlciB0ZXh0PXtwbGFjZWhvbGRlcn0gLz47XG5cbkZvbGxvd2Vycy5wcm9wVHlwZXMgPSB7XG4gICAgZm9sbG93ZXJzOiBSZWFjdC5Qcm9wVHlwZXMuaW5zdGFuY2VPZihJbW11dGFibGUuTGlzdCksXG4gICAgcGxhY2Vob2xkZXI6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgaXNGZXRjaGluZzogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBGb2xsb3dlcnM7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21vZHVsZXMvVXNlci9jb21wb25lbnRzL0ZvbGxvd2Vycy5qc3giLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEltbXV0YWJsZSBmcm9tICdpbW11dGFibGUnO1xuaW1wb3J0IExpc3RCbG9jayBmcm9tICdjb21wb25lbnRzL0xpc3RCbG9jayc7XG5pbXBvcnQgVXNlclBsYWNlaG9sZGVyIGZyb20gJ2NvbXBvbmVudHMvUGxhY2Vob2xkZXIvVXNlclBsYWNlaG9sZGVyJztcbmltcG9ydCBMb2FkaW5nIGZyb20gJ2NvbXBvbmVudHMvTG9hZGluZyc7XG5cbmNvbnN0IHtcbiAgICBMaXN0LFxuICAgIEl0ZW1cbn0gPSBMaXN0QmxvY2s7XG5cbmNvbnN0IEZvbGxvd2luZ3MgPSAoe1xuICAgICAgICBmb2xsb3dpbmdzLFxuICAgICAgICBwbGFjZWhvbGRlcixcbiAgICAgICAgaXNGZXRjaGluZyxcbiAgICB9KSA9PlxuICAgIGlzRmV0Y2hpbmcgPyA8TG9hZGluZyAvPiA6XG4gICAgZm9sbG93aW5ncy5zaXplICE9PSAwID9cbiAgICA8TGlzdCBjbGFzc05hbWU9J2ZvbGxvd2luZ3MnPlxuICAgICAgICB7XG4gICAgICAgICAgICBmb2xsb3dpbmdzLm1hcChmb2wgPT4gKFxuICAgICAgICAgICAgICAgIDxJdGVtIGtleT17Zm9sLmdldCgnaWQnKX0+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdpdGVtLW1lZGlhJz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtmb2wuZ2V0KCdhdmF0YXJfdXJsJyl9IC8+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0naXRlbS1pbm5lcic+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0naXRlbS10aXRsZSc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2ZvbC5nZXQoJ25hbWUnKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj57Zm9sLmdldCgnbG9naW4nKX08L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdsb2NhdGlvbic+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2ZvbC5nZXQoJ2xvY2F0aW9uJyl9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9JdGVtPlxuICAgICAgICAgICAgKSlcbiAgICAgICAgfVxuICAgIDwvTGlzdD4gOiA8VXNlclBsYWNlaG9sZGVyIHRleHQ9e3BsYWNlaG9sZGVyfSAvPjtcblxuRm9sbG93aW5ncy5wcm9wVHlwZXMgPSB7XG4gICAgZm9sbG93aW5nczogUmVhY3QuUHJvcFR5cGVzLmluc3RhbmNlT2YoSW1tdXRhYmxlLkxpc3QpLFxuICAgIHBsYWNlaG9sZGVyOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgIGlzRmV0Y2hpbmc6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgRm9sbG93aW5ncztcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbW9kdWxlcy9Vc2VyL2NvbXBvbmVudHMvRm9sbG93aW5ncy5qc3giLCIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9pbmRleC5qcyEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9sZXNzLWxvYWRlci9pbmRleC5qcyEuL3N0eWxlLmxlc3NcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9hZGRTdHlsZXMuanNcIikoY29udGVudCwge30pO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG5cdC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdGlmKCFjb250ZW50LmxvY2Fscykge1xuXHRcdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2luZGV4LmpzIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2luZGV4LmpzIS4vc3R5bGUubGVzc1wiLCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9pbmRleC5qcyEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9sZXNzLWxvYWRlci9pbmRleC5qcyEuL3N0eWxlLmxlc3NcIik7XG5cdFx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblx0XHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0XHR9KTtcblx0fVxuXHQvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL21vZHVsZXMvVXNlci9zdHlsZS5sZXNzXG4vLyBtb2R1bGUgaWQgPSA3ODRcbi8vIG1vZHVsZSBjaHVua3MgPSAyIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKCk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJib2R5e2JhY2tncm91bmQtY29sb3I6I2ZmZn0uYnV0dG9uLXJlZHtjb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6I2Y0NDMzNiFpbXBvcnRhbnR9LmJ1dHRvbi1vcmFuZ2V7Y29sb3I6I2ZmZjtiYWNrZ3JvdW5kLWNvbG9yOiNmZjk4MDAhaW1wb3J0YW50fS5idXR0b24tZ3JlZW57Y29sb3I6I2ZmZjtiYWNrZ3JvdW5kLWNvbG9yOiM0Y2FmNTAhaW1wb3J0YW50fS5idXR0b24tYmx1ZXtjb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6IzIxOTZmMyFpbXBvcnRhbnR9LmJ1dHRvbntib3JkZXItcmFkaXVzOjB9LmVudHJ5LXdyYXAsLmVudHJ5LXdyYXA+ZGl2LC5lbnRyeS13cmFwPmRpdj5kaXZ7aGVpZ2h0OjEwMCV9Lmxpc3QtYmxvY2sgLml0ZW0taW5uZXI6YWZ0ZXJ7ZGlzcGxheTpub25lfS51c2VyIC5hY3RpdmUtc3RhdGV7YmFja2dyb3VuZC1jb2xvcjojYmZlNWYzfS51c2VyIC5uYXZiYXItaW5uZXJ7YmFja2dyb3VuZC1jb2xvcjojZjVmNWY1fS51c2VyIC5uYXZiYXI6YWZ0ZXJ7ZGlzcGxheTpub25lfS51c2VyIC50YWJzLXdyYXB7cG9zaXRpb246cmVsYXRpdmU7ei1pbmRleDoyO2hlaWdodDouNTMzMzMzcmVtO21hcmdpbi10b3A6LS4wMTMzMzNyZW07b3ZlcmZsb3cteTpoaWRkZW47b3ZlcmZsb3cteDphdXRvO2JhY2tncm91bmQtY29sb3I6I2Y1ZjVmNTtib3JkZXItYm90dG9tOi4wMTMzMzNyZW0gc29saWQgI2Q1ZDVkNTt3aWR0aDoxMDAlfS51c2VyIC50YWJzLXdyYXA6Oi13ZWJraXQtc2Nyb2xsYmFye3dpZHRoOjB9LnVzZXIgLnRhYnMtd3JhcCAudGFic3tvdmVyZmxvdy15OmhpZGRlbjtvdmVyZmxvdy14OnNjcm9sbDt0ZXh0LWFsaWduOmNlbnRlcjt3aGl0ZS1zcGFjZTpub3dyYXA7d2lkdGg6NnJlbTtiYWNrZ3JvdW5kLWNvbG9yOiNmNWY1ZjU7cGFkZGluZy1ib3R0b206LjI2NjY2N3JlbTttYXJnaW4tdG9wOi0uMDhyZW19LnVzZXIgLnRhYi5zZWxlY3RlZHtmb250LXdlaWdodDo2MDA7Y29sb3I6I2M5NTEwY30udXNlciAudXNlci1pdGVte2JhY2tncm91bmQtY29sb3I6I2ZhZmFmYTtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4O3Bvc2l0aW9uOnJlbGF0aXZlO3BhZGRpbmc6LjJyZW0gLjJyZW0gLjEzMzMzM3JlbTtvdmVyZmxvdzp2aXNpYmxlO2xpbmUtaGVpZ2h0OjEuNTtib3JkZXItYm90dG9tOi4wMTMzMzNyZW0gc29saWQgI2NjY30udXNlciAudXNlci1pdGVtIGltZ3t3aWR0aDoxLjQ2NjY2N3JlbTtoZWlnaHQ6MS40NjY2NjdyZW07Ym9yZGVyLXJhZGl1czouMDRyZW19LnVzZXIgLnVzZXItaXRlbSAudXNlci1pbmZve3BhZGRpbmctbGVmdDouMnJlbX0udXNlciAudXNlci1pdGVtIC51c2VyLWluZm8gLmxvZ2lue21hcmdpbjowO2ZvbnQtc2l6ZTouMjEzMzMzcmVtO2NvbG9yOiMzMzN9LnVzZXIgLnVzZXItaXRlbSAudXNlci1pbmZvIC5uYW1le21hcmdpbjowO2ZvbnQtc2l6ZTouMTZyZW07Zm9udC13ZWlnaHQ6NDAwO2NvbG9yOiM3Njc2NzZ9LnVzZXIgLnVzZXItaXRlbSAudXNlci1pbmZvIC5pbmZve2xpc3Qtc3R5bGU6bm9uZTtwYWRkaW5nOjA7bWFyZ2luOi4xcmVtIDAgMH0udXNlciAudXNlci1pdGVtIC51c2VyLWluZm8gLmluZm8gbGl7Ym9yZGVyOm5vbmU7bWFyZ2luLWJvdHRvbTowO2ZvbnQtc2l6ZTouMTZyZW07bGluZS1oZWlnaHQ6MS44fS51c2VyIC5yZXBzLXdyYXB7cGFkZGluZzouMTZyZW0gLjE2cmVtIDB9LnVzZXIgLnJlcHMtd3JhcCAucmVwcy10aXRsZXtmb250LXNpemU6LjIxMzMzM3JlbTtmb250LXdlaWdodDo0MDB9LnVzZXIgLnJlcHMtd3JhcCAudXNlci1yZXBze2JvcmRlcjouMDEzMzMzcmVtIHNvbGlkICNjY2N9LnVzZXIgLnN0YXItY291bnR7bWFyZ2luLWJvdHRvbTouMDY2NjY3cmVtO21hcmdpbi1sZWZ0Oi4wNjY2NjdyZW07Zm9udC1zaXplOi4xNDY2NjdyZW07Y29sb3I6Izk5OX0udXNlciAuZnVsbC1uYW1le21hcmdpbi1ib3R0b206LjA0cmVtO2ZvbnQtd2VpZ2h0OjUwMDtsaW5lLWhlaWdodDoxLjI7Y29sb3I6IzQwNzhjMDt3b3JkLXdyYXA6YnJlYWstd29yZDttYXgtd2lkdGg6ODAlO3doaXRlLXNwYWNlOm5vcm1hbDtmb250LXNpemU6LjE4NjY2N3JlbX0udXNlciAucmVwb3NpdG9yaWVzIC5pdGVtLWlubmVyLC51c2VyIC5zdGFycyAuaXRlbS1pbm5lcntkaXNwbGF5OmJsb2NrfS51c2VyIC5zdGFycyAuZGVze2ZvbnQtc2l6ZTouMTZyZW07Y29sb3I6Izc2NzY3Nn0udXNlciAuc3Rhci1sYW5ndWFnZXttYXJnaW4tYm90dG9tOi4wNjY2NjdyZW07ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDtmb250LXNpemU6LjE4NjY2N3JlbX0udXNlciAuc3Rhci1sYW5ndWFnZSAuc3Rhci1jb3VudHtmb250LXNpemU6LjE4NjY2N3JlbTttYXJnaW46MDtjb2xvcjojNzY3Njc2fS51c2VyIC5zdGFyLWxhbmd1YWdlIC5mdWxsLW5hbWV7bWF4LXdpZHRoOjEwMCV9LnVzZXIgLmZvbGxvd2VycyAuaXRlbS1tZWRpYSwudXNlciAuZm9sbG93aW5ncyAuaXRlbS1tZWRpYXtwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi4ycmVtfS51c2VyIC5mb2xsb3dlcnMgLml0ZW0taW5uZXIsLnVzZXIgLmZvbGxvd2luZ3MgLml0ZW0taW5uZXJ7ZGlzcGxheTpibG9jazttYXJnaW4tbGVmdDouNnJlbTstd2Via2l0LWJveC1wYWNrOnN0YXJ0Oy1tcy1mbGV4LXBhY2s6c3RhcnQ7anVzdGlmeS1jb250ZW50OmZsZXgtc3RhcnR9LnVzZXIgLmZvbGxvd2VycyAuaXRlbS1pbm5lciAuaXRlbS10aXRsZSwudXNlciAuZm9sbG93aW5ncyAuaXRlbS1pbm5lciAuaXRlbS10aXRsZXtmb250LXNpemU6LjE4NjY2N3JlbTtjb2xvcjojNDA3OGMwfS51c2VyIC5mb2xsb3dlcnMgLml0ZW0taW5uZXIgc3BhbiwudXNlciAuZm9sbG93aW5ncyAuaXRlbS1pbm5lciBzcGFue2ZvbnQtc2l6ZTouMTg2NjY3cmVtO3BhZGRpbmctbGVmdDouMDY2NjY3cmVtO2NvbG9yOiMzMzN9LnVzZXIgLmZvbGxvd2VycyAuaXRlbS1pbm5lciAubG9jYXRpb24sLnVzZXIgLmZvbGxvd2luZ3MgLml0ZW0taW5uZXIgLmxvY2F0aW9ue2ZvbnQtc2l6ZTouMTZyZW07Y29sb3I6Izc2NzY3Nn0udXNlciAuZm9sbG93ZXJzIGltZywudXNlciAuZm9sbG93aW5ncyBpbWd7d2lkdGg6LjRyZW07aGVpZ2h0Oi40cmVtfVwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jc3MtbG9hZGVyIS4vfi9wb3N0Y3NzLWxvYWRlciEuL34vbGVzcy1sb2FkZXIhLi9zcmMvbW9kdWxlcy9Vc2VyL3N0eWxlLmxlc3Ncbi8vIG1vZHVsZSBpZCA9IDc4NVxuLy8gbW9kdWxlIGNodW5rcyA9IDIiXSwic291cmNlUm9vdCI6IiJ9