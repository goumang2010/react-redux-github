webpackJsonp([2],{732:function(e,t,a){(function(e){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function l(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function i(e){return function(t){return E(_(t,e),e)}}Object.defineProperty(t,"__esModule",{value:!0});var s=a(579),c=r(s),u=a(584),f=r(u),d=a(300),p=r(d),m=a(585),g=r(m),b=function(){function e(e,t){for(var a=0;a<t.length;a++){var r=t[a];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,a,r){return a&&e(t.prototype,a),r&&e(t,r),t}}(),h=a(570),v=a(733),y=r(v);a(736);var w={Header:{displayName:"Header"}},E=(0,g.default)({filename:"D:/p/react-redux-github/src/components/Header/index.jsx",components:w,locals:[e],imports:[p.default]}),_=(0,f.default)({filename:"D:/p/react-redux-github/src/components/Header/index.jsx",components:w,locals:[],imports:[p.default,c.default]}),N=i("Header")(function(e){function t(e){return n(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return l(t,e),b(t,[{key:"go",value:function(e,t){"back"===e?this.props.dispatch((0,h.go)(-1)):this.props.dispatch((0,h.go)(t))}},{key:"goto",value:function(e){e&&this.props.dispatch((0,h.push)(e))}},{key:"render",value:function(){var e=this,t=this.props,a=t.left,r=t.center,n=t.right,o={width:28,height:28};return p.default.createElement("div",{className:"header"},p.default.createElement("div",{className:"navbar"},p.default.createElement("div",{className:"navbar-inner"},p.default.createElement("div",{className:"left link",onClick:function(){return e.go(a.event)}},a.icon?p.default.createElement(y.default,{name:a.icon,style:a.size?a.size:o}):a.text),p.default.createElement("div",{className:"center"},r.icon&&p.default.createElement(y.default,{name:r.icon,style:r.size?r.size:o}),r.text&&p.default.createElement("span",null,r.text)),p.default.createElement("div",{className:"right link",onClick:function(){return e.goto(n.url)}},n.icon?p.default.createElement(y.default,{name:n.icon,style:n.size?n.size:o}):n.text))))}}]),t}(p.default.Component));N.propTypes={left:p.default.PropTypes.object.isRequired,center:p.default.PropTypes.object.isRequired,right:p.default.PropTypes.object.isRequired},t.default=N}).call(t,a(496)(e))},733:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=a(300),o=r(n);a(734);var l=function(e){var t="../src/img/icon/"+e.name+".png";return o.default.createElement("img",{className:"img-icon",src:t,style:e.style,alt:"icon"})};l.propTypes={children:o.default.PropTypes.any},t.default=l},734:function(e,t,a){var r=a(735);"string"==typeof r&&(r=[[e.id,r,""]]);var n=a(470)(r,{});r.locals&&(e.exports=r.locals),r.locals||e.hot.accept(735,function(){var t=a(735);"string"==typeof t&&(t=[[e.id,t,""]]),n(t)}),e.hot.dispose(function(){n()})},735:function(e,t,a){t=e.exports=a(468)(),t.push([e.id,".img-icon{vertical-align:middle;width:.213333rem;height:.213333rem}",""])},736:function(e,t,a){var r=a(737);"string"==typeof r&&(r=[[e.id,r,""]]);var n=a(470)(r,{});r.locals&&(e.exports=r.locals),r.locals||e.hot.accept(737,function(){var t=a(737);"string"==typeof t&&(t=[[e.id,t,""]]),n(t)}),e.hot.dispose(function(){n()})},737:function(e,t,a){t=e.exports=a(468)(),t.push([e.id,"body{background-color:#fff}.button-red{color:#fff;background-color:#f44336!important}.button-orange{color:#fff;background-color:#ff9800!important}.button-green{color:#fff;background-color:#4caf50!important}.button-blue{color:#fff;background-color:#2196f3!important}.button{border-radius:0}.entry-wrap,.entry-wrap>div,.entry-wrap>div>div{height:100%}.list-block .item-inner:after{display:none}.header .link.active-state{opacity:.4;filter:alpha(opacity=40)}",""])},738:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var r in a)Object.prototype.hasOwnProperty.call(a,r)&&(e[r]=a[r])}return e},o=a(300),l=r(o),i=a(739),s=r(i);a(740);var c=function(e){return l.default.createElement("div",n({},e,{className:(0,s.default)("page-content",e.className)}),e.children)};c.propTypes={children:l.default.PropTypes.any.isRequired},t.default=c},739:function(e,t,a){var r,n;/*!
	  Copyright (c) 2016 Jed Watson.
	  Licensed under the MIT License (MIT), see
	  http://jedwatson.github.io/classnames
	*/
!function(){"use strict";function a(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var n=typeof r;if("string"===n||"number"===n)e.push(r);else if(Array.isArray(r))e.push(a.apply(null,r));else if("object"===n)for(var l in r)o.call(r,l)&&r[l]&&e.push(l)}}return e.join(" ")}var o={}.hasOwnProperty;"undefined"!=typeof e&&e.exports?e.exports=a:(r=[],n=function(){return a}.apply(t,r),!(void 0!==n&&(e.exports=n)))}()},740:function(e,t,a){var r=a(741);"string"==typeof r&&(r=[[e.id,r,""]]);var n=a(470)(r,{});r.locals&&(e.exports=r.locals),r.locals||e.hot.accept(741,function(){var t=a(741);"string"==typeof t&&(t=[[e.id,t,""]]),n(t)}),e.hot.dispose(function(){n()})},741:function(e,t,a){t=e.exports=a(468)(),t.push([e.id,".page-content{overflow:scroll;height:calc(100% - .586667rem)}",""])},742:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=a(743),o=r(n),l=a(744),i=r(l);a(745);var s={List:o.default,Item:i.default};t.default=s},743:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=a(300),o=r(n),l=a(739),i=r(l),s=function(e){var t=e.className,a=e.children,r=(0,i.default)("list-block",t,{});return o.default.createElement("div",{className:r},o.default.createElement("ul",null,a))};s.propTypes={children:o.default.PropTypes.any},t.default=s},744:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=a(300),o=r(n),l=a(739),i=r(l),s=function(e){var t=e.className,a=e.media,r=e.children,n=(0,i.default)("item-content",t,{media:a});return o.default.createElement("li",{className:n},r)};s.propTypes={children:o.default.PropTypes.any},t.default=s},745:function(e,t,a){var r=a(746);"string"==typeof r&&(r=[[e.id,r,""]]);var n=a(470)(r,{});r.locals&&(e.exports=r.locals),r.locals||e.hot.accept(746,function(){var t=a(746);"string"==typeof t&&(t=[[e.id,t,""]]),n(t)}),e.hot.dispose(function(){n()})},746:function(e,t,a){t=e.exports=a(468)(),t.push([e.id,".list-block{margin:0}.list-block .item-content{display:block}.list-block .item-content.media{display:-webkit-box;display:-ms-flexbox;display:flex}.list-block UL:after,.list-block ul:before{display:none}.list-block li{border-bottom:.013333rem solid #ccc}",""])},747:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=a(464),o=r(n),l=o.default.$,i=l("#pages");t.default=function(){i.removeClass("toolbar-fixed")}},748:function(e,t,a){(function(e){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function l(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function i(e){return function(t){return w(E(t,e),e)}}Object.defineProperty(t,"__esModule",{value:!0});var s=a(579),c=r(s),u=a(584),f=r(u),d=a(300),p=r(d),m=a(585),g=r(m),b=function(){function e(e,t){for(var a=0;a<t.length;a++){var r=t[a];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,a,r){return a&&e(t.prototype,a),r&&e(t,r),t}}(),h=a(739),v=r(h);a(749);var y={Tab:{displayName:"Tab"}},w=(0,g.default)({filename:"D:/p/react-redux-github/src/components/Tab/index.jsx",components:y,locals:[e],imports:[p.default]}),E=(0,f.default)({filename:"D:/p/react-redux-github/src/components/Tab/index.jsx",components:y,locals:[],imports:[p.default,c.default]}),_=i("Tab")(function(e){function t(e){n(this,t);var a=o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return a.state={activeName:e.activeName},a}return l(t,e),b(t,[{key:"changeActiveName",value:function(e){this.setState({activeName:e}),"function"==typeof this.props.onChange&&this.props.onChange(e)}},{key:"render",value:function(){var e=this,t=this.props,a=t.tabs,r=t.isFetching;return p.default.createElement("div",{className:"tabs"},a.map(function(t){return p.default.createElement("div",{key:t.activeName,className:(0,v.default)("tab",{selected:e.state.activeName===t.activeName}),onClick:function(){return e.changeActiveName(t.activeName)},disabled:r},t.title)}))}}]),t}(p.default.Component));_.porpTypes={tabs:p.default.PropTypes.object.isRequired,activeName:p.default.PropTypes.string.isRequired,isFetching:p.default.PropTypes.bool},_.defaultProps={isFetching:!1},t.default=_}).call(t,a(496)(e))},749:function(e,t,a){var r=a(750);"string"==typeof r&&(r=[[e.id,r,""]]);var n=a(470)(r,{});r.locals&&(e.exports=r.locals),r.locals||e.hot.accept(750,function(){var t=a(750);"string"==typeof t&&(t=[[e.id,t,""]]),n(t)}),e.hot.dispose(function(){n()})},750:function(e,t,a){t=e.exports=a(468)(),t.push([e.id,".tabs{display:table;width:100%;table-layout:fixed;background:#fafafa}.tabs .tab{display:table-cell;text-align:center;padding:.133333rem 0}",""])},757:function(e,t,a){var r=a(758);"string"==typeof r&&(r=[[e.id,r,""]]);var n=a(470)(r,{});r.locals&&(e.exports=r.locals),r.locals||e.hot.accept(758,function(){var t=a(758);"string"==typeof t&&(t=[[e.id,t,""]]),n(t)}),e.hot.dispose(function(){n()})},758:function(e,t,a){t=e.exports=a(468)(),t.push([e.id,".user-placeholder{padding:0;margin:.2rem;overflow:hidden;word-break:break-word;word-wrap:break-word;white-space:normal;border:.013333rem solid #ddd;border-radius:.04rem;background:#f5f5f5;border-color:#ccc;box-shadow:inset 0 0 .133333rem rgba(0,0,0,.1)}.user-placeholder .wrap{font-size:.2rem;color:#767676;text-align:center;padding:.2rem}.search-placeholder{padding:.6rem;font-weight:700;color:#767676;text-align:center}",""])},759:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=a(300),o=r(n);a(760);var l=function(){return o.default.createElement("div",{className:"loading"},o.default.createElement("div",{className:"loader"}),o.default.createElement("div",{className:"text"},"Loading..."))};t.default=l},760:function(e,t,a){var r=a(761);"string"==typeof r&&(r=[[e.id,r,""]]);var n=a(470)(r,{});r.locals&&(e.exports=r.locals),r.locals||e.hot.accept(761,function(){var t=a(761);"string"==typeof t&&(t=[[e.id,t,""]]),n(t)}),e.hot.dispose(function(){n()})},761:function(e,t,a){t=e.exports=a(468)(),t.push([e.id,".loading{margin:.266667rem auto;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;position:relative}.loading .text{position:absolute;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);font-size:.24rem}.loading .loader,.loading .loader:after{border-radius:50%;width:10em;height:10em}.loading .loader{margin:.8rem auto;font-size:.133333rem;position:relative;text-indent:-9999em;border-top:1.1em solid hsla(0,0%,80%,.2);border-right:1.1em solid hsla(0,0%,80%,.2);border-bottom:1.1em solid hsla(0,0%,80%,.2);border-left:1.1em solid #ccc;-webkit-transform:translateZ(0);transform:translateZ(0);-webkit-animation:load8 1.1s infinite linear;animation:load8 1.1s infinite linear}@-webkit-keyframes load8{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}@keyframes load8{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}",""])},771:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=a(471),o=a(772),l=r(o),i=a(786);t.default=(0,n.connect)(i.mapStateToProps,i.mapDispatchToProps)(l.default)},772:function(e,t,a){(function(e){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function l(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function i(e){return function(t){return D(z(t,e),e)}}Object.defineProperty(t,"__esModule",{value:!0});var s=a(579),c=r(s),u=a(584),f=r(u),d=a(300),p=r(d),m=a(585),g=r(m),b=function(){function e(e,t){for(var a=0;a<t.length;a++){var r=t[a];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,a,r){return a&&e(t.prototype,a),r&&e(t,r),t}}(),h=a(732),v=r(h),y=a(738),w=r(y),E=a(747),_=r(E),N=a(748),k=r(N),x=a(773),P=r(x),O=a(774),F=r(O),T=a(781),j=r(T),C=a(782),M=r(C),L=a(783),S=r(L);a(784);var A={User:{displayName:"User"}},D=(0,g.default)({filename:"D:/p/react-redux-github/src/modules/User/component.jsx",components:A,locals:[e],imports:[p.default]}),z=(0,f.default)({filename:"D:/p/react-redux-github/src/modules/User/component.jsx",components:A,locals:[],imports:[p.default,c.default]}),R=[{activeName:"overview",title:"Overview"},{activeName:"repositories",title:"Repositories"},{activeName:"stars",title:"Stars"},{activeName:"followers",title:"Followers"},{activeName:"following",title:"Following"}],B=i("User")(function(e){function t(e){return n(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return l(t,e),b(t,[{key:"componentDidMount",value:function(){(0,_.default)(),this.props.getUser(this.props.params.name),this.props.getUserRep(this.props.params.name),this.props.changeActiveName(R[0].activeName)}},{key:"changeTabHandler",value:function(e){switch(this.props.changeActiveName(e),e){case R[0].activeName:this.props.getUser(this.props.params.name);break;case R[1].activeName:this.props.getUserRep(this.props.params.name);break;case R[2].activeName:this.props.getUserStars(this.props.params.name);break;case R[3].activeName:this.props.getUserFollowers(this.props.params.name);break;case R[4].activeName:this.props.getUserFollowings(this.props.params.name);break;default:return}}},{key:"render",value:function(){var e=this,t=this.props,a=t.activeName,r=t.user,n=t.reps,o=t.stars,l=t.followers,i=t.followings,s=t.isFetching;return p.default.createElement("div",{className:"user"},p.default.createElement(v.default,{left:{icon:"align",size:{width:20,height:20}},center:{icon:"github"},right:{icon:"bell",size:{width:24,height:24}}}),p.default.createElement(w.default,null,p.default.createElement("div",{className:"tabs-wrap"},p.default.createElement(k.default,{tabs:R,activeName:R[0].activeName,onChange:function(t){return e.changeTabHandler(t)}})),a===R[0].activeName&&p.default.createElement(P.default,{user:r,reps:n,isFetching:s}),a===R[1].activeName&&p.default.createElement(F.default,{reps:n,placeholder:a,isFetching:s}),a===R[2].activeName&&p.default.createElement(j.default,{stars:o,placeholder:a,isFetching:s}),a===R[3].activeName&&p.default.createElement(M.default,{followers:l,placeholder:a,isFetching:s}),a===R[4].activeName&&p.default.createElement(S.default,{followings:i,placeholder:a,isFetching:s})))}}]),t}(p.default.Component));B.propTypes={activeName:p.default.PropTypes.string.isRequired},t.default=B}).call(t,a(496)(e))},773:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=a(300),o=r(n),l=a(731),i=r(l),s=a(742),c=r(s),u=a(759),f=r(u),d=c.default.List,p=c.default.Item,m=function(e){var t=e.user,a=e.reps,r=e.isFetching;return r?o.default.createElement(f.default,null):o.default.createElement("div",{className:"overview"},o.default.createElement("div",{className:"user-item"},o.default.createElement("div",{className:"user-img"},o.default.createElement("img",{src:t.get("avatar_url")})),o.default.createElement("div",{className:"user-info"},o.default.createElement("h1",{className:"login"},t.get("login")),o.default.createElement("h3",{className:"name"},t.get("name")),o.default.createElement("ul",{className:"info"},t.get("company")&&o.default.createElement("li",null,t.get("company")),t.get("location")&&o.default.createElement("li",null,t.get("location")),t.get("email")&&o.default.createElement("li",null,t.get("email")),t.get("blog")&&o.default.createElement("li",null,t.get("blog")),t.get("bio")&&o.default.createElement("li",null,t.get("bio")),t.get("hireable")&&o.default.createElement("li",null,t.get("hireable"))))),o.default.createElement("div",{className:"reps-wrap"},o.default.createElement("h2",{className:"reps-title"},"Popular repositories"),o.default.createElement(d,{className:"user-reps"},a.map(function(e,t){return t<=5&&o.default.createElement(p,{key:e.get("id")},o.default.createElement("div",{className:"item-inner"},o.default.createElement("div",{className:"item-title full-name"},e.get("full_name")),o.default.createElement("div",{className:"item-after star-count"},e.get("stargazers_count"),o.default.createElement("span",null,"★"))))}))))};m.propTypes={user:o.default.PropTypes.instanceOf(i.default.Map),reps:o.default.PropTypes.instanceOf(i.default.List),isFetching:o.default.PropTypes.bool},t.default=m},774:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=a(300),o=r(n),l=a(731),i=r(l),s=a(742),c=r(s),u=a(775),f=r(u),d=a(776),p=r(d),m=a(759),g=r(m),b=c.default.List,h=c.default.Item,v=function(e){var t=e.reps,a=e.placeholder,r=e.isFetching;return r?o.default.createElement(g.default,null):0!==t.size?o.default.createElement(b,{className:"repositories"},t.map(function(e){return o.default.createElement(h,{key:e.get("id")},o.default.createElement("div",{className:"item-inner"},o.default.createElement("div",{className:"item-title full-name"},e.get("full_name")),o.default.createElement("div",{className:"star-language"},o.default.createElement("div",{className:"star-count"},o.default.createElement("span",null,"★"),e.get("stargazers_count")),o.default.createElement(p.default,{language:e.get("language")}))))})):o.default.createElement(f.default,{text:a})};v.propTypes={reps:o.default.PropTypes.instanceOf(i.default.List),placeholder:o.default.PropTypes.string,isFetching:o.default.PropTypes.bool},t.default=v},775:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=a(300),o=r(n);a(757);var l=function(e){var t=e.text;return o.default.createElement("div",{className:"user-placeholder"},o.default.createElement("div",{className:"wrap"},o.default.createElement("p",null,"You don't have any ",t," yet.")))};t.default=l},776:function(e,t,a){(function(e){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function l(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function i(e){return function(t){return w(E(t,e),e)}}Object.defineProperty(t,"__esModule",{value:!0});var s=a(579),c=r(s),u=a(584),f=r(u),d=a(300),p=r(d),m=a(585),g=r(m),b=function(){function e(e,t){for(var a=0;a<t.length;a++){var r=t[a];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,a,r){return a&&e(t.prototype,a),r&&e(t,r),t}}(),h=a(777),v=r(h);a(779);var y={LanguageColor:{displayName:"LanguageColor"}},w=(0,g.default)({filename:"D:/p/react-redux-github/src/components/LanguageColor/index.jsx",components:y,locals:[e],imports:[p.default]}),E=(0,f.default)({filename:"D:/p/react-redux-github/src/components/LanguageColor/index.jsx",components:y,locals:[],imports:[p.default,c.default]}),_=i("LanguageColor")(function(e){function t(e){n(this,t);var a=o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return a.state={color:""},a}return l(t,e),b(t,[{key:"componentDidMount",value:function(){var e=this;v.default.map(function(t,a){a===e.props.language&&e.setState({color:t})})}},{key:"render",value:function(){var e=this.props.language,t=this.state.color;return p.default.createElement("div",{className:"language-color"},p.default.createElement("div",{className:"color",style:{backgroundColor:t}}),p.default.createElement("div",{className:"language"},e))}}]),t}(p.default.Component));_.propTypes={language:p.default.PropTypes.string},t.default=_}).call(t,a(496)(e))},777:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=a(778),o=r(n),l={Mercury:"#ff2b2b",TypeScript:"#2b7489",PureBasic:"#5a6986","Objective-C++":"#6866fb",Self:"#0579aa",edn:"#db5855",NewLisp:"#87AED7","Jupyter Notebook":"#DA5B0B",Rebol:"#358a5b",Frege:"#00cafe",Dart:"#00B4AB",AspectJ:"#a957b0",Shell:"#89e051","Web Ontology Language":"#9cc9dd",xBase:"#403a40",Eiffel:"#946d57",Nix:"#7e7eff",RAML:"#77d9fb",MTML:"#b7e1f4",Racket:"#22228f",Elixir:"#6e4a7e",SAS:"#B34936",Agda:"#315665",wisp:"#7582D1",D:"#ba595e",Kotlin:"#F18E33",Opal:"#f7ede0",Crystal:"#776791","Objective-C":"#438eff","ColdFusion CFC":"#ed2cd6",Oz:"#fab738",Mirah:"#c7a938","Objective-J":"#ff0c5a",Gosu:"#82937f",FreeMarker:"#0050b2",Ruby:"#701516","Component Pascal":"#b0ce4e",Arc:"#aa2afe",Brainfuck:"#2F2530",Nit:"#009917",APL:"#5A8164",Go:"#375eab","Visual Basic":"#945db7",PHP:"#4F5D95",Cirru:"#ccccff",SQF:"#3F3F3F",Glyph:"#e4cc98",Java:"#b07219",MAXScript:"#00a6a6",Scala:"#DC322F",Makefile:"#427819",ColdFusion:"#ed2cd6",Perl:"#0298c3",Lua:"#000080",Vue:"#2c3e50",Verilog:"#b2b7f8",Factor:"#636746",Haxe:"#df7900","Pure Data":"#91de79",Forth:"#341708",Red:"#ee0000",Hy:"#7790B2",Volt:"#1F1F1F",LSL:"#3d9970",eC:"#913960",CoffeeScript:"#244776",HTML:"#e44b23",Lex:"#DBCA00","API Blueprint":"#2ACCA8",Swift:"#ffac45",C:"#555555",AutoHotkey:"#6594b9",Isabelle:"#FEFE00",Metal:"#8f14e9",Clarion:"#db901e",JSONiq:"#40d47e",Boo:"#d4bec1",AutoIt:"#1C3552",Clojure:"#db5855",Rust:"#dea584",Prolog:"#74283c",SourcePawn:"#5c7611",AMPL:"#E6EFBB",FORTRAN:"#4d41b1",ANTLR:"#9DC3FF",Harbour:"#0e60e3",Tcl:"#e4cc98",BlitzMax:"#cd6400",PigLatin:"#fcd7de",Lasso:"#999999",ECL:"#8a1267",VHDL:"#adb2cb",Elm:"#60B5CC","Propeller Spin":"#7fa2a7",X10:"#4B6BEF",IDL:"#a3522f",ATS:"#1ac620",Ada:"#02f88c","Unity3D Asset":"#ab69a1",Nu:"#c9df40",LFE:"#004200",SuperCollider:"#46390b",Oxygene:"#cdd0e3",ASP:"#6a40fd",Assembly:"#6E4C13",Gnuplot:"#f0a9f0",JFlex:"#DBCA00",NetLinx:"#0aa0ff",Turing:"#45f715",Vala:"#fbe5cd",Processing:"#0096D8",Arduino:"#bd79d1",FLUX:"#88ccff",NetLogo:"#ff6375","C Sharp":"#178600",CSS:"#563d7c","Emacs Lisp":"#c065db",Stan:"#b2011d",SaltStack:"#646464",QML:"#44a51c",Pike:"#005390",LOLCODE:"#cc9900",ooc:"#b0b77e",Handlebars:"#01a9d6",J:"#9EEDFF",Mask:"#f97732",EmberScript:"#FFF4F3",TeX:"#3D6117",Nemerle:"#3d3c6e",KRL:"#28431f","Ren'Py":"#ff7f7f","Unified Parallel C":"#4e3617",Golo:"#88562A",Fancy:"#7b9db4",OCaml:"#3be133",Shen:"#120F14",Pascal:"#b0ce4e","F#":"#b845fc",Puppet:"#302B6D",ActionScript:"#882B0F",Diff:"#88dddd","Ragel in Ruby Host":"#9d5200",Fantom:"#dbded5",Zephir:"#118f9e",Click:"#E4E6F3",Smalltalk:"#596706",DM:"#447265",Ioke:"#078193",PogoScript:"#d80074",LiveScript:"#499886",JavaScript:"#f1e05a",VimL:"#199f4b",PureScript:"#1D222D",ABAP:"#E8274B",Matlab:"#bb92ac",Slash:"#007eff",R:"#198ce7",Erlang:"#B83998",Pan:"#cc0000",LookML:"#652B81",Eagle:"#814C05",Scheme:"#1e4aec",PLSQL:"#dad8d8",Python:"#3572A5",Max:"#c4a79c","Common Lisp":"#3fb68b",Latte:"#A8FF97",XQuery:"#5232e7",Omgrofl:"#cabbff",XC:"#99DA07",Nimrod:"#37775b",SystemVerilog:"#DAE1C2",Chapel:"#8dc63f",Groovy:"#e69f56",Dylan:"#6c616e",E:"#ccce35",Parrot:"#f3ca0a","Grammatical Framework":"#79aa7a","Game Maker Language":"#8fb200",Papyrus:"#6600cc","NetLinx+ERB":"#747faa",Clean:"#3F85AF",Alloy:"#64C800",Squirrel:"#800000",PAWN:"#dbb284",UnrealScript:"#a54c4d","Standard ML":"#dc566d",Slim:"#ff8f77",Perl6:"#0000fb",Julia:"#a270ba",Haskell:"#29b544",NCL:"#28431f",Io:"#a9188d",Rouge:"#cc0088",cpp:"#f34b7d","AGS Script":"#B9D9FF",Dogescript:"#cca760",nesC:"#94B0C7","C#":"#178600"};l=(0,o.default)(l),t.default=l},779:function(e,t,a){var r=a(780);"string"==typeof r&&(r=[[e.id,r,""]]);var n=a(470)(r,{});r.locals&&(e.exports=r.locals),r.locals||e.hot.accept(780,function(){var t=a(780);"string"==typeof t&&(t=[[e.id,t,""]]),n(t)}),e.hot.dispose(function(){n()})},780:function(e,t,a){t=e.exports=a(468)(),t.push([e.id,".language-color{position:relative}.language-color .color{position:absolute;width:.16rem;height:.16rem;border-radius:50%;left:.24rem;top:.04rem}.language-color .language{padding-left:.466667rem;font-size:.16rem;line-height:.253333rem}",""])},781:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=a(300),o=r(n),l=a(731),i=r(l),s=a(742),c=r(s),u=a(775),f=r(u),d=a(776),p=r(d),m=a(759),g=r(m),b=c.default.List,h=c.default.Item,v=function(e){var t=e.stars,a=e.placeholder,r=e.isFetching;return r?o.default.createElement(g.default,null):0!==t.size?o.default.createElement(b,{className:"stars"},t.map(function(e){return o.default.createElement(h,{key:e.get("id")},o.default.createElement("div",{className:"item-inner"},o.default.createElement("div",{className:"item-title full-name"},e.get("full_name")),o.default.createElement("div",{className:"des"},e.get("description")),o.default.createElement("div",{className:"star-language"},o.default.createElement("div",{className:"star-count"},o.default.createElement("span",null,"★"),e.get("stargazers_count")),o.default.createElement(p.default,{language:e.get("language")}))))})):o.default.createElement(f.default,{text:a})};v.propTypes={stars:o.default.PropTypes.instanceOf(i.default.List),placeholder:o.default.PropTypes.string,isFetching:o.default.PropTypes.bool},t.default=v},782:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=a(300),o=r(n),l=a(731),i=r(l),s=a(742),c=r(s),u=a(775),f=r(u),d=a(759),p=r(d),m=c.default.List,g=c.default.Item,b=function(e){var t=e.followers,a=e.placeholder,r=e.isFetching;return r?o.default.createElement(p.default,null):0!==t.size?o.default.createElement(m,{className:"followers"},t.map(function(e){return o.default.createElement(g,{key:e.get("id")},o.default.createElement("div",{className:"item-media"},o.default.createElement("img",{src:e.get("avatar_url")})),o.default.createElement("div",{className:"item-inner"},o.default.createElement("div",{className:"item-title"},e.get("name"),o.default.createElement("span",null,e.get("login"))),o.default.createElement("div",{className:"location"},e.get("location"))))})):o.default.createElement(f.default,{text:a})};b.propTypes={followers:o.default.PropTypes.instanceOf(i.default.List),placeholder:o.default.PropTypes.string,isFetching:o.default.PropTypes.bool},t.default=b},783:function(e,t,a){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=a(300),o=r(n),l=a(731),i=r(l),s=a(742),c=r(s),u=a(775),f=r(u),d=a(759),p=r(d),m=c.default.List,g=c.default.Item,b=function(e){var t=e.followings,a=e.placeholder,r=e.isFetching;return r?o.default.createElement(p.default,null):0!==t.size?o.default.createElement(m,{className:"followings"},t.map(function(e){return o.default.createElement(g,{key:e.get("id")},o.default.createElement("div",{className:"item-media"},o.default.createElement("img",{src:e.get("avatar_url")})),o.default.createElement("div",{className:"item-inner"},o.default.createElement("div",{className:"item-title"},e.get("name"),o.default.createElement("span",null,e.get("login"))),o.default.createElement("div",{className:"location"},e.get("location"))))})):o.default.createElement(f.default,{text:a})};b.propTypes={followings:o.default.PropTypes.instanceOf(i.default.List),placeholder:o.default.PropTypes.string,isFetching:o.default.PropTypes.bool},t.default=b},784:function(e,t,a){var r=a(785);"string"==typeof r&&(r=[[e.id,r,""]]);var n=a(470)(r,{});r.locals&&(e.exports=r.locals),r.locals||e.hot.accept(785,function(){var t=a(785);"string"==typeof t&&(t=[[e.id,t,""]]),n(t)}),e.hot.dispose(function(){n()})},785:function(e,t,a){t=e.exports=a(468)(),t.push([e.id,"body{background-color:#fff}.button-red{color:#fff;background-color:#f44336!important}.button-orange{color:#fff;background-color:#ff9800!important}.button-green{color:#fff;background-color:#4caf50!important}.button-blue{color:#fff;background-color:#2196f3!important}.button{border-radius:0}.entry-wrap,.entry-wrap>div,.entry-wrap>div>div{height:100%}.list-block .item-inner:after{display:none}.user .active-state{background-color:#bfe5f3}.user .navbar-inner{background-color:#f5f5f5}.user .navbar:after{display:none}.user .tabs-wrap{position:relative;z-index:2;height:.533333rem;margin-top:-.013333rem;overflow-y:hidden;overflow-x:auto;background-color:#f5f5f5;border-bottom:.013333rem solid #d5d5d5;width:100%}.user .tabs-wrap::-webkit-scrollbar{width:0}.user .tabs-wrap .tabs{overflow-y:hidden;overflow-x:scroll;text-align:center;white-space:nowrap;width:6rem;background-color:#f5f5f5;padding-bottom:.266667rem;margin-top:-.08rem}.user .tab.selected{font-weight:600;color:#c9510c}.user .user-item{background-color:#fafafa;display:-webkit-box;display:-ms-flexbox;display:flex;position:relative;padding:.2rem .2rem .133333rem;overflow:visible;line-height:1.5;border-bottom:.013333rem solid #ccc}.user .user-item img{width:1.466667rem;height:1.466667rem;border-radius:.04rem}.user .user-item .user-info{padding-left:.2rem}.user .user-item .user-info .login{margin:0;font-size:.213333rem;color:#333}.user .user-item .user-info .name{margin:0;font-size:.16rem;font-weight:400;color:#767676}.user .user-item .user-info .info{list-style:none;padding:0;margin:.1rem 0 0}.user .user-item .user-info .info li{border:none;margin-bottom:0;font-size:.16rem;line-height:1.8}.user .reps-wrap{padding:.16rem .16rem 0}.user .reps-wrap .reps-title{font-size:.213333rem;font-weight:400}.user .reps-wrap .user-reps{border:.013333rem solid #ccc}.user .star-count{margin-bottom:.066667rem;margin-left:.066667rem;font-size:.146667rem;color:#999}.user .full-name{margin-bottom:.04rem;font-weight:500;line-height:1.2;color:#4078c0;word-wrap:break-word;max-width:80%;white-space:normal;font-size:.186667rem}.user .repositories .item-inner,.user .stars .item-inner{display:block}.user .stars .des{font-size:.16rem;color:#767676}.user .star-language{margin-bottom:.066667rem;display:-webkit-box;display:-ms-flexbox;display:flex;font-size:.186667rem}.user .star-language .star-count{font-size:.186667rem;margin:0;color:#767676}.user .star-language .full-name{max-width:100%}.user .followers .item-media,.user .followings .item-media{position:absolute;left:.2rem}.user .followers .item-inner,.user .followings .item-inner{display:block;margin-left:.6rem;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start}.user .followers .item-inner .item-title,.user .followings .item-inner .item-title{font-size:.186667rem;color:#4078c0}.user .followers .item-inner span,.user .followings .item-inner span{font-size:.186667rem;padding-left:.066667rem;color:#333}.user .followers .item-inner .location,.user .followings .item-inner .location{font-size:.16rem;color:#767676}.user .followers img,.user .followings img{width:.4rem;height:.4rem}",""])}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,